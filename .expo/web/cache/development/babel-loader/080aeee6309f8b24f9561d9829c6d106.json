{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jshukurov\\\\Desktop\\\\Poppi Over The Edge\\\\Poppi-Over-the-Edge-master\\\\node_modules\\\\expo-barcode-scanner\\\\build\\\\BarCodeScanner.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { UnavailabilityError } from '@unimodules/core';\nimport mapValues from 'lodash/mapValues';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport ExpoBarCodeScannerModule from \"./ExpoBarCodeScannerModule\";\nimport ExpoBarCodeScannerView from \"./ExpoBarCodeScannerView\";\nvar {\n  BarCodeType,\n  Type\n} = ExpoBarCodeScannerModule;\nvar EVENT_THROTTLE_MS = 500;\nexport class BarCodeScanner extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.lastEvents = {};\n    this.lastEventsTimes = {};\n\n    this.onObjectDetected = callback => (_ref) => {\n      var {\n        nativeEvent\n      } = _ref;\n      var {\n        type\n      } = nativeEvent;\n\n      if (this.lastEvents[type] && this.lastEventsTimes[type] && JSON.stringify(nativeEvent) === this.lastEvents[type] && Date.now() - this.lastEventsTimes[type] < EVENT_THROTTLE_MS) {\n        return;\n      }\n\n      if (callback) {\n        callback(nativeEvent);\n        this.lastEventsTimes[type] = new Date();\n        this.lastEvents[type] = JSON.stringify(nativeEvent);\n      }\n    };\n  }\n\n  static scanFromURLAsync(url) {\n    var _arguments = arguments;\n    return _asyncToGenerator(function* () {\n      var barCodeTypes = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : Object.values(BarCodeType);\n\n      if (!ExpoBarCodeScannerModule.scanFromURLAsync) {\n        throw new UnavailabilityError('expo-barcode-scanner', 'scanFromURLAsync');\n      }\n\n      if (Array.isArray(barCodeTypes) && !barCodeTypes.length) {\n        throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');\n      }\n\n      if (Platform.OS === 'ios') {\n        if (Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeType.qr)) {\n          throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');\n        }\n\n        return yield ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeType.qr]);\n      }\n\n      return yield ExpoBarCodeScannerModule.scanFromURLAsync(url, barCodeTypes);\n    })();\n  }\n\n  render() {\n    var nativeProps = this.convertNativeProps(this.props);\n    var {\n      onBarCodeScanned\n    } = this.props;\n    return React.createElement(ExpoBarCodeScannerView, _extends({}, nativeProps, {\n      onBarCodeScanned: this.onObjectDetected(onBarCodeScanned),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  convertNativeProps(props) {\n    var newProps = mapValues(props, this.convertProp);\n    return newProps;\n  }\n\n  convertProp(value, key) {\n    if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {\n      return BarCodeScanner.ConversionTables[key][value];\n    }\n\n    return value;\n  }\n\n}\nBarCodeScanner.Constants = {\n  BarCodeType,\n  Type\n};\nBarCodeScanner.ConversionTables = {\n  type: Type\n};\nBarCodeScanner.propTypes = _objectSpread({}, ViewPropTypes, {\n  onBarCodeScanned: PropTypes.func,\n  barCodeTypes: PropTypes.array,\n  type: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n});\nBarCodeScanner.defaultProps = {\n  type: Type.back,\n  barCodeTypes: Object.values(BarCodeType)\n};\nexport var {\n  Constants\n} = BarCodeScanner;","map":{"version":3,"sources":["../src/BarCodeScanner.tsx"],"names":[],"mappings":"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","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport mapValues from 'lodash/mapValues';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Platform, ViewProps, ViewPropTypes } from 'react-native';\n\nimport ExpoBarCodeScannerModule from './ExpoBarCodeScannerModule';\nimport ExpoBarCodeScannerView from './ExpoBarCodeScannerView';\n\nconst { BarCodeType, Type } = ExpoBarCodeScannerModule;\n\nconst EVENT_THROTTLE_MS = 500;\n\ntype BarCodeEvent = {\n  type: string;\n  data: string;\n  [key: string]: any;\n};\n\nexport type BarCodeEventCallbackArguments = {\n  nativeEvent: BarCodeEvent;\n};\n\nexport type BarCodeScannedCallback = (params: BarCodeEvent) => void;\n\nexport interface BarCodeScannerProps extends ViewProps {\n  type?: 'front' | 'back' | number;\n  barCodeTypes?: string[];\n  onBarCodeScanned: BarCodeScannedCallback;\n}\n\nexport class BarCodeScanner extends React.Component<BarCodeScannerProps> {\n  lastEvents: { [key: string]: any } = {};\n  lastEventsTimes: { [key: string]: any } = {};\n\n  static Constants = {\n    BarCodeType,\n    Type,\n  };\n\n  static ConversionTables = {\n    type: Type,\n  };\n\n  static propTypes = {\n    ...ViewPropTypes,\n    onBarCodeScanned: PropTypes.func,\n    barCodeTypes: PropTypes.array,\n    type: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  };\n\n  static defaultProps = {\n    type: Type.back,\n    barCodeTypes: Object.values(BarCodeType),\n  };\n\n  static async scanFromURLAsync(\n    url: string,\n    barCodeTypes: string[] = Object.values(BarCodeType)\n  ): Promise<{ type: string; data: string }> {\n    if (!ExpoBarCodeScannerModule.scanFromURLAsync) {\n      throw new UnavailabilityError('expo-barcode-scanner', 'scanFromURLAsync');\n    }\n    if (Array.isArray(barCodeTypes) && !barCodeTypes.length) {\n      throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');\n    }\n\n    if (Platform.OS === 'ios') {\n      if (Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeType.qr)) {\n        // Only QR type is supported on iOS, fail if one tries to use other types\n        throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');\n      }\n      // on iOS use only supported QR type\n      return await ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeType.qr]);\n    }\n\n    // On other platforms, if barCodeTypes is not provided, use all available types\n    return await ExpoBarCodeScannerModule.scanFromURLAsync(url, barCodeTypes);\n  }\n\n  render() {\n    const nativeProps = this.convertNativeProps(this.props);\n    const { onBarCodeScanned } = this.props;\n    return (\n      <ExpoBarCodeScannerView\n        {...nativeProps}\n        onBarCodeScanned={this.onObjectDetected(onBarCodeScanned)}\n      />\n    );\n  }\n\n  // coordinates of cornerPoints and boundingBox are represented in DP (Display-Indepent Points) unit\n  // React Native is using the same unit\n  onObjectDetected = (callback?: BarCodeScannedCallback) => ({\n    nativeEvent,\n  }: BarCodeEventCallbackArguments) => {\n    const { type } = nativeEvent;\n    if (\n      this.lastEvents[type] &&\n      this.lastEventsTimes[type] &&\n      JSON.stringify(nativeEvent) === this.lastEvents[type] &&\n      Date.now() - this.lastEventsTimes[type] < EVENT_THROTTLE_MS\n    ) {\n      return;\n    }\n\n    if (callback) {\n      callback(nativeEvent);\n      this.lastEventsTimes[type] = new Date();\n      this.lastEvents[type] = JSON.stringify(nativeEvent);\n    }\n  };\n\n  convertNativeProps(props: BarCodeScannerProps) {\n    const newProps = mapValues(props, this.convertProp);\n    return newProps;\n  }\n\n  convertProp(value: any, key: string): any {\n    if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {\n      return BarCodeScanner.ConversionTables[key][value];\n    }\n    return value;\n  }\n}\n\nexport const { Constants } = BarCodeScanner;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}