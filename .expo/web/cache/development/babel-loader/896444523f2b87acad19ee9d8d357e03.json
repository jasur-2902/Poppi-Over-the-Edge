{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { UnavailabilityError } from '@unimodules/core';\nimport invariant from 'invariant';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ExpoLocalAuthentication from \"./ExpoLocalAuthentication\";\nimport { AuthenticationType } from \"./LocalAuthentication.types\";\nexport { AuthenticationType };\nexport function hasHardwareAsync() {\n  return _hasHardwareAsync.apply(this, arguments);\n}\n\nfunction _hasHardwareAsync() {\n  _hasHardwareAsync = _asyncToGenerator(function* () {\n    if (!ExpoLocalAuthentication.hasHardwareAsync) {\n      throw new UnavailabilityError('expo-local-authentication', 'hasHardwareAsync');\n    }\n\n    return yield ExpoLocalAuthentication.hasHardwareAsync();\n  });\n  return _hasHardwareAsync.apply(this, arguments);\n}\n\nexport function supportedAuthenticationTypesAsync() {\n  return _supportedAuthenticationTypesAsync.apply(this, arguments);\n}\n\nfunction _supportedAuthenticationTypesAsync() {\n  _supportedAuthenticationTypesAsync = _asyncToGenerator(function* () {\n    if (!ExpoLocalAuthentication.supportedAuthenticationTypesAsync) {\n      throw new UnavailabilityError('expo-local-authentication', 'supportedAuthenticationTypesAsync');\n    }\n\n    return yield ExpoLocalAuthentication.supportedAuthenticationTypesAsync();\n  });\n  return _supportedAuthenticationTypesAsync.apply(this, arguments);\n}\n\nexport function isEnrolledAsync() {\n  return _isEnrolledAsync.apply(this, arguments);\n}\n\nfunction _isEnrolledAsync() {\n  _isEnrolledAsync = _asyncToGenerator(function* () {\n    if (!ExpoLocalAuthentication.isEnrolledAsync) {\n      throw new UnavailabilityError('expo-local-authentication', 'isEnrolledAsync');\n    }\n\n    return yield ExpoLocalAuthentication.isEnrolledAsync();\n  });\n  return _isEnrolledAsync.apply(this, arguments);\n}\n\nexport function authenticateAsync() {\n  return _authenticateAsync.apply(this, arguments);\n}\n\nfunction _authenticateAsync() {\n  _authenticateAsync = _asyncToGenerator(function* () {\n    var promptMessageIOS = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Authenticate';\n\n    if (!ExpoLocalAuthentication.authenticateAsync) {\n      throw new UnavailabilityError('expo-local-authentication', 'authenticateAsync');\n    }\n\n    if (Platform.OS === 'ios') {\n      invariant(typeof promptMessageIOS === 'string' && promptMessageIOS.length, 'LocalAuthentication.authenticateAsync must be called with a non-empty string on iOS');\n      var result = yield ExpoLocalAuthentication.authenticateAsync(promptMessageIOS);\n\n      if (result.warning) {\n        console.warn(result.warning);\n      }\n\n      return result;\n    } else {\n      return yield ExpoLocalAuthentication.authenticateAsync();\n    }\n  });\n  return _authenticateAsync.apply(this, arguments);\n}\n\nexport function cancelAuthenticate() {\n  return _cancelAuthenticate.apply(this, arguments);\n}\n\nfunction _cancelAuthenticate() {\n  _cancelAuthenticate = _asyncToGenerator(function* () {\n    if (!ExpoLocalAuthentication.cancelAuthenticate) {\n      throw new UnavailabilityError('expo-local-authentication', 'cancelAuthenticate');\n    }\n\n    yield ExpoLocalAuthentication.cancelAuthenticate();\n  });\n  return _cancelAuthenticate.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/LocalAuthentication.ts"],"names":[],"mappings":";;;;AAAA,SAAS,mBAAT,QAAoC,kBAApC;AACA,OAAO,SAAP,MAAsB,WAAtB;;AAGA,OAAO,uBAAP;AAEA,SAAS,kBAAT;AAEA,SAAS,kBAAT;AAEA,gBAAsB,gBAAtB;AAAA;AAAA;;;wCAAO,aAA+B;AACpC,QAAI,CAAC,uBAAuB,CAAC,gBAA7B,EAA+C;AAC7C,YAAM,IAAI,mBAAJ,CAAwB,2BAAxB,EAAqD,kBAArD,CAAN;AACD;;AACD,iBAAa,uBAAuB,CAAC,gBAAxB,EAAb;AACD,G;;;;AAED,gBAAsB,iCAAtB;AAAA;AAAA;;;yDAAO,aAAgD;AACrD,QAAI,CAAC,uBAAuB,CAAC,iCAA7B,EAAgE;AAC9D,YAAM,IAAI,mBAAJ,CAAwB,2BAAxB,EAAqD,mCAArD,CAAN;AACD;;AACD,iBAAa,uBAAuB,CAAC,iCAAxB,EAAb;AACD,G;;;;AAED,gBAAsB,eAAtB;AAAA;AAAA;;;uCAAO,aAA8B;AACnC,QAAI,CAAC,uBAAuB,CAAC,eAA7B,EAA8C;AAC5C,YAAM,IAAI,mBAAJ,CAAwB,2BAAxB,EAAqD,iBAArD,CAAN;AACD;;AACD,iBAAa,uBAAuB,CAAC,eAAxB,EAAb;AACD,G;;;;AAED,gBAAsB,iBAAtB;AAAA;AAAA;;;yCAAO,aACoC;AAAA,QAAzC,gBAAyC,uEAAd,cAAc;;AAEzC,QAAI,CAAC,uBAAuB,CAAC,iBAA7B,EAAgD;AAC9C,YAAM,IAAI,mBAAJ,CAAwB,2BAAxB,EAAqD,mBAArD,CAAN;AACD;;AAED,QAAI,QAAQ,CAAC,EAAT,KAAgB,KAApB,EAA2B;AACzB,MAAA,SAAS,CACP,OAAO,gBAAP,KAA4B,QAA5B,IAAwC,gBAAgB,CAAC,MADlD,EAEP,qFAFO,CAAT;AAKA,UAAM,MAAM,SAAS,uBAAuB,CAAC,iBAAxB,CAA0C,gBAA1C,CAArB;;AAEA,UAAI,MAAM,CAAC,OAAX,EAAoB;AAClB,QAAA,OAAO,CAAC,IAAR,CAAa,MAAM,CAAC,OAApB;AACD;;AACD,aAAO,MAAP;AACD,KAZD,MAYO;AACL,mBAAa,uBAAuB,CAAC,iBAAxB,EAAb;AACD;AACF,G;;;;AAED,gBAAsB,kBAAtB;AAAA;AAAA;;;0CAAO,aAAiC;AACtC,QAAI,CAAC,uBAAuB,CAAC,kBAA7B,EAAiD;AAC/C,YAAM,IAAI,mBAAJ,CAAwB,2BAAxB,EAAqD,oBAArD,CAAN;AACD;;AACD,UAAM,uBAAuB,CAAC,kBAAxB,EAAN;AACD,G","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport invariant from 'invariant';\nimport { Platform } from 'react-native';\n\nimport ExpoLocalAuthentication from './ExpoLocalAuthentication';\n\nimport { AuthenticationType, LocalAuthenticationResult } from './LocalAuthentication.types';\n\nexport { AuthenticationType, LocalAuthenticationResult };\n\nexport async function hasHardwareAsync(): Promise<boolean> {\n  if (!ExpoLocalAuthentication.hasHardwareAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'hasHardwareAsync');\n  }\n  return await ExpoLocalAuthentication.hasHardwareAsync();\n}\n\nexport async function supportedAuthenticationTypesAsync(): Promise<AuthenticationType[]> {\n  if (!ExpoLocalAuthentication.supportedAuthenticationTypesAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'supportedAuthenticationTypesAsync');\n  }\n  return await ExpoLocalAuthentication.supportedAuthenticationTypesAsync();\n}\n\nexport async function isEnrolledAsync(): Promise<boolean> {\n  if (!ExpoLocalAuthentication.isEnrolledAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'isEnrolledAsync');\n  }\n  return await ExpoLocalAuthentication.isEnrolledAsync();\n}\n\nexport async function authenticateAsync(\n  promptMessageIOS: string = 'Authenticate'\n): Promise<LocalAuthenticationResult> {\n  if (!ExpoLocalAuthentication.authenticateAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'authenticateAsync');\n  }\n\n  if (Platform.OS === 'ios') {\n    invariant(\n      typeof promptMessageIOS === 'string' && promptMessageIOS.length,\n      'LocalAuthentication.authenticateAsync must be called with a non-empty string on iOS'\n    );\n\n    const result = await ExpoLocalAuthentication.authenticateAsync(promptMessageIOS);\n\n    if (result.warning) {\n      console.warn(result.warning);\n    }\n    return result;\n  } else {\n    return await ExpoLocalAuthentication.authenticateAsync();\n  }\n}\n\nexport async function cancelAuthenticate(): Promise<void> {\n  if (!ExpoLocalAuthentication.cancelAuthenticate) {\n    throw new UnavailabilityError('expo-local-authentication', 'cancelAuthenticate');\n  }\n  await ExpoLocalAuthentication.cancelAuthenticate();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}