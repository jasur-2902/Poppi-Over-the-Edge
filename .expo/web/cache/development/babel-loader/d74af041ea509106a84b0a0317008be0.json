{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { captureRef } from 'react-native-view-shot';\nexport default function takeSnapshotAsync(_x, _x2) {\n  return _takeSnapshotAsync.apply(this, arguments);\n}\n\nfunction _takeSnapshotAsync() {\n  _takeSnapshotAsync = _asyncToGenerator(function* (node, options) {\n    if (typeof node === 'object' && 'current' in node && node.current) {\n      return captureRef(node.current, options);\n    }\n\n    return captureRef(node, options);\n  });\n  return _takeSnapshotAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/takeSnapshotAsync.ts"],"names":[],"mappings":";;;;AACA,SAAS,UAAT,QAA2B,wBAA3B;AAaA,wBAA8B,iBAA9B;AAAA;AAAA;;;yCAAe,WACb,IADa,EAEb,OAFa,EAEY;AAEzB,QAAI,OAAO,IAAP,KAAgB,QAAhB,IAA4B,aAAa,IAAzC,IAAiD,IAAI,CAAC,OAA1D,EAAmE;AAGjE,aAAO,UAAU,CAAC,IAAI,CAAC,OAAN,EAAe,OAAf,CAAjB;AACD;;AAGD,WAAO,UAAU,CAAC,IAAD,EAAO,OAAP,CAAjB;AACD,G","sourcesContent":["import * as React from 'react';\nimport { captureRef } from 'react-native-view-shot';\n\ntype ReactNativeNodeHandle = number;\n\ntype SnapshotOptions = {\n  width?: number;\n  height?: number;\n  format: 'png' | 'jpg' | 'raw' | 'webm';\n  quality: number;\n  snapshotContentContainer: boolean;\n  result: 'tmpfile' | 'base64' | 'data-uri' | 'zip-base64';\n};\n\nexport default async function takeSnapshotAsync<T>(\n  node: ReactNativeNodeHandle | React.Component | React.RefObject<T>,\n  options?: SnapshotOptions\n): Promise<string> {\n  if (typeof node === 'object' && 'current' in node && node.current) {\n    // React.RefObject\n    // @ts-ignore: captureRef's type doesn't include node handles\n    return captureRef(node.current, options);\n  }\n\n  // @ts-ignore: captureRef's type doesn't include node handles\n  return captureRef(node, options);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}