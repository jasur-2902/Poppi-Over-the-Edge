{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport filter from 'lodash/filter';\nimport qs from 'query-string';\n\nfunction checkValue(value) {\n  if (!value) {\n    return null;\n  }\n\n  var arr = Array.isArray(value) ? value : [value];\n  return arr.join(',');\n}\n\nexport default {\n  get name() {\n    return 'ExpoMailComposer';\n  },\n\n  composeAsync(options) {\n    return _asyncToGenerator(function* () {\n      var email = filter({\n        cc: checkValue(options.ccRecipients),\n        bcc: checkValue(options.bccRecipients),\n        subject: options.subject,\n        body: options.body\n      });\n      var query = qs.stringify(email);\n      var queryComponent = query ? '?' + query : '';\n      var to = checkValue(options.recipients);\n      var recipientComponent = to || '';\n      var mailto = \"mailto:\".concat(recipientComponent).concat(queryComponent);\n      window.open(mailto);\n      return {\n        status: 'undetermined'\n      };\n    })();\n  }\n\n};","map":{"version":3,"sources":["../src/ExpoMailComposer.web.ts"],"names":[],"mappings":";;;;AAAA,OAAO,MAAP,MAAmB,eAAnB;AACA,OAAO,EAAP,MAAe,cAAf;;AAGA,SAAS,UAAT,CAAoB,KAApB,EAA6C;AAC3C,MAAI,CAAC,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AAED,MAAM,GAAG,GAAG,KAAK,CAAC,OAAN,CAAc,KAAd,IAAuB,KAAvB,GAA+B,CAAC,KAAD,CAA3C;AACA,SAAO,GAAG,CAAC,IAAJ,CAAS,GAAT,CAAP;AACD;;AAED,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,kBAAP;AACD,GAHY;;AAIP,EAAA,YAAN,CAAmB,OAAnB,EAA0C;AAAA;AACxC,UAAM,KAAK,GAAG,MAAM,CAAC;AACnB,QAAA,EAAE,EAAE,UAAU,CAAC,OAAO,CAAC,YAAT,CADK;AAEnB,QAAA,GAAG,EAAE,UAAU,CAAC,OAAO,CAAC,aAAT,CAFI;AAGnB,QAAA,OAAO,EAAE,OAAO,CAAC,OAHE;AAInB,QAAA,IAAI,EAAE,OAAO,CAAC;AAJK,OAAD,CAApB;AAQA,UAAM,KAAK,GAAG,EAAE,CAAC,SAAH,CAAa,KAAb,CAAd;AACA,UAAM,cAAc,GAAG,KAAK,GAAG,MAAM,KAAT,GAAiB,EAA7C;AACA,UAAM,EAAE,GAAG,UAAU,CAAC,OAAO,CAAC,UAAT,CAArB;AACA,UAAM,kBAAkB,GAAG,EAAE,IAAI,EAAjC;AACA,UAAM,MAAM,oBAAa,kBAAb,SAAkC,cAAlC,CAAZ;AAEA,MAAA,MAAM,CAAC,IAAP,CAAY,MAAZ;AAEA,aAAO;AAAE,QAAA,MAAM,EAAE;AAAV,OAAP;AAjBwC;AAkBzC;;AAtBY,CAAf","sourcesContent":["import filter from 'lodash/filter';\nimport qs from 'query-string';\nimport { ComposeOptions, ComposeResult } from './MailComposer.types';\n\nfunction checkValue(value?: string[] | string): string | null {\n  if (!value) {\n    return null;\n  }\n\n  const arr = Array.isArray(value) ? value : [value];\n  return arr.join(',');\n}\n\nexport default {\n  get name(): string {\n    return 'ExpoMailComposer';\n  },\n  async composeAsync(options: ComposeOptions): Promise<ComposeResult> {\n    const email = filter({\n      cc: checkValue(options.ccRecipients),\n      bcc: checkValue(options.bccRecipients),\n      subject: options.subject,\n      body: options.body,\n    });\n\n    // @ts-ignore: Fix this -- just patching to get publishing working for now.\n    const query = qs.stringify(email);\n    const queryComponent = query ? '?' + query : '';\n    const to = checkValue(options.recipients);\n    const recipientComponent = to || '';\n    const mailto = `mailto:${recipientComponent}${queryComponent}`;\n\n    window.open(mailto);\n\n    return { status: 'undetermined' };\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}