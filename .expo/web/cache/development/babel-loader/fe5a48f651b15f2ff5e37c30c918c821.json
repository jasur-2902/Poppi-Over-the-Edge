{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { EventEmitter, Platform } from '@unimodules/core';\nimport invariant from 'invariant';\nimport ExpoLocation from \"./ExpoLocation\";\nvar LocationEventEmitter = new EventEmitter(ExpoLocation);\n;\nvar LocationAccuracy;\n\n(function (LocationAccuracy) {\n  LocationAccuracy[LocationAccuracy[\"Lowest\"] = 1] = \"Lowest\";\n  LocationAccuracy[LocationAccuracy[\"Low\"] = 2] = \"Low\";\n  LocationAccuracy[LocationAccuracy[\"Balanced\"] = 3] = \"Balanced\";\n  LocationAccuracy[LocationAccuracy[\"High\"] = 4] = \"High\";\n  LocationAccuracy[LocationAccuracy[\"Highest\"] = 5] = \"Highest\";\n  LocationAccuracy[LocationAccuracy[\"BestForNavigation\"] = 6] = \"BestForNavigation\";\n})(LocationAccuracy || (LocationAccuracy = {}));\n\nvar LocationActivityType;\n\n(function (LocationActivityType) {\n  LocationActivityType[LocationActivityType[\"Other\"] = 1] = \"Other\";\n  LocationActivityType[LocationActivityType[\"AutomotiveNavigation\"] = 2] = \"AutomotiveNavigation\";\n  LocationActivityType[LocationActivityType[\"Fitness\"] = 3] = \"Fitness\";\n  LocationActivityType[LocationActivityType[\"OtherNavigation\"] = 4] = \"OtherNavigation\";\n  LocationActivityType[LocationActivityType[\"Airborne\"] = 5] = \"Airborne\";\n})(LocationActivityType || (LocationActivityType = {}));\n\nexport { LocationAccuracy as Accuracy, LocationActivityType as ActivityType };\nexport var GeofencingEventType;\n\n(function (GeofencingEventType) {\n  GeofencingEventType[GeofencingEventType[\"Enter\"] = 1] = \"Enter\";\n  GeofencingEventType[GeofencingEventType[\"Exit\"] = 2] = \"Exit\";\n})(GeofencingEventType || (GeofencingEventType = {}));\n\nexport var GeofencingRegionState;\n\n(function (GeofencingRegionState) {\n  GeofencingRegionState[GeofencingRegionState[\"Unknown\"] = 0] = \"Unknown\";\n  GeofencingRegionState[GeofencingRegionState[\"Inside\"] = 1] = \"Inside\";\n  GeofencingRegionState[GeofencingRegionState[\"Outside\"] = 2] = \"Outside\";\n})(GeofencingRegionState || (GeofencingRegionState = {}));\n\nvar nextWatchId = 0;\nvar headingId;\n\nfunction _getNextWatchId() {\n  nextWatchId++;\n  return nextWatchId;\n}\n\nfunction _getCurrentWatchId() {\n  return nextWatchId;\n}\n\nvar watchCallbacks = {};\nvar deviceEventSubscription;\nvar headingEventSub;\nvar googleApiKey;\nvar googleApiUrl = 'https://maps.googleapis.com/maps/api/geocode/json';\nexport function getProviderStatusAsync() {\n  return _getProviderStatusAsync.apply(this, arguments);\n}\n\nfunction _getProviderStatusAsync() {\n  _getProviderStatusAsync = _asyncToGenerator(function* () {\n    return ExpoLocation.getProviderStatusAsync();\n  });\n  return _getProviderStatusAsync.apply(this, arguments);\n}\n\nexport function enableNetworkProviderAsync() {\n  return _enableNetworkProviderAsync.apply(this, arguments);\n}\n\nfunction _enableNetworkProviderAsync() {\n  _enableNetworkProviderAsync = _asyncToGenerator(function* () {\n    if (Platform.OS === 'android') {\n      return ExpoLocation.enableNetworkProviderAsync();\n    }\n  });\n  return _enableNetworkProviderAsync.apply(this, arguments);\n}\n\nexport function getCurrentPositionAsync() {\n  return _getCurrentPositionAsync.apply(this, arguments);\n}\n\nfunction _getCurrentPositionAsync() {\n  _getCurrentPositionAsync = _asyncToGenerator(function* () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return ExpoLocation.getCurrentPositionAsync(options);\n  });\n  return _getCurrentPositionAsync.apply(this, arguments);\n}\n\nexport function getHeadingAsync() {\n  return _getHeadingAsync.apply(this, arguments);\n}\n\nfunction _getHeadingAsync() {\n  _getHeadingAsync = _asyncToGenerator(function* () {\n    return new Promise(function () {\n      var _ref2 = _asyncToGenerator(function* (resolve, reject) {\n        try {\n          if (headingEventSub) {\n            var tries = 0;\n            var headingSub = LocationEventEmitter.addListener('Expo.headingChanged', (_ref3) => {\n              var {\n                heading\n              } = _ref3;\n\n              if (heading.accuracy > 1 || tries > 5) {\n                resolve(heading);\n                LocationEventEmitter.removeSubscription(headingSub);\n              } else {\n                tries += 1;\n              }\n            });\n          } else {\n            var done = false;\n            var subscription;\n            var _tries = 0;\n            subscription = yield watchHeadingAsync(heading => {\n              if (!done) {\n                if (heading.accuracy > 1 || _tries > 5) {\n                  subscription.remove();\n                  resolve(heading);\n                  done = true;\n                } else {\n                  _tries += 1;\n                }\n              } else {\n                subscription.remove();\n              }\n            });\n\n            if (done) {\n              subscription.remove();\n            }\n          }\n        } catch (e) {\n          reject(e);\n        }\n      });\n\n      return function (_x17, _x18) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n  return _getHeadingAsync.apply(this, arguments);\n}\n\nexport function watchHeadingAsync(_x) {\n  return _watchHeadingAsync.apply(this, arguments);\n}\n\nfunction _watchHeadingAsync() {\n  _watchHeadingAsync = _asyncToGenerator(function* (callback) {\n    if (headingEventSub) {\n      _removeHeadingWatcher(headingId);\n    }\n\n    headingEventSub = LocationEventEmitter.addListener('Expo.headingChanged', (_ref4) => {\n      var {\n        watchId,\n        heading\n      } = _ref4;\n      var callback = watchCallbacks[watchId];\n\n      if (callback) {\n        callback(heading);\n      } else {\n        ExpoLocation.removeWatchAsync(watchId);\n      }\n    });\n    headingId = _getNextWatchId();\n    watchCallbacks[headingId] = callback;\n    yield ExpoLocation.watchDeviceHeading(headingId);\n    return {\n      remove() {\n        _removeHeadingWatcher(headingId);\n      }\n\n    };\n  });\n  return _watchHeadingAsync.apply(this, arguments);\n}\n\nfunction _removeHeadingWatcher(watchId) {\n  if (!watchCallbacks[watchId]) {\n    return;\n  }\n\n  delete watchCallbacks[watchId];\n  ExpoLocation.removeWatchAsync(watchId);\n\n  if (headingEventSub) {\n    LocationEventEmitter.removeSubscription(headingEventSub);\n    headingEventSub = null;\n  }\n}\n\nfunction _maybeInitializeEmitterSubscription() {\n  if (!deviceEventSubscription) {\n    deviceEventSubscription = LocationEventEmitter.addListener('Expo.locationChanged', (_ref) => {\n      var {\n        watchId,\n        location\n      } = _ref;\n      var callback = watchCallbacks[watchId];\n\n      if (callback) {\n        callback(location);\n      } else {\n        ExpoLocation.removeWatchAsync(watchId);\n      }\n    });\n  }\n}\n\nexport function geocodeAsync(_x2) {\n  return _geocodeAsync.apply(this, arguments);\n}\n\nfunction _geocodeAsync() {\n  _geocodeAsync = _asyncToGenerator(function* (address) {\n    return ExpoLocation.geocodeAsync(address).catch(error => {\n      var platformUsesGoogleMaps = Platform.OS === 'android' || Platform.OS === 'web';\n\n      if (platformUsesGoogleMaps && error.code === 'E_NO_GEOCODER') {\n        if (!googleApiKey) {\n          throw new Error(error.message + ' Please set a Google API Key to use geocoding.');\n        }\n\n        return _googleGeocodeAsync(address);\n      }\n\n      throw error;\n    });\n  });\n  return _geocodeAsync.apply(this, arguments);\n}\n\nexport function reverseGeocodeAsync(_x3) {\n  return _reverseGeocodeAsync.apply(this, arguments);\n}\n\nfunction _reverseGeocodeAsync() {\n  _reverseGeocodeAsync = _asyncToGenerator(function* (location) {\n    if (typeof location.latitude !== 'number' || typeof location.longitude !== 'number') {\n      throw new TypeError('Location should be an object with number properties `latitude` and `longitude`.');\n    }\n\n    return ExpoLocation.reverseGeocodeAsync(location).catch(error => {\n      var platformUsesGoogleMaps = Platform.OS === 'android' || Platform.OS === 'web';\n\n      if (platformUsesGoogleMaps && error.code === 'E_NO_GEOCODER') {\n        if (!googleApiKey) {\n          throw new Error(error.message + ' Please set a Google API Key to use geocoding.');\n        }\n\n        return _googleReverseGeocodeAsync(location);\n      }\n\n      throw error;\n    });\n  });\n  return _reverseGeocodeAsync.apply(this, arguments);\n}\n\nexport function setApiKey(apiKey) {\n  googleApiKey = apiKey;\n}\n\nfunction _googleGeocodeAsync(_x4) {\n  return _googleGeocodeAsync2.apply(this, arguments);\n}\n\nfunction _googleGeocodeAsync2() {\n  _googleGeocodeAsync2 = _asyncToGenerator(function* (address) {\n    var result = yield fetch(\"\".concat(googleApiUrl, \"?key=\").concat(googleApiKey, \"&address=\").concat(encodeURI(address)));\n    var resultObject = yield result.json();\n    var {\n      status\n    } = resultObject;\n\n    if (status === 'ZERO_RESULTS') {\n      return [];\n    } else if (status !== 'OK') {\n      throw new Error(\"An error occurred during geocoding. \".concat(status));\n    }\n\n    return resultObject.results.map(result => {\n      var location = result.geometry.location;\n      return {\n        latitude: location.lat,\n        longitude: location.lng\n      };\n    });\n  });\n  return _googleGeocodeAsync2.apply(this, arguments);\n}\n\nfunction _googleReverseGeocodeAsync(_x5) {\n  return _googleReverseGeocodeAsync2.apply(this, arguments);\n}\n\nfunction _googleReverseGeocodeAsync2() {\n  _googleReverseGeocodeAsync2 = _asyncToGenerator(function* (options) {\n    var result = yield fetch(\"\".concat(googleApiUrl, \"?key=\").concat(googleApiKey, \"&latlng=\").concat(options.latitude, \",\").concat(options.longitude));\n    var resultObject = yield result.json();\n\n    if (resultObject.status !== 'OK') {\n      throw new Error('An error occurred during geocoding.');\n    }\n\n    return resultObject.results.map(result => {\n      var address = {};\n      result.address_components.forEach(component => {\n        if (component.types.includes('locality')) {\n          address.city = component.long_name;\n        } else if (component.types.includes('street_address')) {\n          address.street = component.long_name;\n        } else if (component.types.includes('administrative_area_level_1')) {\n          address.region = component.long_name;\n        } else if (component.types.includes('country')) {\n          address.country = component.long_name;\n        } else if (component.types.includes('postal_code')) {\n          address.postalCode = component.long_name;\n        } else if (component.types.includes('point_of_interest')) {\n          address.name = component.long_name;\n        }\n      });\n      return address;\n    });\n  });\n  return _googleReverseGeocodeAsync2.apply(this, arguments);\n}\n\nfunction watchPosition(success, error, options) {\n  _maybeInitializeEmitterSubscription();\n\n  var watchId = _getNextWatchId();\n\n  watchCallbacks[watchId] = success;\n  ExpoLocation.watchPositionImplAsync(watchId, options).catch(err => {\n    _removeWatcher(watchId);\n\n    error({\n      watchId,\n      message: err.message,\n      code: err.code\n    });\n  });\n  return watchId;\n}\n\nexport function watchPositionAsync(_x6, _x7) {\n  return _watchPositionAsync.apply(this, arguments);\n}\n\nfunction _watchPositionAsync() {\n  _watchPositionAsync = _asyncToGenerator(function* (options, callback) {\n    _maybeInitializeEmitterSubscription();\n\n    var watchId = _getNextWatchId();\n\n    watchCallbacks[watchId] = callback;\n    yield ExpoLocation.watchPositionImplAsync(watchId, options);\n    return {\n      remove() {\n        _removeWatcher(watchId);\n      }\n\n    };\n  });\n  return _watchPositionAsync.apply(this, arguments);\n}\n\nfunction clearWatch(watchId) {\n  _removeWatcher(watchId);\n}\n\nfunction _removeWatcher(watchId) {\n  if (!watchCallbacks[watchId]) {\n    return;\n  }\n\n  ExpoLocation.removeWatchAsync(watchId);\n  delete watchCallbacks[watchId];\n\n  if (Object.keys(watchCallbacks).length === 0 && deviceEventSubscription) {\n    LocationEventEmitter.removeSubscription(deviceEventSubscription);\n    deviceEventSubscription = null;\n  }\n}\n\nfunction getCurrentPosition(success) {\n  var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  invariant(typeof success === 'function', 'Must provide a valid success callback.');\n  invariant(typeof options === 'object', 'options must be an object.');\n\n  _getCurrentPositionAsyncWrapper(success, error, options);\n}\n\nfunction _getCurrentPositionAsyncWrapper(_x8, _x9, _x10) {\n  return _getCurrentPositionAsyncWrapper2.apply(this, arguments);\n}\n\nfunction _getCurrentPositionAsyncWrapper2() {\n  _getCurrentPositionAsyncWrapper2 = _asyncToGenerator(function* (success, error, options) {\n    try {\n      yield ExpoLocation.requestPermissionsAsync();\n      var result = yield getCurrentPositionAsync(options);\n      success(result);\n    } catch (e) {\n      error(e);\n    }\n  });\n  return _getCurrentPositionAsyncWrapper2.apply(this, arguments);\n}\n\nexport function requestPermissionsAsync() {\n  return _requestPermissionsAsync.apply(this, arguments);\n}\n\nfunction _requestPermissionsAsync() {\n  _requestPermissionsAsync = _asyncToGenerator(function* () {\n    yield ExpoLocation.requestPermissionsAsync();\n  });\n  return _requestPermissionsAsync.apply(this, arguments);\n}\n\nexport function hasServicesEnabledAsync() {\n  return _hasServicesEnabledAsync.apply(this, arguments);\n}\n\nfunction _hasServicesEnabledAsync() {\n  _hasServicesEnabledAsync = _asyncToGenerator(function* () {\n    return yield ExpoLocation.hasServicesEnabledAsync();\n  });\n  return _hasServicesEnabledAsync.apply(this, arguments);\n}\n\nfunction _validateTaskName(taskName) {\n  invariant(taskName && typeof taskName === 'string', '`taskName` must be a non-empty string.');\n}\n\nexport function isBackgroundLocationAvailableAsync() {\n  return _isBackgroundLocationAvailableAsync.apply(this, arguments);\n}\n\nfunction _isBackgroundLocationAvailableAsync() {\n  _isBackgroundLocationAvailableAsync = _asyncToGenerator(function* () {\n    var providerStatus = yield getProviderStatusAsync();\n    return providerStatus.backgroundModeEnabled;\n  });\n  return _isBackgroundLocationAvailableAsync.apply(this, arguments);\n}\n\nexport function startLocationUpdatesAsync(_x11) {\n  return _startLocationUpdatesAsync.apply(this, arguments);\n}\n\nfunction _startLocationUpdatesAsync() {\n  _startLocationUpdatesAsync = _asyncToGenerator(function* (taskName) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      accuracy: LocationAccuracy.Balanced\n    };\n\n    _validateTaskName(taskName);\n\n    yield ExpoLocation.startLocationUpdatesAsync(taskName, options);\n  });\n  return _startLocationUpdatesAsync.apply(this, arguments);\n}\n\nexport function stopLocationUpdatesAsync(_x12) {\n  return _stopLocationUpdatesAsync.apply(this, arguments);\n}\n\nfunction _stopLocationUpdatesAsync() {\n  _stopLocationUpdatesAsync = _asyncToGenerator(function* (taskName) {\n    _validateTaskName(taskName);\n\n    yield ExpoLocation.stopLocationUpdatesAsync(taskName);\n  });\n  return _stopLocationUpdatesAsync.apply(this, arguments);\n}\n\nexport function hasStartedLocationUpdatesAsync(_x13) {\n  return _hasStartedLocationUpdatesAsync.apply(this, arguments);\n}\n\nfunction _hasStartedLocationUpdatesAsync() {\n  _hasStartedLocationUpdatesAsync = _asyncToGenerator(function* (taskName) {\n    _validateTaskName(taskName);\n\n    return ExpoLocation.hasStartedLocationUpdatesAsync(taskName);\n  });\n  return _hasStartedLocationUpdatesAsync.apply(this, arguments);\n}\n\nfunction _validateRegions(regions) {\n  if (!regions || regions.length === 0) {\n    throw new Error('Regions array cannot be empty. Use `stopGeofencingAsync` if you want to stop geofencing all regions');\n  }\n\n  for (var region of regions) {\n    if (typeof region.latitude !== 'number') {\n      throw new TypeError(\"Region's latitude must be a number. Got '\".concat(region.latitude, \"' instead.\"));\n    }\n\n    if (typeof region.longitude !== 'number') {\n      throw new TypeError(\"Region's longitude must be a number. Got '\".concat(region.longitude, \"' instead.\"));\n    }\n\n    if (typeof region.radius !== 'number') {\n      throw new TypeError(\"Region's radius must be a number. Got '\".concat(region.radius, \"' instead.\"));\n    }\n  }\n}\n\nexport function startGeofencingAsync(_x14) {\n  return _startGeofencingAsync.apply(this, arguments);\n}\n\nfunction _startGeofencingAsync() {\n  _startGeofencingAsync = _asyncToGenerator(function* (taskName) {\n    var regions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _validateTaskName(taskName);\n\n    _validateRegions(regions);\n\n    yield ExpoLocation.startGeofencingAsync(taskName, {\n      regions\n    });\n  });\n  return _startGeofencingAsync.apply(this, arguments);\n}\n\nexport function stopGeofencingAsync(_x15) {\n  return _stopGeofencingAsync.apply(this, arguments);\n}\n\nfunction _stopGeofencingAsync() {\n  _stopGeofencingAsync = _asyncToGenerator(function* (taskName) {\n    _validateTaskName(taskName);\n\n    yield ExpoLocation.stopGeofencingAsync(taskName);\n  });\n  return _stopGeofencingAsync.apply(this, arguments);\n}\n\nexport function hasStartedGeofencingAsync(_x16) {\n  return _hasStartedGeofencingAsync.apply(this, arguments);\n}\n\nfunction _hasStartedGeofencingAsync() {\n  _hasStartedGeofencingAsync = _asyncToGenerator(function* (taskName) {\n    _validateTaskName(taskName);\n\n    return ExpoLocation.hasStartedGeofencingAsync(taskName);\n  });\n  return _hasStartedGeofencingAsync.apply(this, arguments);\n}\n\nexport function installWebGeolocationPolyfill() {\n  if (Platform.OS !== 'web') {\n    window.navigator.geolocation = {\n      getCurrentPosition,\n      watchPosition,\n      clearWatch,\n      stopObserving: () => {}\n    };\n  }\n}\nexport { LocationEventEmitter as EventEmitter, _getCurrentWatchId };","map":{"version":3,"sources":["../src/Location.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Platform } from '@unimodules/core';\nimport invariant from 'invariant';\n\nimport ExpoLocation from './ExpoLocation';\n\nconst LocationEventEmitter = new EventEmitter(ExpoLocation);\n\nexport interface ProviderStatus {\n  locationServicesEnabled: boolean;\n  backgroundModeEnabled: boolean;\n  gpsAvailable?: boolean;\n  networkAvailable?: boolean;\n  passiveAvailable?: boolean;\n}\n\nexport interface LocationOptions {\n  accuracy?: LocationAccuracy;\n  enableHighAccuracy?: boolean;\n  timeInterval?: number;\n  distanceInterval?: number;\n  timeout?: number;\n  mayShowUserSettingsDialog?: boolean;\n}\n\nexport interface LocationData {\n  coords: {\n    latitude: number;\n    longitude: number;\n    altitude: number;\n    accuracy: number;\n    heading: number;\n    speed: number;\n  };\n  timestamp: number;\n}\n\nexport interface HeadingData {\n  trueHeading: number;\n  magHeading: number;\n  accuracy: number;\n}\n\nexport interface GeocodedLocation {\n  latitude: number;\n  longitude: number;\n  altitude?: number;\n  accuracy?: number;\n}\n\nexport interface Address {\n  city: string;\n  street: string;\n  region: string;\n  country: string;\n  postalCode: string;\n  name: string;\n}\n\ninterface LocationTaskOptions {\n  accuracy?: LocationAccuracy;\n  timeInterval?: number; // Android only\n  distanceInterval?: number;\n  showsBackgroundLocationIndicator?: boolean; // iOS only\n  deferredUpdatesDistance?: number;\n  deferredUpdatesTimeout?: number;\n  deferredUpdatesInterval?: number;\n\n  // iOS only\n  activityType?: LocationActivityType;\n  pausesUpdatesAutomatically?: boolean;\n\n  foregroundService?: {\n    notificationTitle: string;\n    notificationBody: string;\n    notificationColor?: string;\n  };\n};\n\ninterface Region {\n  identifier?: string;\n  latitude: number;\n  longitude: number;\n  radius: number;\n  notifyOnEnter?: boolean;\n  notifyOnExit?: boolean;\n}\n\ntype Subscription = {\n  remove: () => void;\n};\ntype LocationCallback = (data: LocationData) => any;\ntype HeadingCallback = (data: HeadingData) => any;\n\nenum LocationAccuracy {\n  Lowest = 1,\n  Low = 2,\n  Balanced = 3,\n  High = 4,\n  Highest = 5,\n  BestForNavigation = 6,\n}\n\nenum LocationActivityType {\n  Other = 1,\n  AutomotiveNavigation = 2,\n  Fitness = 3,\n  OtherNavigation = 4,\n  Airborne = 5,\n}\n\nexport {\n  LocationAccuracy as Accuracy,\n  LocationActivityType as ActivityType,\n};\n\nexport enum GeofencingEventType {\n  Enter = 1,\n  Exit = 2,\n}\n\nexport enum GeofencingRegionState {\n  Unknown = 0,\n  Inside = 1,\n  Outside = 2,\n}\n\nlet nextWatchId = 0;\nlet headingId;\nfunction _getNextWatchId() {\n  nextWatchId++;\n  return nextWatchId;\n}\nfunction _getCurrentWatchId() {\n  return nextWatchId;\n}\n\nlet watchCallbacks: {\n  [watchId: number]: LocationCallback | HeadingCallback;\n} = {};\n\nlet deviceEventSubscription: Subscription | null;\nlet headingEventSub: Subscription | null;\nlet googleApiKey;\nconst googleApiUrl = 'https://maps.googleapis.com/maps/api/geocode/json';\n\nexport async function getProviderStatusAsync(): Promise<ProviderStatus> {\n  return ExpoLocation.getProviderStatusAsync();\n}\n\nexport async function enableNetworkProviderAsync(): Promise<void> {\n  // If network provider is disabled (user's location mode is set to \"Device only\"),\n  // Android's location provider may not give you any results. Use this method in order to ask the user\n  // to change the location mode to \"High accuracy\" which uses Google Play services and enables network provider.\n  // `getCurrentPositionAsync` and `watchPositionAsync` are doing it automatically anyway.\n\n  if (Platform.OS === 'android') {\n    return ExpoLocation.enableNetworkProviderAsync();\n  }\n}\n\nexport async function getCurrentPositionAsync(\n  options: LocationOptions = {}\n): Promise<LocationData> {\n  return ExpoLocation.getCurrentPositionAsync(options);\n}\n\n// Start Compass Module\n\n// To simplify, we will call watchHeadingAsync and wait for one update To ensure accuracy, we wait\n// for a couple of watch updates if the data has low accuracy\nexport async function getHeadingAsync(): Promise<HeadingData> {\n  return new Promise<HeadingData>(async (resolve, reject) => {\n    try {\n      // If there is already a compass active (would be a watch)\n      if (headingEventSub) {\n        let tries = 0;\n        const headingSub = LocationEventEmitter.addListener(\n          'Expo.headingChanged',\n          ({ heading }: { heading: HeadingData }) => {\n            if (heading.accuracy > 1 || tries > 5) {\n              resolve(heading);\n              LocationEventEmitter.removeSubscription(headingSub);\n            } else {\n              tries += 1;\n            }\n          }\n        );\n      } else {\n        let done = false;\n        let subscription;\n        let tries = 0;\n        subscription = await watchHeadingAsync((heading: HeadingData) => {\n          if (!done) {\n            if (heading.accuracy > 1 || tries > 5) {\n              subscription.remove();\n              resolve(heading);\n              done = true;\n            } else {\n              tries += 1;\n            }\n          } else {\n            subscription.remove();\n          }\n        });\n\n        if (done) {\n          subscription.remove();\n        }\n      }\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\nexport async function watchHeadingAsync(\n  callback: HeadingCallback\n): Promise<{ remove: () => void }> {\n  // Check if there is already a compass event watch.\n  if (headingEventSub) {\n    _removeHeadingWatcher(headingId);\n  }\n\n  headingEventSub = LocationEventEmitter.addListener(\n    'Expo.headingChanged',\n    ({ watchId, heading }: { watchId: string; heading: HeadingData }) => {\n      const callback = watchCallbacks[watchId];\n      if (callback) {\n        callback(heading);\n      } else {\n        ExpoLocation.removeWatchAsync(watchId);\n      }\n    }\n  );\n\n  headingId = _getNextWatchId();\n  watchCallbacks[headingId] = callback;\n  await ExpoLocation.watchDeviceHeading(headingId);\n  return {\n    remove() {\n      _removeHeadingWatcher(headingId);\n    },\n  };\n}\n\n// Removes the compass listener and sub from JS and Native\nfunction _removeHeadingWatcher(watchId) {\n  if (!watchCallbacks[watchId]) {\n    return;\n  }\n  delete watchCallbacks[watchId];\n  ExpoLocation.removeWatchAsync(watchId);\n  if (headingEventSub) {\n    LocationEventEmitter.removeSubscription(headingEventSub);\n    headingEventSub = null;\n  }\n}\n// End Compass Module\n\nfunction _maybeInitializeEmitterSubscription() {\n  if (!deviceEventSubscription) {\n    deviceEventSubscription = LocationEventEmitter.addListener(\n      'Expo.locationChanged',\n      ({ watchId, location }: { watchId: string; location: LocationData }) => {\n        const callback = watchCallbacks[watchId];\n        if (callback) {\n          callback(location);\n        } else {\n          ExpoLocation.removeWatchAsync(watchId);\n        }\n      }\n    );\n  }\n}\n\nexport async function geocodeAsync(address: string): Promise<Array<GeocodedLocation>> {\n  return ExpoLocation.geocodeAsync(address).catch(error => {\n    const platformUsesGoogleMaps = Platform.OS === 'android' || Platform.OS === 'web';\n\n    if (platformUsesGoogleMaps && error.code === 'E_NO_GEOCODER') {\n      if (!googleApiKey) {\n        throw new Error(error.message + ' Please set a Google API Key to use geocoding.');\n      }\n      return _googleGeocodeAsync(address);\n    }\n    throw error;\n  });\n}\n\nexport async function reverseGeocodeAsync(location: {\n  latitude: number;\n  longitude: number;\n}): Promise<Address[]> {\n  if (typeof location.latitude !== 'number' || typeof location.longitude !== 'number') {\n    throw new TypeError(\n      'Location should be an object with number properties `latitude` and `longitude`.'\n    );\n  }\n  return ExpoLocation.reverseGeocodeAsync(location).catch(error => {\n    const platformUsesGoogleMaps = Platform.OS === 'android' || Platform.OS === 'web';\n\n    if (platformUsesGoogleMaps && error.code === 'E_NO_GEOCODER') {\n      if (!googleApiKey) {\n        throw new Error(error.message + ' Please set a Google API Key to use geocoding.');\n      }\n      return _googleReverseGeocodeAsync(location);\n    }\n    throw error;\n  });\n}\n\nexport function setApiKey(apiKey: string) {\n  googleApiKey = apiKey;\n}\n\nasync function _googleGeocodeAsync(address: string): Promise<GeocodedLocation[]> {\n  const result = await fetch(`${googleApiUrl}?key=${googleApiKey}&address=${encodeURI(address)}`);\n  const resultObject = await result.json();\n\n  const { status } = resultObject;\n  if (status === 'ZERO_RESULTS') {\n    return [];\n  } else if (status !== 'OK') {\n    throw new Error(`An error occurred during geocoding. ${status}`);\n  }\n\n  return resultObject.results.map(result => {\n    let location = result.geometry.location;\n    // TODO: This is missing a lot of props\n    return {\n      latitude: location.lat,\n      longitude: location.lng,\n    };\n  });\n}\n\nasync function _googleReverseGeocodeAsync(options: {\n  latitude: number;\n  longitude: number;\n}): Promise<Address[]> {\n  const result = await fetch(\n    `${googleApiUrl}?key=${googleApiKey}&latlng=${options.latitude},${options.longitude}`\n  );\n  const resultObject = await result.json();\n\n  if (resultObject.status !== 'OK') {\n    throw new Error('An error occurred during geocoding.');\n  }\n\n  return resultObject.results.map(result => {\n    const address: any = {};\n\n    result.address_components.forEach(component => {\n      if (component.types.includes('locality')) {\n        address.city = component.long_name;\n      } else if (component.types.includes('street_address')) {\n        address.street = component.long_name;\n      } else if (component.types.includes('administrative_area_level_1')) {\n        address.region = component.long_name;\n      } else if (component.types.includes('country')) {\n        address.country = component.long_name;\n      } else if (component.types.includes('postal_code')) {\n        address.postalCode = component.long_name;\n      } else if (component.types.includes('point_of_interest')) {\n        address.name = component.long_name;\n      }\n    });\n    return address as Address;\n  });\n}\n\n// Polyfill: navigator.geolocation.watchPosition\nfunction watchPosition(\n  success: GeoSuccessCallback,\n  error: GeoErrorCallback,\n  options: LocationOptions\n) {\n  _maybeInitializeEmitterSubscription();\n\n  const watchId = _getNextWatchId();\n  watchCallbacks[watchId] = success;\n\n  ExpoLocation.watchPositionImplAsync(watchId, options).catch(err => {\n    _removeWatcher(watchId);\n    error({ watchId, message: err.message, code: err.code });\n  });\n\n  return watchId;\n}\n\nexport async function watchPositionAsync(options: LocationOptions, callback: LocationCallback) {\n  _maybeInitializeEmitterSubscription();\n\n  const watchId = _getNextWatchId();\n  watchCallbacks[watchId] = callback;\n  await ExpoLocation.watchPositionImplAsync(watchId, options);\n\n  return {\n    remove() {\n      _removeWatcher(watchId);\n    },\n  };\n}\n\n// Polyfill: navigator.geolocation.clearWatch\nfunction clearWatch(watchId: number) {\n  _removeWatcher(watchId);\n}\n\nfunction _removeWatcher(watchId) {\n  // Do nothing if we have already removed the subscription\n  if (!watchCallbacks[watchId]) {\n    return;\n  }\n\n  ExpoLocation.removeWatchAsync(watchId);\n  delete watchCallbacks[watchId];\n  if (Object.keys(watchCallbacks).length === 0 && deviceEventSubscription) {\n    LocationEventEmitter.removeSubscription(deviceEventSubscription);\n    deviceEventSubscription = null;\n  }\n}\n\ntype GeoSuccessCallback = (data: LocationData) => void;\ntype GeoErrorCallback = (error: any) => void;\n\nfunction getCurrentPosition(\n  success: GeoSuccessCallback,\n  error: GeoErrorCallback = () => {},\n  options: LocationOptions = {}\n): void {\n  invariant(typeof success === 'function', 'Must provide a valid success callback.');\n\n  invariant(typeof options === 'object', 'options must be an object.');\n\n  _getCurrentPositionAsyncWrapper(success, error, options);\n}\n\n// This function exists to let us continue to return undefined from getCurrentPosition, while still\n// using async/await for the internal implementation of it\nasync function _getCurrentPositionAsyncWrapper(\n  success: GeoSuccessCallback,\n  error: GeoErrorCallback,\n  options: LocationOptions\n): Promise<any> {\n  try {\n    await ExpoLocation.requestPermissionsAsync();\n    const result = await getCurrentPositionAsync(options);\n    success(result);\n  } catch (e) {\n    error(e);\n  }\n}\n\nexport async function requestPermissionsAsync(): Promise<void> {\n  await ExpoLocation.requestPermissionsAsync();\n}\n\n// --- Location service\n\nexport async function hasServicesEnabledAsync(): Promise<boolean> {\n  return await ExpoLocation.hasServicesEnabledAsync();\n}\n\n// --- Background location updates\n\nfunction _validateTaskName(taskName: string) {\n  invariant(taskName && typeof taskName === 'string', '`taskName` must be a non-empty string.');\n}\n\nexport async function isBackgroundLocationAvailableAsync(): Promise<boolean> {\n  const providerStatus = await getProviderStatusAsync();\n  return providerStatus.backgroundModeEnabled;\n}\n\nexport async function startLocationUpdatesAsync(\n  taskName: string,\n  options: LocationTaskOptions = { accuracy: LocationAccuracy.Balanced }\n): Promise<void> {\n  _validateTaskName(taskName);\n  await ExpoLocation.startLocationUpdatesAsync(taskName, options);\n}\n\nexport async function stopLocationUpdatesAsync(taskName: string): Promise<void> {\n  _validateTaskName(taskName);\n  await ExpoLocation.stopLocationUpdatesAsync(taskName);\n}\n\nexport async function hasStartedLocationUpdatesAsync(taskName: string): Promise<boolean> {\n  _validateTaskName(taskName);\n  return ExpoLocation.hasStartedLocationUpdatesAsync(taskName);\n}\n\n// --- Geofencing\n\nfunction _validateRegions(regions: Array<Region>) {\n  if (!regions || regions.length === 0) {\n    throw new Error(\n      'Regions array cannot be empty. Use `stopGeofencingAsync` if you want to stop geofencing all regions'\n    );\n  }\n  for (const region of regions) {\n    if (typeof region.latitude !== 'number') {\n      throw new TypeError(`Region's latitude must be a number. Got '${region.latitude}' instead.`);\n    }\n    if (typeof region.longitude !== 'number') {\n      throw new TypeError(\n        `Region's longitude must be a number. Got '${region.longitude}' instead.`\n      );\n    }\n    if (typeof region.radius !== 'number') {\n      throw new TypeError(`Region's radius must be a number. Got '${region.radius}' instead.`);\n    }\n  }\n}\n\nexport async function startGeofencingAsync(\n  taskName: string,\n  regions: Array<Region> = []\n): Promise<void> {\n  _validateTaskName(taskName);\n  _validateRegions(regions);\n  await ExpoLocation.startGeofencingAsync(taskName, { regions });\n}\n\nexport async function stopGeofencingAsync(taskName: string): Promise<void> {\n  _validateTaskName(taskName);\n  await ExpoLocation.stopGeofencingAsync(taskName);\n}\n\nexport async function hasStartedGeofencingAsync(taskName: string): Promise<boolean> {\n  _validateTaskName(taskName);\n  return ExpoLocation.hasStartedGeofencingAsync(taskName);\n}\n\nexport function installWebGeolocationPolyfill(): void {\n  if (Platform.OS !== 'web') {\n    // Polyfill navigator.geolocation for interop with the core react-native and web API approach to\n    // geolocation\n    // @ts-ignore\n    window.navigator.geolocation = {\n      getCurrentPosition,\n      watchPosition,\n      clearWatch,\n\n      // We don't polyfill stopObserving, this is an internal method that probably should not even exist\n      // in react-native docs\n      stopObserving: () => {},\n    };\n  }\n}\n\nexport {\n  // For internal purposes\n  LocationEventEmitter as EventEmitter,\n  _getCurrentWatchId,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}