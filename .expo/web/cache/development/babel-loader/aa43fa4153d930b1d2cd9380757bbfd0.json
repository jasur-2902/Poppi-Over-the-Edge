{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport ExponentAV from \"./ExponentAV\";\nexport default {\n  get name() {\n    return 'ExpoVideoManager';\n  },\n\n  get ScaleNone() {\n    return 'none';\n  },\n\n  get ScaleToFill() {\n    return 'fill';\n  },\n\n  get ScaleAspectFit() {\n    return 'contain';\n  },\n\n  get ScaleAspectFill() {\n    return 'cover';\n  },\n\n  setFullscreen(element, isFullScreenEnabled) {\n    return _asyncToGenerator(function* () {\n      if (isFullScreenEnabled) {\n        yield element.requestFullscreen();\n      } else {\n        yield document.exitFullscreen();\n      }\n\n      return ExponentAV.getStatusForVideo(element);\n    })();\n  }\n\n};","map":{"version":3,"sources":["../src/ExpoVideoManager.web.ts"],"names":[],"mappings":";;;;AAAA,OAAO,UAAP;AAGA,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,kBAAP;AACD,GAHY;;AAIb,MAAI,SAAJ,GAAa;AACX,WAAO,MAAP;AACD,GANY;;AAOb,MAAI,WAAJ,GAAe;AACb,WAAO,MAAP;AACD,GATY;;AAUb,MAAI,cAAJ,GAAkB;AAChB,WAAO,SAAP;AACD,GAZY;;AAab,MAAI,eAAJ,GAAmB;AACjB,WAAO,OAAP;AACD,GAfY;;AAiBP,EAAA,aAAN,CACE,OADF,EAEE,mBAFF,EAE8B;AAAA;AAE5B,UAAI,mBAAJ,EAAyB;AACvB,cAAM,OAAO,CAAC,iBAAR,EAAN;AACD,OAFD,MAEO;AACL,cAAM,QAAQ,CAAC,cAAT,EAAN;AACD;;AACD,aAAO,UAAU,CAAC,iBAAX,CAA6B,OAA7B,CAAP;AAP4B;AAQ7B;;AA3BY,CAAf","sourcesContent":["import ExponentAV from './ExponentAV';\nimport { PlaybackStatus } from './AV';\n\nexport default {\n  get name(): string {\n    return 'ExpoVideoManager';\n  },\n  get ScaleNone(): string {\n    return 'none';\n  },\n  get ScaleToFill(): string {\n    return 'fill';\n  },\n  get ScaleAspectFit(): string {\n    return 'contain';\n  },\n  get ScaleAspectFill(): string {\n    return 'cover';\n  },\n\n  async setFullscreen(\n    element: HTMLMediaElement,\n    isFullScreenEnabled: boolean\n  ): Promise<PlaybackStatus> {\n    if (isFullScreenEnabled) {\n      await element.requestFullscreen();\n    } else {\n      await document.exitFullscreen();\n    }\n    return ExponentAV.getStatusForVideo(element);\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}