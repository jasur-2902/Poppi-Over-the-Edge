{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport * as rtlDetect from 'rtl-detect';\nimport moment from 'moment';\nimport 'moment-timezone';\nexport default {\n  get isRTL() {\n    return rtlDetect.isRtlLang(this.locale);\n  },\n\n  get locale() {\n    var {\n      navigator = {}\n    } = global;\n    var locale = navigator.language || navigator.systemLanguage || navigator.browserLanguage || navigator.userLanguage || this.locales[0];\n    return locale.replace('_', '-');\n  },\n\n  get locales() {\n    var {\n      navigator = {}\n    } = global;\n    return navigator.languages || [];\n  },\n\n  get timezone() {\n    return moment.tz.guess();\n  },\n\n  get isoCurrencyCodes() {\n    return [];\n  },\n\n  get country() {\n    var {\n      locale\n    } = this;\n\n    if (typeof locale === 'string' && locale.length) {\n      var isoCountryCode = locale.substring(locale.lastIndexOf('-') + 1);\n      return isoCountryCode.toUpperCase();\n    }\n\n    return null;\n  },\n\n  getLocalizationAsync() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var {\n        country,\n        isoCurrencyCodes,\n        timezone,\n        locales,\n        locale,\n        isRTL\n      } = _this;\n      return {\n        country,\n        isoCurrencyCodes,\n        timezone,\n        locales,\n        locale,\n        isRTL\n      };\n    })();\n  }\n\n};","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/expo-localization/src/ExpoLocalization.web.js"],"names":["rtlDetect","moment","isRTL","isRtlLang","locale","navigator","global","language","systemLanguage","browserLanguage","userLanguage","locales","replace","languages","timezone","tz","guess","isoCurrencyCodes","country","length","isoCountryCode","substring","lastIndexOf","toUpperCase","getLocalizationAsync"],"mappings":";;;;AACA,OAAO,KAAKA,SAAZ,MAA2B,YAA3B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,iBAAP;AAOA,eAAe;AACb,MAAIC,KAAJ,GAAqB;AACnB,WAAOF,SAAS,CAACG,SAAV,CAAoB,KAAKC,MAAzB,CAAP;AACD,GAHY;;AAIb,MAAIA,MAAJ,GAAqB;AACnB,QAAM;AAAEC,MAAAA,SAAS,GAAG;AAAd,QAAqBC,MAA3B;AACA,QAAIF,MAAM,GACRC,SAAS,CAACE,QAAV,IACAF,SAAS,CAACG,cADV,IAEAH,SAAS,CAACI,eAFV,IAGAJ,SAAS,CAACK,YAHV,IAIA,KAAKC,OAAL,CAAa,CAAb,CALF;AAQA,WAAOP,MAAM,CAACQ,OAAP,CAAe,GAAf,EAAoB,GAApB,CAAP;AACD,GAfY;;AAgBb,MAAID,OAAJ,GAA6B;AAC3B,QAAM;AAAEN,MAAAA,SAAS,GAAG;AAAd,QAAqBC,MAA3B;AACA,WAAOD,SAAS,CAACQ,SAAV,IAAuB,EAA9B;AACD,GAnBY;;AAoBb,MAAIC,QAAJ,GAAuB;AACrB,WAAOb,MAAM,CAACc,EAAP,CAAUC,KAAV,EAAP;AACD,GAtBY;;AAuBb,MAAIC,gBAAJ,GAAsC;AAEpC,WAAO,EAAP;AACD,GA1BY;;AA2Bb,MAAIC,OAAJ,GAA6B;AAC3B,QAAM;AAAEd,MAAAA;AAAF,QAAa,IAAnB;;AACA,QAAI,OAAOA,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACe,MAAzC,EAAiD;AAC/C,UAAMC,cAAc,GAAGhB,MAAM,CAACiB,SAAP,CAAiBjB,MAAM,CAACkB,WAAP,CAAmB,GAAnB,IAA0B,CAA3C,CAAvB;AACA,aAAOF,cAAc,CAACG,WAAf,EAAP;AACD;;AACD,WAAO,IAAP;AACD,GAlCY;;AAmCPC,EAAAA,oBAAN,GAAyD;AAAA;;AAAA;AACvD,UAAM;AAAEN,QAAAA,OAAF;AAAWD,QAAAA,gBAAX;AAA6BH,QAAAA,QAA7B;AAAuCH,QAAAA,OAAvC;AAAgDP,QAAAA,MAAhD;AAAwDF,QAAAA;AAAxD,UAAkE,KAAxE;AACA,aAAO;AACLgB,QAAAA,OADK;AAELD,QAAAA,gBAFK;AAGLH,QAAAA,QAHK;AAILH,QAAAA,OAJK;AAKLP,QAAAA,MALK;AAMLF,QAAAA;AANK,OAAP;AAFuD;AAUxD;;AA7CY,CAAf","sourcesContent":["// @flow\nimport * as rtlDetect from 'rtl-detect';\nimport moment from 'moment';\nimport 'moment-timezone';\n\n/*\n * TODO: Bacon: We only use moment for guessing the current timezone.\n * We should find a more cost-effective approach.\n */\n\nexport default {\n  get isRTL(): boolean {\n    return rtlDetect.isRtlLang(this.locale);\n  },\n  get locale(): string {\n    const { navigator = {} } = global;\n    let locale =\n      navigator.language ||\n      navigator.systemLanguage ||\n      navigator.browserLanguage ||\n      navigator.userLanguage ||\n      this.locales[0];\n\n    // The native format is en-US\n    return locale.replace('_', '-');\n  },\n  get locales(): Array<string> {\n    const { navigator = {} } = global;\n    return navigator.languages || [];\n  },\n  get timezone(): string {\n    return moment.tz.guess();\n  },\n  get isoCurrencyCodes(): Array<string> {\n    // TODO: Bacon: Add this - very low priority\n    return [];\n  },\n  get country(): string | null {\n    const { locale } = this;\n    if (typeof locale === 'string' && locale.length) {\n      const isoCountryCode = locale.substring(locale.lastIndexOf('-') + 1);\n      return isoCountryCode.toUpperCase();\n    }\n    return null;\n  },\n  async getLocalizationAsync(): Promise<{ [string]: any }> {\n    const { country, isoCurrencyCodes, timezone, locales, locale, isRTL } = this;\n    return {\n      country,\n      isoCurrencyCodes,\n      timezone,\n      locales,\n      locale,\n      isRTL,\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}