{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport function getBrightnessAsync() {\n  return _getBrightnessAsync.apply(this, arguments);\n}\n\nfunction _getBrightnessAsync() {\n  _getBrightnessAsync = _asyncToGenerator(function* () {\n    return yield NativeModules.ExponentBrightness.getBrightnessAsync();\n  });\n  return _getBrightnessAsync.apply(this, arguments);\n}\n\nexport function setBrightnessAsync(_x) {\n  return _setBrightnessAsync.apply(this, arguments);\n}\n\nfunction _setBrightnessAsync() {\n  _setBrightnessAsync = _asyncToGenerator(function* (brightnessValue) {\n    brightnessValue = Math.max(0, Math.min(brightnessValue, 1));\n    return yield NativeModules.ExponentBrightness.setBrightnessAsync(brightnessValue);\n  });\n  return _setBrightnessAsync.apply(this, arguments);\n}\n\nexport function getSystemBrightnessAsync() {\n  return _getSystemBrightnessAsync.apply(this, arguments);\n}\n\nfunction _getSystemBrightnessAsync() {\n  _getSystemBrightnessAsync = _asyncToGenerator(function* () {\n    if (Platform.OS !== 'android') {\n      return yield getBrightnessAsync();\n    }\n\n    return yield NativeModules.ExponentBrightness.getSystemBrightnessAsync();\n  });\n  return _getSystemBrightnessAsync.apply(this, arguments);\n}\n\nexport function setSystemBrightnessAsync(_x2) {\n  return _setSystemBrightnessAsync.apply(this, arguments);\n}\n\nfunction _setSystemBrightnessAsync() {\n  _setSystemBrightnessAsync = _asyncToGenerator(function* (brightnessValue) {\n    brightnessValue = Math.max(0, Math.min(brightnessValue, 1));\n\n    if (Platform.OS !== 'android') {\n      return yield setBrightnessAsync(brightnessValue);\n    } else {\n      return yield NativeModules.ExponentBrightness.setSystemBrightnessAsync(brightnessValue);\n    }\n  });\n  return _setSystemBrightnessAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/Brightness.ts"],"names":[],"mappings":";;;;;;AAEA,gBAAsB,kBAAtB;AAAA;AAAA;;;0CAAO,aAAiC;AACtC,iBAAa,aAAa,CAAC,kBAAd,CAAiC,kBAAjC,EAAb;AACD,G;;;;AAED,gBAAsB,kBAAtB;AAAA;AAAA;;;0CAAO,WAAkC,eAAlC,EAAyD;AAC9D,IAAA,eAAe,GAAG,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,IAAI,CAAC,GAAL,CAAS,eAAT,EAA0B,CAA1B,CAAZ,CAAlB;AACA,iBAAa,aAAa,CAAC,kBAAd,CAAiC,kBAAjC,CAAoD,eAApD,CAAb;AACD,G;;;;AAED,gBAAsB,wBAAtB;AAAA;AAAA;;;gDAAO,aAAuC;AAC5C,QAAI,QAAQ,CAAC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,mBAAa,kBAAkB,EAA/B;AACD;;AACD,iBAAa,aAAa,CAAC,kBAAd,CAAiC,wBAAjC,EAAb;AACD,G;;;;AAED,gBAAsB,wBAAtB;AAAA;AAAA;;;gDAAO,WAAwC,eAAxC,EAA+D;AACpE,IAAA,eAAe,GAAG,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,IAAI,CAAC,GAAL,CAAS,eAAT,EAA0B,CAA1B,CAAZ,CAAlB;;AACA,QAAI,QAAQ,CAAC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,mBAAa,kBAAkB,CAAC,eAAD,CAA/B;AACD,KAFD,MAEO;AACL,mBAAa,aAAa,CAAC,kBAAd,CAAiC,wBAAjC,CAA0D,eAA1D,CAAb;AACD;AACF,G","sourcesContent":["import { NativeModules, Platform } from 'react-native';\n\nexport async function getBrightnessAsync(): Promise<number> {\n  return await NativeModules.ExponentBrightness.getBrightnessAsync();\n}\n\nexport async function setBrightnessAsync(brightnessValue: number): Promise<void> {\n  brightnessValue = Math.max(0, Math.min(brightnessValue, 1));\n  return await NativeModules.ExponentBrightness.setBrightnessAsync(brightnessValue);\n}\n\nexport async function getSystemBrightnessAsync(): Promise<number> {\n  if (Platform.OS !== 'android') {\n    return await getBrightnessAsync();\n  }\n  return await NativeModules.ExponentBrightness.getSystemBrightnessAsync();\n}\n\nexport async function setSystemBrightnessAsync(brightnessValue: number): Promise<void> {\n  brightnessValue = Math.max(0, Math.min(brightnessValue, 1));\n  if (Platform.OS !== 'android') {\n    return await setBrightnessAsync(brightnessValue);\n  } else {\n    return await NativeModules.ExponentBrightness.setSystemBrightnessAsync(brightnessValue);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}