{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nexport function assertSensorEventEnabledAsync(_x, _x2) {\n  return _assertSensorEventEnabledAsync.apply(this, arguments);\n}\n\nfunction _assertSensorEventEnabledAsync() {\n  _assertSensorEventEnabledAsync = _asyncToGenerator(function* (eventName, timeout) {\n    var isEnabled = yield isSensorEnabledAsync(eventName, timeout);\n\n    if (isEnabled) {\n      return true;\n    }\n\n    throw new Error(\"Cannot observe event: \".concat(eventName, \".\") + '\\nEnable device orientation in Settings > Safari > Motion & Orientation Access' + '\\nalso ensure that you are hosting with https as DeviceMotion is now a secure API on iOS Safari.');\n  });\n  return _assertSensorEventEnabledAsync.apply(this, arguments);\n}\n\nexport function isSensorEnabledAsync(_x3) {\n  return _isSensorEnabledAsync.apply(this, arguments);\n}\n\nfunction _isSensorEnabledAsync() {\n  _isSensorEnabledAsync = _asyncToGenerator(function* (eventName) {\n    var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 250;\n\n    if (!isIOS()) {\n      return true;\n    }\n\n    return new Promise(resolve => {\n      var id = setTimeout(() => {\n        window.removeEventListener(eventName, listener);\n        resolve(false);\n      }, timeout);\n\n      var listener = () => {\n        clearTimeout(id);\n        window.removeEventListener(eventName, listener);\n        resolve(true);\n      };\n\n      window.addEventListener(eventName, listener);\n    });\n  });\n  return _isSensorEnabledAsync.apply(this, arguments);\n}\n\nfunction isIOS() {\n  var isIOSUA = /(iPad|iPhone|iPod)/g.test(navigator.userAgent);\n  var isIE11 = !!window['MSStream'];\n  return isIOSUA && !isIE11;\n}","map":{"version":3,"sources":["../../src/utils/isSensorEnabledAsync.web.ts"],"names":[],"mappings":";;;;AAIA,gBAAsB,6BAAtB;AAAA;AAAA;;;qDAAO,WACL,SADK,EAEL,OAFK,EAEW;AAEhB,QAAM,SAAS,SAAS,oBAAoB,CAAC,SAAD,EAAY,OAAZ,CAA5C;;AACA,QAAI,SAAJ,EAAe;AACb,aAAO,IAAP;AACD;;AAED,UAAM,IAAI,KAAJ,CACJ,gCAAyB,SAAzB,SACE,gFADF,GAEE,kGAHE,CAAN;AAKD,G;;;;AAGD,gBAAsB,oBAAtB;AAAA;AAAA;;;4CAAO,WACL,SADK,EAegB;AAAA,QAArB,OAAqB,uEAAH,GAAG;;AAErB,QAAI,CAAC,KAAK,EAAV,EAAc;AACZ,aAAO,IAAP;AACD;;AAED,WAAO,IAAI,OAAJ,CAAY,OAAO,IAAG;AAC3B,UAAM,EAAE,GAAG,UAAU,CAAC,MAAK;AACzB,QAAA,MAAM,CAAC,mBAAP,CAA2B,SAA3B,EAAsC,QAAtC;AACA,QAAA,OAAO,CAAC,KAAD,CAAP;AACD,OAHoB,EAGlB,OAHkB,CAArB;;AAKA,UAAM,QAAQ,GAAG,MAAW;AAC1B,QAAA,YAAY,CAAC,EAAD,CAAZ;AACA,QAAA,MAAM,CAAC,mBAAP,CAA2B,SAA3B,EAAsC,QAAtC;AACA,QAAA,OAAO,CAAC,IAAD,CAAP;AACD,OAJD;;AAMA,MAAA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,QAAnC;AACD,KAbM,CAAP;AAcD,G;;;;AAGD,SAAS,KAAT,GAAc;AACZ,MAAM,OAAO,GAAG,sBAAsB,IAAtB,CAA2B,SAAS,CAAC,SAArC,CAAhB;AACA,MAAM,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,UAAD,CAAvB;AACA,SAAO,OAAO,IAAI,CAAC,MAAnB;AACD","sourcesContent":["type SensorEventName = 'deviceorientation' | 'devicemotion';\n\n// iOS 12.2 disables DeviceMotion by default now\n// https://github.com/w3c/deviceorientation/issues/57\nexport async function assertSensorEventEnabledAsync(\n  eventName: SensorEventName,\n  timeout?: number\n): Promise<boolean> {\n  const isEnabled = await isSensorEnabledAsync(eventName, timeout);\n  if (isEnabled) {\n    return true;\n  }\n\n  throw new Error(\n    `Cannot observe event: ${eventName}.` +\n      '\\nEnable device orientation in Settings > Safari > Motion & Orientation Access' +\n      '\\nalso ensure that you are hosting with https as DeviceMotion is now a secure API on iOS Safari.'\n  );\n}\n\n// throw error if the sensor is disabled.\nexport async function isSensorEnabledAsync(\n  eventName: SensorEventName,\n  // Initial interval tests found results on a median of\n  // devicemotion:\n  // - iPhone 7 Plus: 166.6666753590107ms\n  // - iPhone X: 166.6666753590107ms\n  // deviceorientation:\n  // -\n  //\n  // The initial launch of iOS Safari onto a page calling this API seems to take a little longer than a regular call.\n  // devicemotion:\n  // - ~35ms\n  // deviceorientation:\n  // - ~45ms\n  //\n  timeout: number = 250\n): Promise<boolean> {\n  if (!isIOS()) {\n    return true;\n  }\n\n  return new Promise(resolve => {\n    const id = setTimeout(() => {\n      window.removeEventListener(eventName, listener);\n      resolve(false);\n    }, timeout);\n\n    const listener = (): void => {\n      clearTimeout(id);\n      window.removeEventListener(eventName, listener);\n      resolve(true);\n    };\n\n    window.addEventListener(eventName, listener);\n  });\n}\n\n// https://stackoverflow.com/a/9039885/4047926\nfunction isIOS(): boolean {\n  const isIOSUA = /(iPad|iPhone|iPod)/g.test(navigator.userAgent);\n  const isIE11 = !!window['MSStream'];\n  return isIOSUA && !isIE11;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}