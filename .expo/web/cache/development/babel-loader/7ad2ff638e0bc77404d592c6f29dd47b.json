{"ast":null,"code":"import { EventEmitter } from 'expo-core';\nexport default class DeviceSensor {\n  constructor(nativeSensorModule, nativeEventName) {\n    this._nativeModule = nativeSensorModule;\n    this._nativeEmitter = new EventEmitter(nativeSensorModule);\n    this._nativeEventName = nativeEventName;\n    this._listenerCount = 0;\n  }\n\n  addListener(listener) {\n    var subscription = this._nativeEmitter.addListener(this._nativeEventName, listener);\n\n    subscription.remove = () => this.removeSubscription(subscription);\n\n    this._listenerCount++;\n    return subscription;\n  }\n\n  hasListeners() {\n    return this._listenerCount > 0;\n  }\n\n  getListenerCount() {\n    return this._listenerCount;\n  }\n\n  removeAllListeners() {\n    this._listenerCount = 0;\n\n    this._nativeEmitter.removeAllListeners(this._nativeEventName);\n  }\n\n  removeSubscription(subscription) {\n    this._listenerCount--;\n\n    this._nativeEmitter.removeSubscription(subscription);\n  }\n\n  setUpdateInterval(intervalMs) {\n    this._nativeModule.setUpdateInterval(intervalMs);\n  }\n\n}","map":{"version":3,"sources":["../src/DeviceSensor.ts"],"names":[],"mappings":"AAAA,SAAS,YAAT,QAA2C,WAA3C;AAUA,eAAc,MAAO,YAAP,CAAmB;AAM/B,EAAA,WAAA,CAAY,kBAAZ,EAAoD,eAApD,EAA2E;AACzE,SAAK,aAAL,GAAqB,kBAArB;AACA,SAAK,cAAL,GAAsB,IAAI,YAAJ,CAAiB,kBAAjB,CAAtB;AACA,SAAK,gBAAL,GAAwB,eAAxB;AACA,SAAK,cAAL,GAAsB,CAAtB;AACD;;AAED,EAAA,WAAW,CAAC,QAAD,EAAsB;AAC/B,QAAI,YAAY,GAAG,KAAK,cAAL,CAAoB,WAApB,CAAgC,KAAK,gBAArC,EAAuD,QAAvD,CAAnB;;AACA,IAAA,YAAY,CAAC,MAAb,GAAsB,MAAM,KAAK,kBAAL,CAAwB,YAAxB,CAA5B;;AACA,SAAK,cAAL;AACA,WAAO,YAAP;AACD;;AAED,EAAA,YAAY,GAAA;AACV,WAAO,KAAK,cAAL,GAAsB,CAA7B;AACD;;AAED,EAAA,gBAAgB,GAAA;AACd,WAAO,KAAK,cAAZ;AACD;;AAED,EAAA,kBAAkB,GAAA;AAChB,SAAK,cAAL,GAAsB,CAAtB;;AACA,SAAK,cAAL,CAAoB,kBAApB,CAAuC,KAAK,gBAA5C;AACD;;AAED,EAAA,kBAAkB,CAAC,YAAD,EAA2B;AAC3C,SAAK,cAAL;;AACA,SAAK,cAAL,CAAoB,kBAApB,CAAuC,YAAvC;AACD;;AAED,EAAA,iBAAiB,CAAC,UAAD,EAAmB;AAClC,SAAK,aAAL,CAAmB,iBAAnB,CAAqC,UAArC;AACD;;AAxC8B","sourcesContent":["import { EventEmitter, Subscription } from 'expo-core';\n\ntype Listener<E> = (event: E) => void;\n\ntype NativeSensorModule = any;\n\n/**\n * A base class for subscribable sensors. The events emitted by this class are measurements\n * specified by the parameter type `M`.\n */\nexport default class DeviceSensor<M> {\n  _nativeModule: NativeSensorModule;\n  _nativeEmitter: EventEmitter;\n  _nativeEventName: string;\n  _listenerCount: number;\n\n  constructor(nativeSensorModule: NativeSensorModule, nativeEventName: string) {\n    this._nativeModule = nativeSensorModule;\n    this._nativeEmitter = new EventEmitter(nativeSensorModule);\n    this._nativeEventName = nativeEventName;\n    this._listenerCount = 0;\n  }\n\n  addListener(listener: Listener<M>): Subscription {\n    let subscription = this._nativeEmitter.addListener(this._nativeEventName, listener);\n    subscription.remove = () => this.removeSubscription(subscription);\n    this._listenerCount++;\n    return subscription;\n  }\n\n  hasListeners(): boolean {\n    return this._listenerCount > 0;\n  }\n\n  getListenerCount(): number {\n    return this._listenerCount;\n  }\n\n  removeAllListeners(): void {\n    this._listenerCount = 0;\n    this._nativeEmitter.removeAllListeners(this._nativeEventName);\n  }\n\n  removeSubscription(subscription: Subscription): void {\n    this._listenerCount--;\n    this._nativeEmitter.removeSubscription(subscription);\n  }\n\n  setUpdateInterval(intervalMs: number): void {\n    this._nativeModule.setUpdateInterval(intervalMs);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}