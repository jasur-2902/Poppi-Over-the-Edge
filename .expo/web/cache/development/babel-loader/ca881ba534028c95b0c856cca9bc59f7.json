{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { batchProcessAllSourcesAsync, shouldProcess } from \"./ProcessSources.web\";\nexport function batchResolveAllFontsAsync(_x) {\n  return _batchResolveAllFontsAsync.apply(this, arguments);\n}\n\nfunction _batchResolveAllFontsAsync() {\n  _batchResolveAllFontsAsync = _asyncToGenerator(function* (element) {\n    var fontCSSStyles = yield findAllFontsForDocumentAsync();\n    var styleNode = document.createElement('style');\n    element.appendChild(styleNode);\n    styleNode.appendChild(document.createTextNode(fontCSSStyles.join('\\n')));\n    return element;\n  });\n  return _batchResolveAllFontsAsync.apply(this, arguments);\n}\n\nfunction findAllFontsForDocumentAsync() {\n  return _findAllFontsForDocumentAsync.apply(this, arguments);\n}\n\nfunction _findAllFontsForDocumentAsync() {\n  _findAllFontsForDocumentAsync = _asyncToGenerator(function* () {\n    var styleSheets = document.styleSheets;\n    var sheets = Array.from(styleSheets);\n    var cssRules = getCSSRules(sheets);\n    var rulesToProcess = cssRules.filter((_ref2) => {\n      var {\n        type\n      } = _ref2;\n      return type === CSSRule.FONT_FACE_RULE;\n    }).filter((_ref3) => {\n      var {\n        style\n      } = _ref3;\n      return shouldProcess(style.getPropertyValue('src'));\n    });\n    return yield Promise.all(rulesToProcess.map(item => createNewFontForCSSRule(item)));\n  });\n  return _findAllFontsForDocumentAsync.apply(this, arguments);\n}\n\nfunction createNewFontForCSSRule(_x2) {\n  return _createNewFontForCSSRule.apply(this, arguments);\n}\n\nfunction _createNewFontForCSSRule() {\n  _createNewFontForCSSRule = _asyncToGenerator(function* (_ref) {\n    var {\n      parentStyleSheet,\n      cssText\n    } = _ref;\n    var initialURL;\n\n    if (parentStyleSheet && parentStyleSheet.href != null) {\n      initialURL = parentStyleSheet.href;\n    }\n\n    return yield batchProcessAllSourcesAsync(cssText, initialURL);\n  });\n  return _createNewFontForCSSRule.apply(this, arguments);\n}\n\nfunction getCSSRules(styleSheets) {\n  var cssRules = [];\n\n  for (var sheet of styleSheets) {\n    try {\n      var rules = Array.from(sheet.cssRules);\n      cssRules.push(...rules);\n    } catch ({\n      message\n    }) {\n      throw new Error(\"Error while reading CSS rules from \".concat(sheet.href, \": \").concat(message));\n    }\n  }\n\n  return cssRules;\n}","map":{"version":3,"sources":["../../src/takeSnapshotAsync/Fonts.web.ts"],"names":[],"mappings":";;;;AAAA,SAAS,2BAAT,EAAsC,aAAtC;AAIA,gBAAsB,yBAAtB;AAAA;AAAA;;;iDAAO,WAAyC,OAAzC,EAA6D;AAClE,QAAM,aAAa,SAAS,4BAA4B,EAAxD;AACA,QAAM,SAAS,GAAG,QAAQ,CAAC,aAAT,CAAuB,OAAvB,CAAlB;AACA,IAAA,OAAO,CAAC,WAAR,CAAoB,SAApB;AACA,IAAA,SAAS,CAAC,WAAV,CAAsB,QAAQ,CAAC,cAAT,CAAwB,aAAa,CAAC,IAAd,CAAmB,IAAnB,CAAxB,CAAtB;AACA,WAAO,OAAP;AACD,G;;;;SAEc,4B;;;;;oDAAf,aAA2C;AACzC,QAAM,WAAW,GAAmB,QAAQ,CAAC,WAA7C;AACA,QAAM,MAAM,GAAU,KAAK,CAAC,IAAN,CAAW,WAAX,CAAtB;AACA,QAAM,QAAQ,GAAG,WAAW,CAAC,MAAD,CAA5B;AACA,QAAM,cAAc,GAAG,QAAQ,CAC5B,MADoB,CACb;AAAA,UAAC;AAAE,QAAA;AAAF,OAAD;AAAA,aAAc,IAAI,KAAK,OAAO,CAAC,cAA/B;AAAA,KADa,EAEpB,MAFoB,CAEb;AAAA,UAAC;AAAE,QAAA;AAAF,OAAD;AAAA,aAAe,aAAa,CAAC,KAAK,CAAC,gBAAN,CAAuB,KAAvB,CAAD,CAA5B;AAAA,KAFa,CAAvB;AAIA,iBAAa,OAAO,CAAC,GAAR,CAAY,cAAc,CAAC,GAAf,CAAmB,IAAI,IAAI,uBAAuB,CAAC,IAAD,CAAlD,CAAZ,CAAb;AACD,G;;;;SAEc,uB;;;;;+CAAf,iBAGe;AAAA,QAHwB;AACrC,MAAA,gBADqC;AAErC,MAAA;AAFqC,KAGxB;AACb,QAAI,UAAJ;;AACA,QAAI,gBAAgB,IAAI,gBAAgB,CAAC,IAAjB,IAAyB,IAAjD,EAAuD;AACrD,MAAA,UAAU,GAAG,gBAAgB,CAAC,IAA9B;AACD;;AACD,iBAAa,2BAA2B,CAAC,OAAD,EAAU,UAAV,CAAxC;AACD,G;;;;AAED,SAAS,WAAT,CAAqB,WAArB,EAAiD;AAC/C,MAAM,QAAQ,GAAmB,EAAjC;;AACA,OAAK,IAAM,KAAX,IAAoB,WAApB,EAAiC;AAC/B,QAAI;AACF,UAAM,KAAK,GAAU,KAAK,CAAC,IAAN,CAAW,KAAK,CAAC,QAAjB,CAArB;AACA,MAAA,QAAQ,CAAC,IAAT,CAAc,GAAG,KAAjB;AACD,KAHD,CAGE,OAAO;AAAE,MAAA;AAAF,KAAP,EAAoB;AACpB,YAAM,IAAI,KAAJ,8CAAgD,KAAK,CAAC,IAAtD,eAA+D,OAA/D,EAAN;AACD;AACF;;AACD,SAAO,QAAP;AACD","sourcesContent":["import { batchProcessAllSourcesAsync, shouldProcess } from './ProcessSources.web';\n\ndeclare var document: Document;\n\nexport async function batchResolveAllFontsAsync(element: HTMLElement): Promise<HTMLElement> {\n  const fontCSSStyles = await findAllFontsForDocumentAsync();\n  const styleNode = document.createElement('style');\n  element.appendChild(styleNode);\n  styleNode.appendChild(document.createTextNode(fontCSSStyles.join('\\n')));\n  return element;\n}\n\nasync function findAllFontsForDocumentAsync(): Promise<string[]> {\n  const styleSheets: StyleSheetList = document.styleSheets;\n  const sheets: any[] = Array.from(styleSheets);\n  const cssRules = getCSSRules(sheets);\n  const rulesToProcess = cssRules\n    .filter(({ type }) => type === CSSRule.FONT_FACE_RULE)\n    .filter(({ style }) => shouldProcess(style.getPropertyValue('src')));\n\n  return await Promise.all(rulesToProcess.map(item => createNewFontForCSSRule(item)));\n}\n\nasync function createNewFontForCSSRule({\n  parentStyleSheet,\n  cssText,\n}: CSSStyleRule): Promise<string> {\n  let initialURL;\n  if (parentStyleSheet && parentStyleSheet.href != null) {\n    initialURL = parentStyleSheet.href;\n  }\n  return await batchProcessAllSourcesAsync(cssText, initialURL);\n}\n\nfunction getCSSRules(styleSheets: CSSStyleSheet[]): CSSStyleRule[] {\n  const cssRules: CSSStyleRule[] = [];\n  for (const sheet of styleSheets) {\n    try {\n      const rules: any[] = Array.from(sheet.cssRules);\n      cssRules.push(...rules);\n    } catch ({ message }) {\n      throw new Error(`Error while reading CSS rules from ${sheet.href}: ${message}`);\n    }\n  }\n  return cssRules;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}