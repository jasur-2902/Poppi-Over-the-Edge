{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { UnavailabilityError } from 'expo-errors';\nimport invariant from 'invariant';\nimport ExponentSecureStore from \"./ExponentSecureStore\";\nexport var AFTER_FIRST_UNLOCK = ExponentSecureStore.AFTER_FIRST_UNLOCK;\nexport var AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY = ExponentSecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY;\nexport var ALWAYS = ExponentSecureStore.ALWAYS;\nexport var WHEN_PASSCODE_SET_THIS_DEVICE_ONLY = ExponentSecureStore.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY;\nexport var ALWAYS_THIS_DEVICE_ONLY = ExponentSecureStore.ALWAYS_THIS_DEVICE_ONLY;\nexport var WHEN_UNLOCKED = ExponentSecureStore.WHEN_UNLOCKED;\nexport var WHEN_UNLOCKED_THIS_DEVICE_ONLY = ExponentSecureStore.WHEN_UNLOCKED_THIS_DEVICE_ONLY;\nexport function deleteItemAsync(_x) {\n  return _deleteItemAsync.apply(this, arguments);\n}\n\nfunction _deleteItemAsync() {\n  _deleteItemAsync = _asyncToGenerator(function* (key) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _ensureValidKey(key);\n\n    if (!ExponentSecureStore.deleteValueWithKeyAsync) {\n      throw new UnavailabilityError('SecureStore', 'deleteItemAsync');\n    }\n\n    yield ExponentSecureStore.deleteValueWithKeyAsync(key, options);\n  });\n  return _deleteItemAsync.apply(this, arguments);\n}\n\nexport function getItemAsync(_x2) {\n  return _getItemAsync.apply(this, arguments);\n}\n\nfunction _getItemAsync() {\n  _getItemAsync = _asyncToGenerator(function* (key) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _ensureValidKey(key);\n\n    return yield ExponentSecureStore.getValueWithKeyAsync(key, options);\n  });\n  return _getItemAsync.apply(this, arguments);\n}\n\nexport function setItemAsync(_x3, _x4) {\n  return _setItemAsync.apply(this, arguments);\n}\n\nfunction _setItemAsync() {\n  _setItemAsync = _asyncToGenerator(function* (key, value) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _ensureValidKey(key);\n\n    if (!_isValidValue(value)) {\n      throw new Error(\"Invalid value provided to SecureStore. Values must be strings; consider JSON-encoding your values if they are serializable.\");\n    }\n\n    if (!ExponentSecureStore.setValueWithKeyAsync) {\n      throw new UnavailabilityError('SecureStore', 'setItemAsync');\n    }\n\n    yield ExponentSecureStore.setValueWithKeyAsync(value, key, options);\n  });\n  return _setItemAsync.apply(this, arguments);\n}\n\nfunction _ensureValidKey(key) {\n  invariant(_isValidKey(key), \"Invalid key provided to SecureStore. Keys must not be empty and contain only alphanumeric characters, \\\".\\\", \\\"-\\\", and \\\"_\\\".\");\n}\n\nfunction _isValidKey(key) {\n  return typeof key === 'string' && /^[\\w.-]+$/.test(key);\n}\n\nfunction _isValidValue(value) {\n  return typeof value === 'string';\n}","map":{"version":3,"sources":["../../src/SecureStore/SecureStore.ts"],"names":[],"mappings":";;;;AAAA,SAAS,mBAAT,QAAoC,aAApC;AACA,OAAO,SAAP,MAAsB,WAAtB;AACA,OAAO,mBAAP;AAIA,OAAO,IAAM,kBAAkB,GAC7B,mBAAmB,CAAC,kBADf;AAEP,OAAO,IAAM,mCAAmC,GAC9C,mBAAmB,CAAC,mCADf;AAEP,OAAO,IAAM,MAAM,GAAkC,mBAAmB,CAAC,MAAlE;AACP,OAAO,IAAM,kCAAkC,GAC7C,mBAAmB,CAAC,kCADf;AAEP,OAAO,IAAM,uBAAuB,GAClC,mBAAmB,CAAC,uBADf;AAEP,OAAO,IAAM,aAAa,GAAkC,mBAAmB,CAAC,aAAzE;AACP,OAAO,IAAM,8BAA8B,GACzC,mBAAmB,CAAC,8BADf;AAQP,gBAAsB,eAAtB;AAAA;AAAA;;;uCAAO,WACL,GADK,EAE2B;AAAA,QAAhC,OAAgC,uEAAF,EAAE;;AAEhC,IAAA,eAAe,CAAC,GAAD,CAAf;;AAEA,QAAI,CAAC,mBAAmB,CAAC,uBAAzB,EAAkD;AAChD,YAAM,IAAI,mBAAJ,CAAwB,aAAxB,EAAuC,iBAAvC,CAAN;AACD;;AACD,UAAM,mBAAmB,CAAC,uBAApB,CAA4C,GAA5C,EAAiD,OAAjD,CAAN;AACD,G;;;;AAED,gBAAsB,YAAtB;AAAA;AAAA;;;oCAAO,WACL,GADK,EAE2B;AAAA,QAAhC,OAAgC,uEAAF,EAAE;;AAEhC,IAAA,eAAe,CAAC,GAAD,CAAf;;AACA,iBAAa,mBAAmB,CAAC,oBAApB,CAAyC,GAAzC,EAA8C,OAA9C,CAAb;AACD,G;;;;AAED,gBAAsB,YAAtB;AAAA;AAAA;;;oCAAO,WACL,GADK,EAEL,KAFK,EAG2B;AAAA,QAAhC,OAAgC,uEAAF,EAAE;;AAEhC,IAAA,eAAe,CAAC,GAAD,CAAf;;AACA,QAAI,CAAC,aAAa,CAAC,KAAD,CAAlB,EAA2B;AACzB,YAAM,IAAI,KAAJ,+HAAN;AAGD;;AACD,QAAI,CAAC,mBAAmB,CAAC,oBAAzB,EAA+C;AAC7C,YAAM,IAAI,mBAAJ,CAAwB,aAAxB,EAAuC,cAAvC,CAAN;AACD;;AACD,UAAM,mBAAmB,CAAC,oBAApB,CAAyC,KAAzC,EAAgD,GAAhD,EAAqD,OAArD,CAAN;AACD,G;;;;AAED,SAAS,eAAT,CAAyB,GAAzB,EAAoC;AAClC,EAAA,SAAS,CACP,WAAW,CAAC,GAAD,CADJ,mIAAT;AAID;;AAED,SAAS,WAAT,CAAqB,GAArB,EAAgC;AAC9B,SAAO,OAAO,GAAP,KAAe,QAAf,IAA2B,YAAY,IAAZ,CAAiB,GAAjB,CAAlC;AACD;;AAED,SAAS,aAAT,CAAuB,KAAvB,EAAoC;AAClC,SAAO,OAAO,KAAP,KAAiB,QAAxB;AACD","sourcesContent":["import { UnavailabilityError } from 'expo-errors';\nimport invariant from 'invariant';\nimport ExponentSecureStore from './ExponentSecureStore';\n\nexport type KeychainAccessibilityConstant = number;\n\nexport const AFTER_FIRST_UNLOCK: KeychainAccessibilityConstant =\n  ExponentSecureStore.AFTER_FIRST_UNLOCK;\nexport const AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExponentSecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY;\nexport const ALWAYS: KeychainAccessibilityConstant = ExponentSecureStore.ALWAYS;\nexport const WHEN_PASSCODE_SET_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExponentSecureStore.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY;\nexport const ALWAYS_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExponentSecureStore.ALWAYS_THIS_DEVICE_ONLY;\nexport const WHEN_UNLOCKED: KeychainAccessibilityConstant = ExponentSecureStore.WHEN_UNLOCKED;\nexport const WHEN_UNLOCKED_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExponentSecureStore.WHEN_UNLOCKED_THIS_DEVICE_ONLY;\n\nexport type SecureStoreOptions = {\n  keychainService?: string;\n  keychainAccessible?: KeychainAccessibilityConstant;\n};\n\nexport async function deleteItemAsync(\n  key: string,\n  options: SecureStoreOptions = {}\n): Promise<void> {\n  _ensureValidKey(key);\n\n  if (!ExponentSecureStore.deleteValueWithKeyAsync) {\n    throw new UnavailabilityError('SecureStore', 'deleteItemAsync');\n  }\n  await ExponentSecureStore.deleteValueWithKeyAsync(key, options);\n}\n\nexport async function getItemAsync(\n  key: string,\n  options: SecureStoreOptions = {}\n): Promise<string | null> {\n  _ensureValidKey(key);\n  return await ExponentSecureStore.getValueWithKeyAsync(key, options);\n}\n\nexport async function setItemAsync(\n  key: string,\n  value: string,\n  options: SecureStoreOptions = {}\n): Promise<void> {\n  _ensureValidKey(key);\n  if (!_isValidValue(value)) {\n    throw new Error(\n      `Invalid value provided to SecureStore. Values must be strings; consider JSON-encoding your values if they are serializable.`\n    );\n  }\n  if (!ExponentSecureStore.setValueWithKeyAsync) {\n    throw new UnavailabilityError('SecureStore', 'setItemAsync');\n  }\n  await ExponentSecureStore.setValueWithKeyAsync(value, key, options);\n}\n\nfunction _ensureValidKey(key: string) {\n  invariant(\n    _isValidKey(key),\n    `Invalid key provided to SecureStore. Keys must not be empty and contain only alphanumeric characters, \".\", \"-\", and \"_\".`\n  );\n}\n\nfunction _isValidKey(key: string) {\n  return typeof key === 'string' && /^[\\w.-]+$/.test(key);\n}\n\nfunction _isValidValue(value: string) {\n  return typeof value === 'string';\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}