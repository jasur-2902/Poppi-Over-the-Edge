{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { PIXI } from 'expo-pixi';\nvar {\n  Rectangle,\n  Texture\n} = PIXI;\n\nfunction setupSpriteSheetAsync(_x, _x2) {\n  return _setupSpriteSheetAsync.apply(this, arguments);\n}\n\nfunction _setupSpriteSheetAsync() {\n  _setupSpriteSheetAsync = _asyncToGenerator(function* (resource, spriteSheet) {\n    var texture = yield Texture.fromExpoAsync(resource);\n    var textures = {};\n\n    for (var sprite of spriteSheet) {\n      var {\n        name,\n        x,\n        y,\n        width,\n        height\n      } = sprite;\n\n      try {\n        var frame = new Rectangle(x, y, width, height);\n        textures[name] = new global.PIXI.Texture(texture.baseTexture, frame);\n      } catch ({\n        message\n      }) {\n        console.error(message);\n      }\n    }\n\n    return textures;\n  });\n  return _setupSpriteSheetAsync.apply(this, arguments);\n}\n\nexport default setupSpriteSheetAsync;","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/src/setupSpriteSheetAsync.js"],"names":["PIXI","Rectangle","Texture","setupSpriteSheetAsync","resource","spriteSheet","texture","fromExpoAsync","textures","sprite","name","x","y","width","height","frame","global","baseTexture","message","console","error"],"mappings":";;;;AAAA,SAASA,IAAT,QAAqB,WAArB;AACA,IAAM;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,IAAyBF,IAA/B;;SACeG,qB;;;;;6CAAf,WAAqCC,QAArC,EAA+CC,WAA/C,EAA4D;AAC1D,QAAMC,OAAO,SAASJ,OAAO,CAACK,aAAR,CAAsBH,QAAtB,CAAtB;AAEA,QAAII,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAMC,MAAX,IAAqBJ,WAArB,EAAkC;AAChC,UAAM;AAAEK,QAAAA,IAAF;AAAQC,QAAAA,CAAR;AAAWC,QAAAA,CAAX;AAAcC,QAAAA,KAAd;AAAqBC,QAAAA;AAArB,UAAgCL,MAAtC;;AACA,UAAI;AACF,YAAMM,KAAK,GAAG,IAAId,SAAJ,CAAcU,CAAd,EAAiBC,CAAjB,EAAoBC,KAApB,EAA2BC,MAA3B,CAAd;AACAN,QAAAA,QAAQ,CAACE,IAAD,CAAR,GAAiB,IAAIM,MAAM,CAAChB,IAAP,CAAYE,OAAhB,CAAwBI,OAAO,CAACW,WAAhC,EAA6CF,KAA7C,CAAjB;AACD,OAHD,CAGE,OAAO;AAAEG,QAAAA;AAAF,OAAP,EAAoB;AACpBC,QAAAA,OAAO,CAACC,KAAR,CAAcF,OAAd;AACD;AACF;;AACD,WAAOV,QAAP;AACD,G;;;;AAED,eAAeL,qBAAf","sourcesContent":["import { PIXI } from 'expo-pixi';\nconst { Rectangle, Texture } = PIXI;\nasync function setupSpriteSheetAsync(resource, spriteSheet) {\n  const texture = await Texture.fromExpoAsync(resource);\n\n  let textures = {};\n  for (const sprite of spriteSheet) {\n    const { name, x, y, width, height } = sprite;\n    try {\n      const frame = new Rectangle(x, y, width, height);\n      textures[name] = new global.PIXI.Texture(texture.baseTexture, frame);\n    } catch ({ message }) {\n      console.error(message);\n    }\n  }\n  return textures;\n}\n\nexport default setupSpriteSheetAsync;\n"]},"metadata":{},"sourceType":"module"}