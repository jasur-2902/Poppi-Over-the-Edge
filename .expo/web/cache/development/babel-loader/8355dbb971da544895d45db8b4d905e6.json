{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nexport default {\n  get name() {\n    return 'ExponentCameraManager';\n  },\n\n  get Type() {\n    return {\n      back: 'back',\n      front: 'front'\n    };\n  },\n\n  get FlashMode() {\n    return {\n      on: 'on',\n      off: 'off',\n      auto: 'auto',\n      torch: 'torch'\n    };\n  },\n\n  get AutoFocus() {\n    return {\n      on: 'on',\n      off: 'off',\n      auto: 'auto',\n      singleShot: 'singleShot'\n    };\n  },\n\n  get WhiteBalance() {\n    return {\n      auto: 'auto',\n      continuous: 'continuous',\n      manual: 'manual'\n    };\n  },\n\n  get VideoQuality() {\n    return {};\n  },\n\n  takePicture(options, camera) {\n    return _asyncToGenerator(function* () {\n      return yield camera.takePicture(options);\n    })();\n  },\n\n  pausePreview(camera) {\n    return _asyncToGenerator(function* () {\n      camera.pausePreview();\n    })();\n  },\n\n  resumePreview(camera) {\n    return _asyncToGenerator(function* () {\n      return yield camera.resumePreview();\n    })();\n  },\n\n  getAvailablePictureSizes(ratio, camera) {\n    return _asyncToGenerator(function* () {\n      return yield camera.getAvailablePictureSizes(ratio);\n    })();\n  }\n\n};","map":{"version":3,"sources":["../src/ExponentCameraManager.web.ts"],"names":[],"mappings":";;;;AAGA,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,uBAAP;AACD,GAHY;;AAIb,MAAI,IAAJ,GAAQ;AACN,WAAO;AACL,MAAA,IAAI,EAAE,MADD;AAEL,MAAA,KAAK,EAAE;AAFF,KAAP;AAID,GATY;;AAUb,MAAI,SAAJ,GAAa;AACX,WAAO;AACL,MAAA,EAAE,EAAE,IADC;AAEL,MAAA,GAAG,EAAE,KAFA;AAGL,MAAA,IAAI,EAAE,MAHD;AAIL,MAAA,KAAK,EAAE;AAJF,KAAP;AAMD,GAjBY;;AAkBb,MAAI,SAAJ,GAAa;AACX,WAAO;AACL,MAAA,EAAE,EAAE,IADC;AAEL,MAAA,GAAG,EAAE,KAFA;AAGL,MAAA,IAAI,EAAE,MAHD;AAIL,MAAA,UAAU,EAAE;AAJP,KAAP;AAMD,GAzBY;;AA0Bb,MAAI,YAAJ,GAAgB;AACd,WAAO;AACL,MAAA,IAAI,EAAE,MADD;AAEL,MAAA,UAAU,EAAE,YAFP;AAGL,MAAA,MAAM,EAAE;AAHH,KAAP;AAKD,GAhCY;;AAiCb,MAAI,YAAJ,GAAgB;AACd,WAAO,EAAP;AACD,GAnCY;;AAwCP,EAAA,WAAN,CAAkB,OAAlB,EAA2C,MAA3C,EAAiE;AAAA;AAC/D,mBAAa,MAAM,CAAC,WAAP,CAAmB,OAAnB,CAAb;AAD+D;AAEhE,GA1CY;;AA2CP,EAAA,YAAN,CAAmB,MAAnB,EAAyC;AAAA;AACvC,MAAA,MAAM,CAAC,YAAP;AADuC;AAExC,GA7CY;;AA8CP,EAAA,aAAN,CAAoB,MAApB,EAA0C;AAAA;AACxC,mBAAa,MAAM,CAAC,aAAP,EAAb;AADwC;AAEzC,GAhDY;;AAiDP,EAAA,wBAAN,CAA+B,KAA/B,EAA8C,MAA9C,EAAoE;AAAA;AAClE,mBAAa,MAAM,CAAC,wBAAP,CAAgC,KAAhC,CAAb;AADkE;AAEnE;;AAnDY,CAAf","sourcesContent":["import { CapturedPicture, PictureOptions } from './Camera.types';\nimport ExponentCamera from './ExponentCamera.web';\n\nexport default {\n  get name(): string {\n    return 'ExponentCameraManager';\n  },\n  get Type() {\n    return {\n      back: 'back',\n      front: 'front',\n    };\n  },\n  get FlashMode() {\n    return {\n      on: 'on',\n      off: 'off',\n      auto: 'auto',\n      torch: 'torch',\n    };\n  },\n  get AutoFocus() {\n    return {\n      on: 'on',\n      off: 'off',\n      auto: 'auto',\n      singleShot: 'singleShot',\n    };\n  },\n  get WhiteBalance() {\n    return {\n      auto: 'auto',\n      continuous: 'continuous',\n      manual: 'manual',\n    };\n  },\n  get VideoQuality() {\n    return {};\n  },\n\n  // TODO: Bacon: Is video possible?\n  // record(options): Promise\n  // stopRecording(): Promise<void>\n  async takePicture(options: PictureOptions, camera: ExponentCamera): Promise<CapturedPicture> {\n    return await camera.takePicture(options);\n  },\n  async pausePreview(camera: ExponentCamera): Promise<void> {\n    camera.pausePreview();\n  },\n  async resumePreview(camera: ExponentCamera): Promise<any> {\n    return await camera.resumePreview();\n  },\n  async getAvailablePictureSizes(ratio: string, camera: ExponentCamera): Promise<string[]> {\n    return await camera.getAvailablePictureSizes(ratio);\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}