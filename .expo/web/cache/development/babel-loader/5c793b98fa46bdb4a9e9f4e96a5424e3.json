{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ExponentPrint from \"./ExponentPrint\";\nimport { UnavailabilityError } from '@unimodules/core';\nexport var Orientation = ExponentPrint.Orientation;\nexport function printAsync(_x) {\n  return _printAsync.apply(this, arguments);\n}\n\nfunction _printAsync() {\n  _printAsync = _asyncToGenerator(function* (options) {\n    if (Platform.OS === 'web') {\n      return yield ExponentPrint.print(options);\n    }\n\n    if (!options.uri && !options.html && Platform.OS === 'ios' && !options.markupFormatterIOS) {\n      throw new Error('Must provide either `html` or `uri` to print');\n    }\n\n    if (options.uri && options.html) {\n      throw new Error('Must provide exactly one of `html` and `uri` but both were specified');\n    }\n\n    return yield ExponentPrint.print(options);\n  });\n  return _printAsync.apply(this, arguments);\n}\n\nexport function selectPrinterAsync() {\n  return _selectPrinterAsync.apply(this, arguments);\n}\n\nfunction _selectPrinterAsync() {\n  _selectPrinterAsync = _asyncToGenerator(function* () {\n    if (ExponentPrint.selectPrinter) {\n      return yield ExponentPrint.selectPrinter();\n    }\n\n    throw new UnavailabilityError('Print', 'selectPrinterAsync');\n  });\n  return _selectPrinterAsync.apply(this, arguments);\n}\n\nexport function printToFileAsync() {\n  return _printToFileAsync.apply(this, arguments);\n}\n\nfunction _printToFileAsync() {\n  _printToFileAsync = _asyncToGenerator(function* () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return yield ExponentPrint.printToFileAsync(options);\n  });\n  return _printToFileAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/Print.ts"],"names":[],"mappings":";;;;;AACA,OAAO,aAAP;AACA,SAAS,mBAAT,QAAoC,kBAApC;AAiBA,OAAO,IAAM,WAAW,GAAoB,aAAa,CAAC,WAAnD;AAEP,gBAAsB,UAAtB;AAAA;AAAA;;;kCAAO,WAA0B,OAA1B,EAA+C;AACpD,QAAI,QAAQ,CAAC,EAAT,KAAgB,KAApB,EAA2B;AACzB,mBAAa,aAAa,CAAC,KAAd,CAAoB,OAApB,CAAb;AACD;;AACD,QAAI,CAAC,OAAO,CAAC,GAAT,IAAgB,CAAC,OAAO,CAAC,IAAzB,IAAkC,QAAQ,CAAC,EAAT,KAAgB,KAAhB,IAAyB,CAAC,OAAO,CAAC,kBAAxE,EAA6F;AAC3F,YAAM,IAAI,KAAJ,CAAU,8CAAV,CAAN;AACD;;AACD,QAAI,OAAO,CAAC,GAAR,IAAe,OAAO,CAAC,IAA3B,EAAiC;AAC/B,YAAM,IAAI,KAAJ,CAAU,sEAAV,CAAN;AACD;;AACD,iBAAa,aAAa,CAAC,KAAd,CAAoB,OAApB,CAAb;AACD,G;;;;AAED,gBAAsB,kBAAtB;AAAA;AAAA;;;0CAAO,aAAiC;AACtC,QAAI,aAAa,CAAC,aAAlB,EAAiC;AAC/B,mBAAa,aAAa,CAAC,aAAd,EAAb;AACD;;AAED,UAAM,IAAI,mBAAJ,CAAwB,OAAxB,EAAiC,oBAAjC,CAAN;AACD,G;;;;AAED,gBAAsB,gBAAtB;AAAA;AAAA;;;wCAAO,aAA8D;AAAA,QAA9B,OAA8B,uEAAF,EAAE;AACnE,iBAAa,aAAa,CAAC,gBAAd,CAA+B,OAA/B,CAAb;AACD,G","sourcesContent":["import { Platform } from 'react-native';\nimport ExponentPrint from './ExponentPrint';\nimport { UnavailabilityError } from '@unimodules/core';\nimport {\n  PrintOptions,\n  Printer,\n  OrientationType,\n  FilePrintOptions,\n  FilePrintResult,\n} from './Print.types';\n\nexport {\n  Printer,\n  FilePrintOptions,\n  FilePrintResult,\n  PrintOptions,\n  OrientationType,\n};\n\nexport const Orientation: OrientationType = ExponentPrint.Orientation;\n\nexport async function printAsync(options: PrintOptions): Promise<void> {\n  if (Platform.OS === 'web') {\n    return await ExponentPrint.print(options);\n  }\n  if (!options.uri && !options.html && (Platform.OS === 'ios' && !options.markupFormatterIOS)) {\n    throw new Error('Must provide either `html` or `uri` to print');\n  }\n  if (options.uri && options.html) {\n    throw new Error('Must provide exactly one of `html` and `uri` but both were specified');\n  }\n  return await ExponentPrint.print(options);\n}\n\nexport async function selectPrinterAsync(): Promise<Printer> {\n  if (ExponentPrint.selectPrinter) {\n    return await ExponentPrint.selectPrinter();\n  }\n\n  throw new UnavailabilityError('Print', 'selectPrinterAsync');\n}\n\nexport async function printToFileAsync(options: FilePrintOptions = {}): Promise<FilePrintResult> {\n  return await ExponentPrint.printToFileAsync(options);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}