{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { AppAuth } from 'expo-app-auth';\nimport Constants from 'expo-constants';\nimport { UnavailabilityError } from 'expo-errors';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport function logInAsync(_x) {\n  return _logInAsync.apply(this, arguments);\n}\n\nfunction _logInAsync() {\n  _logInAsync = _asyncToGenerator(function* (config) {\n    if (!AppAuth.authAsync) {\n      throw new UnavailabilityError('AppAuth', 'logInAsync');\n    }\n\n    var {\n      behavior = 'web'\n    } = config;\n\n    if (behavior !== 'web') {\n      if (Constants.appOwnership === 'expo') {\n        console.warn('Native Google Sign-In is only available in ExpoKit projects. Falling back to `web` behavior');\n      } else {\n        console.warn(\"Deprecated: Native Google Sign-In has been moved to Expo.GoogleSignIn ('expo-google-sign-in') Falling back to `web` behavior\");\n      }\n    }\n\n    var userDefinedScopes = config.scopes || [];\n    var requiredScopes = [...userDefinedScopes, 'profile', 'email', 'openid'];\n    var scopes = [...new Set(requiredScopes)];\n    var clientId = config.clientId || Platform.select({\n      ios: config.iosClientId,\n      android: config.androidClientId,\n      web: config.clientId\n    });\n\n    try {\n      var logInResult = yield AppAuth.authAsync({\n        issuer: 'https://accounts.google.com',\n        scopes,\n        clientId\n      });\n      var userInfoResponse = yield fetch('https://www.googleapis.com/userinfo/v2/me', {\n        headers: {\n          Authorization: \"Bearer \".concat(logInResult.accessToken)\n        }\n      });\n      var userInfo = yield userInfoResponse.json();\n      return _objectSpread(_objectSpread({\n        type: 'success'\n      }, logInResult), {}, {\n        user: {\n          id: userInfo.id,\n          name: userInfo.name,\n          givenName: userInfo.given_name,\n          familyName: userInfo.family_name,\n          photoUrl: userInfo.picture,\n          email: userInfo.email\n        }\n      });\n    } catch (error) {\n      if (error.message.toLowerCase().indexOf('user cancelled') > -1) {\n        return {\n          type: 'cancel'\n        };\n      }\n\n      throw error;\n    }\n  });\n  return _logInAsync.apply(this, arguments);\n}\n\nexport function logOutAsync(_x2) {\n  return _logOutAsync.apply(this, arguments);\n}\n\nfunction _logOutAsync() {\n  _logOutAsync = _asyncToGenerator(function* (_ref) {\n    var {\n      accessToken,\n      clientId\n    } = _ref;\n    var config = {\n      issuer: 'https://accounts.google.com',\n      clientId\n    };\n    return yield AppAuth.revokeAsync(config, {\n      token: accessToken,\n      isClientIdProvided: !!clientId\n    });\n  });\n  return _logOutAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../../src/Google/Google.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,SAAS,OAAT,QAAwB,eAAxB;AACA,OAAO,SAAP,MAAsB,gBAAtB;AACA,SAAS,mBAAT,QAAoC,aAApC;;AA8BA,gBAAsB,UAAtB;AAAA;AAAA;;;kCAAO,WAA0B,MAA1B,EAA6C;AAClD,QAAI,CAAC,OAAO,CAAC,SAAb,EAAwB;AACtB,YAAM,IAAI,mBAAJ,CAAwB,SAAxB,EAAmC,YAAnC,CAAN;AACD;;AAED,QAAM;AAAE,MAAA,QAAQ,GAAG;AAAb,QAAuB,MAA7B;;AAEA,QAAI,QAAQ,KAAK,KAAjB,EAAwB;AACtB,UAAI,SAAS,CAAC,YAAV,KAA2B,MAA/B,EAAuC;AACrC,QAAA,OAAO,CAAC,IAAR,CACE,6FADF;AAGD,OAJD,MAIO;AACL,QAAA,OAAO,CAAC,IAAR,CACE,8HADF;AAGD;AACF;;AAED,QAAM,iBAAiB,GAAG,MAAM,CAAC,MAAP,IAAiB,EAA3C;AAEA,QAAM,cAAc,GAAG,CAAC,GAAG,iBAAJ,EAAuB,SAAvB,EAAkC,OAAlC,EAA2C,QAA3C,CAAvB;AAEA,QAAM,MAAM,GAAG,CAAC,GAAG,IAAI,GAAJ,CAAQ,cAAR,CAAJ,CAAf;AAGA,QAAM,QAAQ,GACZ,MAAM,CAAC,QAAP,IACA,QAAQ,CAAC,MAAT,CAAgB;AACd,MAAA,GAAG,EAAE,MAAM,CAAC,WADE;AAEd,MAAA,OAAO,EAAE,MAAM,CAAC,eAFF;AAGd,MAAA,GAAG,EAAE,MAAM,CAAC;AAHE,KAAhB,CAFF;;AAQA,QAAI;AACF,UAAM,WAAW,SAAS,OAAO,CAAC,SAAR,CAAkB;AAC1C,QAAA,MAAM,EAAE,6BADkC;AAE1C,QAAA,MAF0C;AAG1C,QAAA;AAH0C,OAAlB,CAA1B;AAQA,UAAM,gBAAgB,SAAS,KAAK,CAAC,2CAAD,EAA8C;AAChF,QAAA,OAAO,EAAE;AAAE,UAAA,aAAa,mBAAY,WAAW,CAAC,WAAxB;AAAf;AADuE,OAA9C,CAApC;AAGA,UAAM,QAAQ,SAAS,gBAAgB,CAAC,IAAjB,EAAvB;AACA;AACE,QAAA,IAAI,EAAE;AADR,SAEK,WAFL;AAGE,QAAA,IAAI,EAAE;AACJ,UAAA,EAAE,EAAE,QAAQ,CAAC,EADT;AAEJ,UAAA,IAAI,EAAE,QAAQ,CAAC,IAFX;AAGJ,UAAA,SAAS,EAAE,QAAQ,CAAC,UAHhB;AAIJ,UAAA,UAAU,EAAE,QAAQ,CAAC,WAJjB;AAKJ,UAAA,QAAQ,EAAE,QAAQ,CAAC,OALf;AAMJ,UAAA,KAAK,EAAE,QAAQ,CAAC;AANZ;AAHR;AAYD,KAzBD,CAyBE,OAAO,KAAP,EAAc;AACd,UAAI,KAAK,CAAC,OAAN,CAAc,WAAd,GAA4B,OAA5B,CAAoC,gBAApC,IAAwD,CAAC,CAA7D,EAAgE;AAC9D,eAAO;AAAE,UAAA,IAAI,EAAE;AAAR,SAAP;AACD;;AACD,YAAM,KAAN;AACD;AACF,G;;;;AAED,gBAAsB,WAAtB;AAAA;AAAA;;;mCAAO,iBAAoD;AAAA,QAAzB;AAAE,MAAA,WAAF;AAAe,MAAA;AAAf,KAAyB;AACzD,QAAM,MAAM,GAAG;AACb,MAAA,MAAM,EAAE,6BADK;AAEb,MAAA;AAFa,KAAf;AAKA,iBAAa,OAAO,CAAC,WAAR,CAAoB,MAApB,EAA4B;AACvC,MAAA,KAAK,EAAE,WADgC;AAEvC,MAAA,kBAAkB,EAAE,CAAC,CAAC;AAFiB,KAA5B,CAAb;AAID,G","sourcesContent":["import { AppAuth } from 'expo-app-auth';\nimport Constants from 'expo-constants';\nimport { UnavailabilityError } from 'expo-errors';\nimport { Platform } from 'react-native';\n\ntype LogInConfig = {\n  androidClientId?: string;\n  iosClientId?: string;\n  clientId?: string;\n  behavior?: 'system' | 'web';\n  scopes?: string[];\n};\n\ntype LogInResult =\n  | {\n      type: 'cancel';\n    }\n  | {\n      type: 'success';\n      accessToken?: string;\n      idToken: string | null;\n      refreshToken: string | null;\n      user: {\n        id?: string;\n        name?: string;\n        givenName?: string;\n        familyName?: string;\n        photoUrl?: string;\n        email?: string;\n      };\n    };\n\nexport async function logInAsync(config: LogInConfig): Promise<LogInResult> {\n  if (!AppAuth.authAsync) {\n    throw new UnavailabilityError('AppAuth', 'logInAsync');\n  }\n\n  const { behavior = 'web' } = config;\n\n  if (behavior !== 'web') {\n    if (Constants.appOwnership === 'expo') {\n      console.warn(\n        'Native Google Sign-In is only available in ExpoKit projects. Falling back to `web` behavior'\n      );\n    } else {\n      console.warn(\n        \"Deprecated: Native Google Sign-In has been moved to Expo.GoogleSignIn ('expo-google-sign-in') Falling back to `web` behavior\"\n      );\n    }\n  }\n\n  const userDefinedScopes = config.scopes || [];\n  /* Add the required scopes for returning profile data. */\n  const requiredScopes = [...userDefinedScopes, 'profile', 'email', 'openid'];\n  /* Remove duplicates */\n  const scopes = [...new Set(requiredScopes)];\n\n  /* This is the CLIENT_ID generated from a Firebase project */\n  const clientId =\n    config.clientId ||\n    Platform.select({\n      ios: config.iosClientId,\n      android: config.androidClientId,\n      web: config.clientId,\n    });\n\n  try {\n    const logInResult = await AppAuth.authAsync({\n      issuer: 'https://accounts.google.com',\n      scopes,\n      clientId,\n    });\n\n    // Web login only returns an accessToken so use it to fetch the same info as the native login\n    // does.\n    const userInfoResponse = await fetch('https://www.googleapis.com/userinfo/v2/me', {\n      headers: { Authorization: `Bearer ${logInResult.accessToken}` },\n    });\n    const userInfo = await userInfoResponse.json();\n    return {\n      type: 'success',\n      ...logInResult,\n      user: {\n        id: userInfo.id,\n        name: userInfo.name,\n        givenName: userInfo.given_name,\n        familyName: userInfo.family_name,\n        photoUrl: userInfo.picture,\n        email: userInfo.email,\n      },\n    };\n  } catch (error) {\n    if (error.message.toLowerCase().indexOf('user cancelled') > -1) {\n      return { type: 'cancel' };\n    }\n    throw error;\n  }\n}\n\nexport async function logOutAsync({ accessToken, clientId }): Promise<any> {\n  const config = {\n    issuer: 'https://accounts.google.com',\n    clientId,\n  };\n\n  return await AppAuth.revokeAsync(config, {\n    token: accessToken,\n    isClientIdProvided: !!clientId,\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}