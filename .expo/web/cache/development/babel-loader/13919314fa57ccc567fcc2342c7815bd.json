{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport * as AppAuth from 'expo-app-auth';\nimport { CodedError } from '@unimodules/core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Constants from 'expo-constants';\nvar isInExpo = Constants.appOwnership === 'expo';\n\nfunction getPlatformGUID(config) {\n  var {\n    clientId\n  } = config;\n  var iosClientId = Constants.appOwnership === 'standalone' ? config.iosStandaloneAppClientId : config.iosClientId;\n  var androidClientId = isInExpo ? config.androidClientId : config.androidStandaloneAppClientId;\n  var platformClientId = Platform.select({\n    ios: iosClientId,\n    android: androidClientId,\n    default: config.clientId\n  }) || clientId;\n\n  if (typeof iosClientId === 'string' && typeof androidClientId === 'string' && iosClientId === androidClientId) {\n    throw new CodedError('ERR_GOOGLE_CONFIG', 'Keys for Android and iOS cannot be the same value. Ensure you are linking the client IDs matching the given platforms in the Google APIs console: https://console.developers.google.com/apis/credentials');\n  }\n\n  var guid = guidFromClientId(platformClientId);\n  return guid;\n}\n\nvar PROJECT_NUMBER_LENGTH = 11;\nvar PROJECT_ID_LENGTH = 32;\n\nfunction isValidGUID(guid) {\n  var components = guid.split('-');\n\n  if (components.length !== 2) {\n    return {\n      isValid: false,\n      reason: \"`\".concat(guid, \"` must be a string of numbers and an alphanumeric string \").concat(PROJECT_ID_LENGTH, \" characters long, joined with a hyphen.\")\n    };\n  }\n\n  var projectNumber = components[0];\n  var projectId = components[1];\n\n  if (isNaN(+projectNumber)) {\n    var hashedProjectId = Array(PROJECT_ID_LENGTH).fill('x');\n    return {\n      isValid: false,\n      reason: \"`\".concat(projectNumber, \"-\").concat(hashedProjectId, \"` project number must be a string of numbers.\")\n    };\n  }\n\n  if (!projectId.match('^[a-zA-Z0-9]+$')) {\n    var hashedProjectNumber = Array(projectNumber.length).fill('x');\n    return {\n      isValid: false,\n      reason: \"`\".concat(hashedProjectNumber, \"-\").concat(projectId, \"` project ID must be an alphanumeric string \").concat(PROJECT_ID_LENGTH, \" characters long.\")\n    };\n  }\n\n  return {\n    isValid: true\n  };\n}\n\nfunction guidFromClientId(clientId) {\n  var clientIdComponents = clientId.split('.').filter(component => component.includes('-'));\n  var guid = clientIdComponents[0];\n  var {\n    isValid,\n    reason\n  } = isValidGUID(guid);\n\n  if (!isValid) {\n    throw new CodedError('ERR_GOOGLE_GUID', reason + ' Please ensure you copied the client ID correctly.');\n  }\n\n  return guid;\n}\n\nexport function logInAsync(_x) {\n  return _logInAsync.apply(this, arguments);\n}\n\nfunction _logInAsync() {\n  _logInAsync = _asyncToGenerator(function* (config) {\n    if (config.behavior !== undefined) {\n      console.warn(\"Deprecated: Native Google Sign-In has been moved to Expo.GoogleSignIn ('expo-google-sign-in') Falling back to `web` behavior. `behavior` deprecated in SDK 34\");\n    }\n\n    if (config.webClientId !== undefined) {\n      console.warn('Deprecated: You will need to use expo-google-sign-in to do server side authentication outside of the Expo client');\n    }\n\n    var userDefinedScopes = config.scopes || [];\n    var requiredScopes = [...userDefinedScopes, 'profile', 'email', 'openid'];\n    var scopes = [...new Set(requiredScopes)];\n    var guid = getPlatformGUID(config);\n    var clientId = \"\".concat(guid, \".apps.googleusercontent.com\");\n    var reverseClientId = \"com.googleusercontent.apps.\".concat(guid);\n    var redirectUrl;\n\n    if (!isInExpo) {\n      redirectUrl = config.redirectUrl || \"\".concat(reverseClientId, \":/oauth2redirect/google\");\n    }\n\n    try {\n      var logInResult = yield AppAuth.authAsync({\n        issuer: 'https://accounts.google.com',\n        scopes,\n        redirectUrl,\n        clientId\n      });\n      var userInfoResponse = yield fetch('https://www.googleapis.com/userinfo/v2/me', {\n        headers: {\n          Authorization: \"Bearer \".concat(logInResult.accessToken)\n        }\n      });\n      var userInfo = yield userInfoResponse.json();\n      return {\n        type: 'success',\n        accessToken: logInResult.accessToken,\n        idToken: logInResult.idToken,\n        refreshToken: logInResult.refreshToken,\n        user: {\n          id: userInfo.id,\n          name: userInfo.name,\n          givenName: userInfo.given_name,\n          familyName: userInfo.family_name,\n          photoUrl: userInfo.picture,\n          email: userInfo.email\n        }\n      };\n    } catch (error) {\n      if (error.message.toLowerCase().indexOf('user cancelled') > -1) {\n        return {\n          type: 'cancel'\n        };\n      }\n\n      throw error;\n    }\n  });\n  return _logInAsync.apply(this, arguments);\n}\n\nexport function logOutAsync(_x2) {\n  return _logOutAsync.apply(this, arguments);\n}\n\nfunction _logOutAsync() {\n  _logOutAsync = _asyncToGenerator(function* (_ref) {\n    var {\n      accessToken\n    } = _ref,\n        inputConfig = _objectWithoutProperties(_ref, [\"accessToken\"]);\n\n    var guid = getPlatformGUID(inputConfig);\n    var clientId = \"\".concat(guid, \".apps.googleusercontent.com\");\n    var config = {\n      issuer: 'https://accounts.google.com',\n      clientId\n    };\n    return yield AppAuth.revokeAsync(config, {\n      token: accessToken,\n      isClientIdProvided: !!clientId\n    });\n  });\n  return _logOutAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/Google.ts"],"names":[],"mappings":"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","sourcesContent":["import * as AppAuth from 'expo-app-auth';\nimport { CodedError } from '@unimodules/core';\nimport { Platform } from 'react-native';\nimport Constants from 'expo-constants';\n\nconst isInExpo = Constants.appOwnership === 'expo';\nexport type GoogleLogInConfig = {\n  androidClientId?: string;\n  iosClientId?: string;\n  androidStandaloneAppClientId?: string;\n  iosStandaloneAppClientId?: string;\n  /** Deprecated: You will need to use expo-google-sign-in to do server side authentication outside of the Expo client */\n  webClientId?: string;\n  /**\n   * System authentication is very different from web auth.\n   * All system functionality has been moved to expo-google-sign-in\n   */\n  behavior?: 'system' | 'web';\n  scopes?: string[];\n  /**\n   * Optionally you can define your own redirect URL.\n   * If this isn't defined then it will be infered from the correct client ID.\n   */\n  redirectUrl?: string;\n  /* If no other client IDs are defined this will be used. */\n  clientId: string;\n};\n\nexport type GoogleUser = {\n  id?: string;\n  name?: string;\n  givenName?: string;\n  familyName?: string;\n  photoUrl?: string;\n  email?: string;\n};\n\nexport type LogInResult =\n  | {\n      type: 'cancel';\n    }\n  | {\n      type: 'success';\n      accessToken: string | null;\n      idToken: string | null;\n      refreshToken: string | null;\n      user: GoogleUser;\n    };\n\nfunction getPlatformGUID(config: GoogleLogInConfig) {\n  const { clientId } = config;\n\n  const iosClientId =\n    Constants.appOwnership === 'standalone' ? config.iosStandaloneAppClientId : config.iosClientId;\n  const androidClientId = isInExpo ? config.androidClientId : config.androidStandaloneAppClientId;\n\n  const platformClientId =\n    Platform.select({\n      ios: iosClientId,\n      android: androidClientId,\n      default: config.clientId,\n    }) || clientId;\n\n  if (\n    typeof iosClientId === 'string' &&\n    typeof androidClientId === 'string' &&\n    iosClientId === androidClientId\n  ) {\n    throw new CodedError(\n      'ERR_GOOGLE_CONFIG',\n      'Keys for Android and iOS cannot be the same value. Ensure you are linking the client IDs matching the given platforms in the Google APIs console: https://console.developers.google.com/apis/credentials'\n    );\n  }\n\n  const guid = guidFromClientId(platformClientId);\n  return guid;\n}\n\n// TODO: Bacon: ensure this is valid for all cases.\nconst PROJECT_NUMBER_LENGTH = 11;\n\nconst PROJECT_ID_LENGTH = 32;\n\nfunction isValidGUID(guid: string) {\n  const components = guid.split('-');\n  if (components.length !== 2) {\n    return {\n      isValid: false,\n      reason: `\\`${guid}\\` must be a string of numbers and an alphanumeric string ${PROJECT_ID_LENGTH} characters long, joined with a hyphen.`,\n    };\n  }\n  const projectNumber = components[0];\n  const projectId = components[1];\n  if (isNaN(+projectNumber)) {\n    const hashedProjectId = Array(PROJECT_ID_LENGTH).fill('x');\n    return {\n      isValid: false,\n      reason: `\\`${projectNumber}-${hashedProjectId}\\` project number must be a string of numbers.`,\n    };\n  }\n  if (!projectId.match('^[a-zA-Z0-9]+$')) {\n    const hashedProjectNumber = Array(projectNumber.length).fill('x');\n    return {\n      isValid: false,\n      reason: `\\`${hashedProjectNumber}-${projectId}\\` project ID must be an alphanumeric string ${PROJECT_ID_LENGTH} characters long.`,\n    };\n  }\n\n  return { isValid: true };\n}\n\nfunction guidFromClientId(clientId: string): string {\n  const clientIdComponents = clientId.split('.').filter(component => component.includes('-'));\n\n  const guid = clientIdComponents[0];\n  const { isValid, reason } = isValidGUID(guid);\n  if (!isValid) {\n    throw new CodedError(\n      'ERR_GOOGLE_GUID',\n      reason + ' Please ensure you copied the client ID correctly.'\n    );\n  }\n\n  return guid;\n}\n\nexport async function logInAsync(config: GoogleLogInConfig): Promise<LogInResult> {\n  if (config.behavior !== undefined) {\n    console.warn(\n      \"Deprecated: Native Google Sign-In has been moved to Expo.GoogleSignIn ('expo-google-sign-in') Falling back to `web` behavior. `behavior` deprecated in SDK 34\"\n    );\n  }\n\n  if (config.webClientId !== undefined) {\n    console.warn(\n      'Deprecated: You will need to use expo-google-sign-in to do server side authentication outside of the Expo client'\n    );\n  }\n\n  const userDefinedScopes = config.scopes || [];\n  /* Add the required scopes for returning profile data. */\n  const requiredScopes = [...userDefinedScopes, 'profile', 'email', 'openid'];\n  /* Remove duplicates */\n  const scopes = [...new Set(requiredScopes)];\n\n  const guid = getPlatformGUID(config);\n\n  const clientId = `${guid}.apps.googleusercontent.com`;\n  const reverseClientId = `com.googleusercontent.apps.${guid}`;\n  let redirectUrl;\n  if (!isInExpo) {\n    redirectUrl = config.redirectUrl || `${reverseClientId}:/oauth2redirect/google`;\n  }\n  try {\n    const logInResult = await AppAuth.authAsync({\n      issuer: 'https://accounts.google.com',\n      scopes,\n      redirectUrl,\n      clientId,\n    });\n\n    // Web login only returns an accessToken so use it to fetch the same info as the native login\n    // does.\n    const userInfoResponse = await fetch('https://www.googleapis.com/userinfo/v2/me', {\n      headers: { Authorization: `Bearer ${logInResult.accessToken}` },\n    });\n    const userInfo = await userInfoResponse.json();\n\n    return {\n      type: 'success',\n      accessToken: logInResult.accessToken,\n      idToken: logInResult.idToken,\n      refreshToken: logInResult.refreshToken,\n      user: {\n        id: userInfo.id,\n        name: userInfo.name,\n        givenName: userInfo.given_name,\n        familyName: userInfo.family_name,\n        photoUrl: userInfo.picture,\n        email: userInfo.email,\n      },\n    };\n  } catch (error) {\n    if (error.message.toLowerCase().indexOf('user cancelled') > -1) {\n      return { type: 'cancel' };\n    }\n    throw error;\n  }\n}\n\nexport async function logOutAsync({\n  accessToken,\n  ...inputConfig\n}: GoogleLogInConfig & { accessToken: string }): Promise<any> {\n  const guid = getPlatformGUID(inputConfig);\n\n  const clientId = `${guid}.apps.googleusercontent.com`;\n\n  const config = {\n    issuer: 'https://accounts.google.com',\n    clientId,\n  };\n\n  return await AppAuth.revokeAsync(config, {\n    token: accessToken,\n    isClientIdProvided: !!clientId,\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}