{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { UnavailabilityError } from '@unimodules/core';\nimport ExpoFaceDetector from \"./ExpoFaceDetector\";\nexport function detectFacesAsync(_x) {\n  return _detectFacesAsync.apply(this, arguments);\n}\n\nfunction _detectFacesAsync() {\n  _detectFacesAsync = _asyncToGenerator(function* (uri) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!ExpoFaceDetector.detectFaces) {\n      throw new UnavailabilityError('expo-face-detector', 'detectFaces');\n    }\n\n    return yield ExpoFaceDetector.detectFaces(_objectSpread({}, options, {\n      uri\n    }));\n  });\n  return _detectFacesAsync.apply(this, arguments);\n}\n\nexport var Constants = {\n  Mode: ExpoFaceDetector.Mode,\n  Landmarks: ExpoFaceDetector.Landmarks,\n  Classifications: ExpoFaceDetector.Classifications\n};","map":{"version":3,"sources":["../src/FaceDetector.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,SAAS,mBAAT,QAAoC,kBAApC;AAEA,OAAO,gBAAP;AAoDA,gBAAsB,gBAAtB;AAAA;AAAA;;;wCAAO,WACL,GADK,EAEyB;AAAA,QAA9B,OAA8B,uEAAF,EAAE;;AAE9B,QAAI,CAAC,gBAAgB,CAAC,WAAtB,EAAmC;AACjC,YAAM,IAAI,mBAAJ,CAAwB,oBAAxB,EAA8C,aAA9C,CAAN;AACD;;AACD,iBAAa,gBAAgB,CAAC,WAAjB,mBAAkC,OAAlC;AAA2C,MAAA;AAA3C,OAAb;AACD,G;;;;AAED,OAAO,IAAM,SAAS,GAAG;AACvB,EAAA,IAAI,EAAE,gBAAgB,CAAC,IADA;AAEvB,EAAA,SAAS,EAAE,gBAAgB,CAAC,SAFL;AAGvB,EAAA,eAAe,EAAE,gBAAgB,CAAC;AAHX,CAAlB","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\n\nimport ExpoFaceDetector from './ExpoFaceDetector';\n\ntype Point = { x: number; y: number };\n\nexport type FaceFeature = {\n  bounds: {\n    size: {\n      width: number;\n      height: number;\n    };\n    origin: Point;\n  };\n  smilingProbability?: number;\n  leftEarPosition?: Point;\n  rightEarPosition?: Point;\n  leftEyePosition?: Point;\n  leftEyeOpenProbability?: number;\n  rightEyePosition?: Point;\n  rightEyeOpenProbability?: number;\n  leftCheekPosition?: Point;\n  rightCheekPosition?: Point;\n  leftMouthPosition?: Point;\n  mouthPosition?: Point;\n  rightMouthPosition?: Point;\n  bottomMouthPosition?: Point;\n  noseBasePosition?: Point;\n  yawAngle?: number;\n  rollAngle?: number;\n  faceID?: number;\n};\n\ntype ValuesOf<T extends any[]> = T[number];\n\nexport type FaceDetectorMode = string[];\n\nexport type FaceDetectorLandmarks = ValuesOf<typeof ExpoFaceDetector.Landmarks>;\n\nexport type FaceDetectorClassifications = ValuesOf<typeof ExpoFaceDetector.Classifications>;\n\nexport interface Image {\n  uri: string;\n  width: number;\n  height: number;\n  orientation: number;\n}\n\nexport type DetectionOptions = {\n  mode?: FaceDetectorMode;\n  detectLandmarks?: FaceDetectorLandmarks;\n  runClassifications?: FaceDetectorClassifications;\n};\n\nexport async function detectFacesAsync(\n  uri: string,\n  options: DetectionOptions = {}\n): Promise<{ faces: FaceFeature[], image: Image }> {\n  if (!ExpoFaceDetector.detectFaces) {\n    throw new UnavailabilityError('expo-face-detector', 'detectFaces');\n  }\n  return await ExpoFaceDetector.detectFaces({ ...options, uri });\n}\n\nexport const Constants = {\n  Mode: ExpoFaceDetector.Mode,\n  Landmarks: ExpoFaceDetector.Landmarks,\n  Classifications: ExpoFaceDetector.Classifications,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}