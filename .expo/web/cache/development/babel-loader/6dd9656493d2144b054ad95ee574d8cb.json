{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jshukurov\\\\Desktop\\\\Poppi Over The Edge\\\\Poppi-Over-the-Edge-master\\\\node_modules\\\\react-native-gesture-handler\\\\touchables\\\\GenericTouchable.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { State, BaseButton } from \"../GestureHandler\";\nimport PropTypes from 'prop-types';\nexport var TOUCHABLE_STATE = {\n  UNDETERMINED: 0,\n  BEGAN: 1,\n  MOVED_OUTSIDE: 2\n};\nvar PublicPropTypes = {\n  accessible: PropTypes.bool,\n  accessibilityLabel: PropTypes.node,\n  accessibilityHint: PropTypes.string,\n  hitSlop: PropTypes.shape({\n    top: PropTypes.number,\n    left: PropTypes.number,\n    bottom: PropTypes.number,\n    right: PropTypes.number\n  }),\n  disabled: PropTypes.bool,\n  onPress: PropTypes.func,\n  onPressIn: PropTypes.func,\n  onPressOut: PropTypes.func,\n  onLayout: PropTypes.func,\n  onLongPress: PropTypes.func,\n  nativeID: PropTypes.string,\n  testID: PropTypes.string,\n  delayPressIn: PropTypes.number,\n  delayPressOut: PropTypes.number,\n  delayLongPress: PropTypes.number\n};\nvar InternalPropTypes = {\n  extraButtonProps: PropTypes.object,\n  onStateChange: PropTypes.func\n};\nexport default class GenericTouchable extends Component {\n  constructor() {\n    super(...arguments);\n    this.longPressDetected = false;\n    this.pointerInside = true;\n    this.STATE = TOUCHABLE_STATE.UNDETERMINED;\n\n    this.handlePressIn = () => {\n      if (this.props.delayPressIn) {\n        this.pressInTimeout = setTimeout(() => {\n          this.moveToState(TOUCHABLE_STATE.BEGAN);\n          this.pressInTimeout = null;\n        }, this.props.delayPressIn);\n      } else {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n      }\n\n      if (this.props.onLongPress) {\n        var time = (this.props.delayPressIn || 0) + (this.props.delayLongPress || 0);\n        this.longPressTimeout = setTimeout(this.onLongPressDetected, time);\n      }\n    };\n\n    this.handleMoveOutside = () => {\n      if (this.props.delayPressOut) {\n        this.pressOutTimeout = this.pressOutTimeout || setTimeout(() => {\n          this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n          this.pressOutTimeout = null;\n        }, this.props.delayPressOut);\n      } else {\n        this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n      }\n    };\n\n    this.handleGoToUndetermined = () => {\n      clearTimeout(this.pressOutTimeout);\n\n      if (this.props.delayPressOut) {\n        this.pressOutTimeout = setTimeout(() => {\n          if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n            this.moveToState(TOUCHABLE_STATE.BEGAN);\n          }\n\n          this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n          this.pressOutTimeout = null;\n        }, this.props.delayPressOut);\n      } else {\n        if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n          this.moveToState(TOUCHABLE_STATE.BEGAN);\n        }\n\n        this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n      }\n    };\n\n    this.moveToState = newState => {\n      if (newState === this.STATE) {\n        return;\n      }\n\n      if (newState === TOUCHABLE_STATE.BEGAN) {\n        this.props.onPressIn && this.props.onPressIn();\n      } else if (newState === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n        this.props.onPressOut && this.props.onPressOut();\n      } else if (newState === TOUCHABLE_STATE.UNDETERMINED) {\n        this.reset();\n\n        if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n          this.props.onPressOut && this.props.onPressOut();\n        }\n      }\n\n      this.props.onStateChange && this.props.onStateChange(this.STATE, newState);\n      this.STATE = newState;\n    };\n\n    this.onGestureEvent = (_ref) => {\n      var {\n        nativeEvent: {\n          pointerInside\n        }\n      } = _ref;\n\n      if (this.pointerInside !== pointerInside) {\n        if (pointerInside) {\n          this.onMoveIn();\n        } else {\n          this.onMoveOut();\n        }\n      }\n\n      this.pointerInside = pointerInside;\n    };\n\n    this.onHandlerStateChange = (_ref2) => {\n      var {\n        nativeEvent\n      } = _ref2;\n      var {\n        state\n      } = nativeEvent;\n\n      if (state === State.CANCELLED || state === State.FAILED) {\n        this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n      } else if (state === (Platform.OS === 'ios' ? State.ACTIVE : State.BEGAN) && this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n        this.handlePressIn();\n      } else if (state === State.END) {\n        var shouldCallOnPress = !this.longPressDetected && this.STATE !== TOUCHABLE_STATE.MOVED_OUTSIDE && this.pressOutTimeout === null;\n        this.handleGoToUndetermined();\n\n        if (shouldCallOnPress) {\n          this.props.onPress && this.props.onPress();\n        }\n      }\n    };\n\n    this.onLongPressDetected = () => {\n      this.longPressDetected = true;\n      this.props.onLongPress();\n    };\n\n    this.onMoveIn = () => {\n      if (this.STATE === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n      }\n    };\n\n    this.onMoveOut = () => {\n      clearTimeout(this.longPressTimeout);\n      this.longPressTimeout = null;\n\n      if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n        this.handleMoveOutside();\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.reset();\n  }\n\n  reset() {\n    this.longPressDetected = false;\n    this.pointerInside = true;\n    clearTimeout(this.pressInTimeout);\n    clearTimeout(this.pressOutTimeout);\n    clearTimeout(this.longPressTimeout);\n    this.pressOutTimeout = null;\n    this.longPressTimeout = null;\n    this.pressInTimeout = null;\n  }\n\n  componentWillUnmount() {\n    this.reset();\n  }\n\n  render() {\n    var coreProps = {\n      accessible: this.props.accessible !== false,\n      accessibilityLabel: this.props.accessibilityLabel,\n      accessibilityHint: this.props.accessibilityHint,\n      accessibilityComponentType: this.props.accessibilityComponentType,\n      accessibilityRole: this.props.accessibilityRole,\n      accessibilityStates: this.props.accessibilityStates,\n      accessibilityTraits: this.props.accessibilityTraits,\n      nativeID: this.props.nativeID,\n      testID: this.props.testID,\n      onLayout: this.props.onLayout,\n      hitSlop: this.props.hitSlop\n    };\n    return React.createElement(BaseButton, _extends({\n      onHandlerStateChange: this.props.disabled ? null : this.onHandlerStateChange,\n      onGestureEvent: this.onGestureEvent,\n      hitSlop: this.props.hitSlop\n    }, this.props.extraButtonProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 7\n      }\n    }), React.createElement(Animated.View, _extends({}, coreProps, {\n      style: this.props.style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }\n    }), this.props.children));\n  }\n\n}\nGenericTouchable.publicPropTypes = PublicPropTypes;\nGenericTouchable.internalPropTypes = InternalPropTypes;\nGenericTouchable.propTypes = _objectSpread({}, InternalPropTypes, {}, PublicPropTypes);\nGenericTouchable.defaultProps = {\n  delayLongPress: 600,\n  extraButtonProps: {\n    rippleColor: 'transparent'\n  }\n};","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/react-native-gesture-handler/touchables/GenericTouchable.js"],"names":["React","Component","State","BaseButton","PropTypes","TOUCHABLE_STATE","UNDETERMINED","BEGAN","MOVED_OUTSIDE","PublicPropTypes","accessible","bool","accessibilityLabel","node","accessibilityHint","string","hitSlop","shape","top","number","left","bottom","right","disabled","onPress","func","onPressIn","onPressOut","onLayout","onLongPress","nativeID","testID","delayPressIn","delayPressOut","delayLongPress","InternalPropTypes","extraButtonProps","object","onStateChange","GenericTouchable","longPressDetected","pointerInside","STATE","handlePressIn","props","pressInTimeout","setTimeout","moveToState","time","longPressTimeout","onLongPressDetected","handleMoveOutside","pressOutTimeout","handleGoToUndetermined","clearTimeout","newState","reset","onGestureEvent","nativeEvent","onMoveIn","onMoveOut","onHandlerStateChange","state","CANCELLED","FAILED","Platform","OS","ACTIVE","END","shouldCallOnPress","componentDidMount","componentWillUnmount","render","coreProps","accessibilityComponentType","accessibilityRole","accessibilityStates","accessibilityTraits","style","children","publicPropTypes","internalPropTypes","propTypes","defaultProps","rippleColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Animated, Platform } from 'react-native';\nimport { State, BaseButton } from '../GestureHandler';\nimport PropTypes from 'prop-types';\n\n/**\n * Each touchable is a states' machine which preforms transitions.\n * On very beginning (and on the very end or recognition) touchable is\n * UNDETERMINED. Then it moves to BEGAN. If touchable recognizes that finger\n * travel outside it transits to special MOVED_OUTSIDE state. Gesture recognition\n * finishes in UNDETERMINED state.\n */\nexport const TOUCHABLE_STATE = {\n  UNDETERMINED: 0,\n  BEGAN: 1,\n  MOVED_OUTSIDE: 2,\n};\n\nconst PublicPropTypes = {\n  // Decided to drop not used fields from RN's implementation.\n  // e.g. onBlur and onFocus as well as deprecated props.\n  accessible: PropTypes.bool,\n  accessibilityLabel: PropTypes.node,\n  accessibilityHint: PropTypes.string,\n  hitSlop: PropTypes.shape({\n    top: PropTypes.number,\n    left: PropTypes.number,\n    bottom: PropTypes.number,\n    right: PropTypes.number,\n  }),\n  disabled: PropTypes.bool,\n  onPress: PropTypes.func,\n  onPressIn: PropTypes.func,\n  onPressOut: PropTypes.func,\n  onLayout: PropTypes.func,\n  onLongPress: PropTypes.func,\n  nativeID: PropTypes.string,\n  testID: PropTypes.string,\n  delayPressIn: PropTypes.number,\n  delayPressOut: PropTypes.number,\n  delayLongPress: PropTypes.number,\n};\n\nconst InternalPropTypes = {\n  extraButtonProps: PropTypes.object,\n  onStateChange: PropTypes.func,\n};\n\n/**\n * GenericTouchable is not intented to be used as it.\n * Should be treated as a source for the rest of touchables\n */\n\nexport default class GenericTouchable extends Component {\n  static publicPropTypes = PublicPropTypes;\n  static internalPropTypes = InternalPropTypes;\n\n  // The prop type collections have to be outside of the class, as metro\n  // at this time does not compile `this.foo` correctly if HMR is enabled.\n  // https://github.com/kmagiera/react-native-gesture-handler/pull/406#issuecomment-453779977\n  static propTypes = {\n    ...InternalPropTypes,\n    ...PublicPropTypes,\n  };\n\n  static defaultProps = {\n    delayLongPress: 600,\n    extraButtonProps: {\n      rippleColor: 'transparent',\n    },\n  };\n\n  // timeout handlers\n  pressInTimeout;\n  pressOutTimeout;\n  longPressTimeout;\n\n  // This flag is required since recognition of longPress implies not-invoking onPress\n  longPressDetected = false;\n\n  pointerInside = true;\n\n  // State of touchable\n  STATE = TOUCHABLE_STATE.UNDETERMINED;\n\n  // handlePressIn in called on first touch on traveling inside component.\n  // Handles state transition with delay.\n  handlePressIn = () => {\n    if (this.props.delayPressIn) {\n      this.pressInTimeout = setTimeout(() => {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n        this.pressInTimeout = null;\n      }, this.props.delayPressIn);\n    } else {\n      this.moveToState(TOUCHABLE_STATE.BEGAN);\n    }\n    if (this.props.onLongPress) {\n      const time =\n        (this.props.delayPressIn || 0) + (this.props.delayLongPress || 0);\n      this.longPressTimeout = setTimeout(this.onLongPressDetected, time);\n    }\n  };\n  // handleMoveOutside in called on traveling outside component.\n  // Handles state transition with delay.\n  handleMoveOutside = () => {\n    if (this.props.delayPressOut) {\n      this.pressOutTimeout =\n        this.pressOutTimeout ||\n        setTimeout(() => {\n          this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n          this.pressOutTimeout = null;\n        }, this.props.delayPressOut);\n    } else {\n      this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n    }\n  };\n\n  // handleGoToUndetermined transits to UNDETERMINED state with proper delay\n  handleGoToUndetermined = () => {\n    clearTimeout(this.pressOutTimeout);\n    if (this.props.delayPressOut) {\n      this.pressOutTimeout = setTimeout(() => {\n        if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n          this.moveToState(TOUCHABLE_STATE.BEGAN);\n        }\n        this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n        this.pressOutTimeout = null;\n      }, this.props.delayPressOut);\n    } else {\n      if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n      }\n      this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n    }\n  };\n\n  componentDidMount() {\n    this.reset();\n  }\n  // reset timeout to prevent memory leaks.\n  reset() {\n    this.longPressDetected = false;\n    this.pointerInside = true;\n    clearTimeout(this.pressInTimeout);\n    clearTimeout(this.pressOutTimeout);\n    clearTimeout(this.longPressTimeout);\n    this.pressOutTimeout = null;\n    this.longPressTimeout = null;\n    this.pressInTimeout = null;\n  }\n\n  // All states' transitions are defined here.\n  moveToState = newState => {\n    if (newState === this.STATE) {\n      // Ignore dummy transitions\n      return;\n    }\n    if (newState === TOUCHABLE_STATE.BEGAN) {\n      // First touch and moving inside\n      this.props.onPressIn && this.props.onPressIn();\n    } else if (newState === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n      // Moving outside\n      this.props.onPressOut && this.props.onPressOut();\n    } else if (newState === TOUCHABLE_STATE.UNDETERMINED) {\n      // Need to reset each time on transition to UNDETERMINED\n      this.reset();\n      if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n        // ... and if it happens inside button.\n        this.props.onPressOut && this.props.onPressOut();\n      }\n    }\n    // Finally call lister (used by subclasses)\n    this.props.onStateChange && this.props.onStateChange(this.STATE, newState);\n    // ... and make transition.\n    this.STATE = newState;\n  };\n\n  onGestureEvent = ({ nativeEvent: { pointerInside } }) => {\n    if (this.pointerInside !== pointerInside) {\n      if (pointerInside) {\n        this.onMoveIn();\n      } else {\n        this.onMoveOut();\n      }\n    }\n    this.pointerInside = pointerInside;\n  };\n\n  onHandlerStateChange = ({ nativeEvent }) => {\n    const { state } = nativeEvent;\n    if (state === State.CANCELLED || state === State.FAILED) {\n      // Need to handle case with external cancellation (e.g. by ScrollView)\n      this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n    } else if (\n      // This platform check is an implication of slightly different behavior of handlers on different platform.\n      // And Android \"Active\" state is achieving on first move of a finger, not on press in.\n      // On iOS event on \"Began\" is not delivered.\n      state === (Platform.OS === 'ios' ? State.ACTIVE : State.BEGAN) &&\n      this.STATE === TOUCHABLE_STATE.UNDETERMINED\n    ) {\n      // Moving inside requires\n      this.handlePressIn();\n    } else if (state === State.END) {\n      const shouldCallOnPress =\n        !this.longPressDetected &&\n        this.STATE !== TOUCHABLE_STATE.MOVED_OUTSIDE &&\n        this.pressOutTimeout === null;\n      this.handleGoToUndetermined();\n      if (shouldCallOnPress) {\n        // Calls only inside component whether no long press was called previously\n        this.props.onPress && this.props.onPress();\n      }\n    }\n  };\n\n  onLongPressDetected = () => {\n    this.longPressDetected = true;\n    this.props.onLongPress();\n  };\n\n  componentWillUnmount() {\n    // to prevent memory leaks\n    this.reset();\n  }\n\n  onMoveIn = () => {\n    if (this.STATE === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n      // This call is not throttles with delays (like in RN's implementation).\n      this.moveToState(TOUCHABLE_STATE.BEGAN);\n    }\n  };\n\n  onMoveOut = () => {\n    // long press shouldn't be longer detected\n    clearTimeout(this.longPressTimeout);\n    this.longPressTimeout = null;\n    if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n      this.handleMoveOutside();\n    }\n  };\n\n  render() {\n    const coreProps = {\n      accessible: this.props.accessible !== false,\n      accessibilityLabel: this.props.accessibilityLabel,\n      accessibilityHint: this.props.accessibilityHint,\n      accessibilityComponentType: this.props.accessibilityComponentType,\n      accessibilityRole: this.props.accessibilityRole,\n      accessibilityStates: this.props.accessibilityStates,\n      accessibilityTraits: this.props.accessibilityTraits,\n      nativeID: this.props.nativeID,\n      testID: this.props.testID,\n      onLayout: this.props.onLayout,\n      hitSlop: this.props.hitSlop,\n    };\n\n    return (\n      <BaseButton\n        onHandlerStateChange={this.props.disabled ? null : this.onHandlerStateChange}\n        onGestureEvent={this.onGestureEvent}\n        hitSlop={this.props.hitSlop}\n        {...this.props.extraButtonProps}>\n        <Animated.View {...coreProps} style={this.props.style}>\n          {this.props.children}\n        </Animated.View>\n      </BaseButton>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}