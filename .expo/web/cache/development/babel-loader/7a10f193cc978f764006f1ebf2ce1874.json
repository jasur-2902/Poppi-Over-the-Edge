{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { NativeModulesProxy } from 'expo-core';\nvar FaceDetectorModule = NativeModulesProxy.ExpoFaceDetector;\nexport function detectFacesAsync(uri, options) {\n  return FaceDetectorModule.detectFaces(_objectSpread(_objectSpread({}, options), {}, {\n    uri\n  }));\n}\nexport var Constants = {\n  Mode: FaceDetectorModule.Mode,\n  Landmarks: FaceDetectorModule.Landmarks,\n  Classifications: FaceDetectorModule.Classifications\n};","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/expo-face-detector/src/FaceDetector.js"],"names":["NativeModulesProxy","FaceDetectorModule","ExpoFaceDetector","detectFacesAsync","uri","options","detectFaces","Constants","Mode","Landmarks","Classifications"],"mappings":";;;;;;AAEA,SAASA,kBAAT,QAAmC,WAAnC;AAEA,IAAMC,kBAA0B,GAAGD,kBAAkB,CAACE,gBAAtD;AAoCA,OAAO,SAASC,gBAAT,CACLC,GADK,EAELC,OAFK,EAGwB;AAC7B,SAAOJ,kBAAkB,CAACK,WAAnB,iCAAoCD,OAApC;AAA6CD,IAAAA;AAA7C,KAAP;AACD;AAED,OAAO,IAAMG,SAAS,GAAG;AACvBC,EAAAA,IAAI,EAAEP,kBAAkB,CAACO,IADF;AAEvBC,EAAAA,SAAS,EAAER,kBAAkB,CAACQ,SAFP;AAGvBC,EAAAA,eAAe,EAAET,kBAAkB,CAACS;AAHb,CAAlB","sourcesContent":["// @flow\n\nimport { NativeModulesProxy } from 'expo-core';\n\nconst FaceDetectorModule: Object = NativeModulesProxy.ExpoFaceDetector;\n\ntype Point = { x: number, y: number };\n\nexport type FaceFeature = {\n  bounds: {\n    size: {\n      width: number,\n      height: number,\n    },\n    origin: Point,\n  },\n  smilingProbability?: number,\n  leftEarPosition?: Point,\n  rightEarPosition?: Point,\n  leftEyePosition?: Point,\n  leftEyeOpenProbability?: number,\n  rightEyePosition?: Point,\n  rightEyeOpenProbability?: number,\n  leftCheekPosition?: Point,\n  rightCheekPosition?: Point,\n  leftMouthPosition?: Point,\n  mouthPosition?: Point,\n  rightMouthPosition?: Point,\n  bottomMouthPosition?: Point,\n  noseBasePosition?: Point,\n  yawAngle?: number,\n  rollAngle?: number,\n};\n\ntype DetectionOptions = {\n  mode?: $Keys<typeof FaceDetectorModule.Mode>,\n  detectLandmarks?: $Keys<typeof FaceDetectorModule.Landmarks>,\n  runClassifications?: $Keys<typeof FaceDetectorModule.Classifications>,\n};\n\nexport function detectFacesAsync(\n  uri: string,\n  options: ?DetectionOptions\n): Promise<Array<FaceFeature>> {\n  return FaceDetectorModule.detectFaces({ ...options, uri });\n}\n\nexport const Constants = {\n  Mode: FaceDetectorModule.Mode,\n  Landmarks: FaceDetectorModule.Landmarks,\n  Classifications: FaceDetectorModule.Classifications,\n};\n"]},"metadata":{},"sourceType":"module"}