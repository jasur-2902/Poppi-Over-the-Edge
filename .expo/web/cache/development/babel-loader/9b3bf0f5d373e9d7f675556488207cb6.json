{"ast":null,"code":"import { lineAverage, lineCreate, linesPerpendicularToLine } from \"./Perpendicular\";\nexport class BezierPath {\n  static dot(points, graphics) {\n    var {\n      point,\n      weight\n    } = points[0];\n    graphics.arc(point[0], point[1], weight, 0, Math.PI * 2, true);\n  }\n\n  static line(points, graphics) {\n    var {\n      first,\n      second\n    } = linesPerpendicularToLine(points[0], points[1]);\n    graphics.moveTo(first[0][0], first[0][1]);\n    graphics.lineTo(second[0][0], second[0][1]);\n    graphics.lineTo(second[1][0], second[1][1]);\n    graphics.lineTo(first[0][0], first[0][1]);\n    graphics.closePath();\n  }\n\n  static quadCurve(points, graphics) {\n    var linesAB = linesPerpendicularToLine(points[0], points[1]);\n    var linesBC = linesPerpendicularToLine(points[1], points[2]);\n    var lineA = linesAB.first;\n    var lineB = lineAverage(lineCreate(), linesAB.second, linesBC.first);\n    var lineC = linesBC.second;\n    graphics.moveTo(lineA[0][0], lineA[0][1]);\n    graphics.quadraticCurveTo(lineB[0][0], lineB[0][1], lineC[0][0], lineC[0][1]);\n    graphics.lineTo(lineC[1][0], lineC[1][1]);\n    graphics.quadraticCurveTo(lineB[1][0], lineB[1][1], lineA[1][0], lineA[1][1]);\n    graphics.closePath();\n  }\n\n  static bezierCurve(points, graphics) {\n    var linesAB = linesPerpendicularToLine(points[0], points[1]);\n    var linesBC = linesPerpendicularToLine(points[1], points[2]);\n    var linesCD = linesPerpendicularToLine(points[2], points[3]);\n    var lineA = linesAB.first;\n    var lineB = lineAverage(lineCreate(), linesAB.second, linesBC.first);\n    var lineC = lineAverage(lineCreate(), linesBC.second, linesCD.first);\n    var lineD = linesCD.second;\n    graphics.moveTo(lineA[0][0], lineA[0][1]);\n    graphics.bezierCurveTo(lineB[0][0], lineB[0][1], lineC[0][0], lineC[0][1], lineD[0][0], lineD[0][1]);\n    graphics.lineTo(lineD[1][0], lineD[1][1]);\n    graphics.bezierCurveTo(lineC[1][0], lineC[1][1], lineB[1][0], lineB[1][1], lineA[1][0], lineA[1][1]);\n    graphics.closePath();\n  }\n\n}\nexport default BezierPath;","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/expo-pixi/lib/core/signature/SignatureBezierPath.js"],"names":["lineAverage","lineCreate","linesPerpendicularToLine","BezierPath","dot","points","graphics","point","weight","arc","Math","PI","line","first","second","moveTo","lineTo","closePath","quadCurve","linesAB","linesBC","lineA","lineB","lineC","quadraticCurveTo","bezierCurve","linesCD","lineD","bezierCurveTo"],"mappings":"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","sourcesContent":["//@flow\nimport { lineAverage, lineCreate, linesPerpendicularToLine } from './Perpendicular';\n\ntype DrawDriver = {\n  moveTo: (x: Float, y: Float) => any,\n  lineTo: (x: Float, y: Float) => any,\n  quadraticCurveTo: (cpX: Float, cpY: Float, toX: Float, toY: Float) => any,\n  bezierCurveTo: (cpX: Float, cpY: Float, cpX2: Float, cpY2: Float, toX: Float, toY: Float) => any,\n  arc: (\n    cx: Float,\n    cy: Float,\n    radius: Float,\n    startAngle: Float,\n    endAngle: Float,\n    anticlockwise: Bool\n  ) => any,\n  closePath: () => any,\n};\n\nexport class BezierPath {\n  static dot(points, graphics: DrawDriver) {\n    const { point, weight } = points[0];\n    graphics.arc(point[0], point[1], weight, 0, Math.PI * 2, true);\n  }\n\n  static line(points, graphics: DrawDriver) {\n    const { first, second } = linesPerpendicularToLine(points[0], points[1]);\n    graphics.moveTo(first[0][0], first[0][1]);\n    graphics.lineTo(second[0][0], second[0][1]);\n    graphics.lineTo(second[1][0], second[1][1]);\n    graphics.lineTo(first[0][0], first[0][1]);\n    graphics.closePath();\n  }\n\n  static quadCurve(points, graphics: DrawDriver) {\n    const linesAB = linesPerpendicularToLine(points[0], points[1]);\n    const linesBC = linesPerpendicularToLine(points[1], points[2]);\n\n    const lineA = linesAB.first;\n    const lineB = lineAverage(lineCreate(), linesAB.second, linesBC.first);\n    const lineC = linesBC.second;\n\n    graphics.moveTo(lineA[0][0], lineA[0][1]);\n    graphics.quadraticCurveTo(lineB[0][0], lineB[0][1], lineC[0][0], lineC[0][1]);\n    graphics.lineTo(lineC[1][0], lineC[1][1]);\n    graphics.quadraticCurveTo(lineB[1][0], lineB[1][1], lineA[1][0], lineA[1][1]);\n    graphics.closePath();\n  }\n\n  static bezierCurve(points, graphics: DrawDriver) {\n    const linesAB = linesPerpendicularToLine(points[0], points[1]);\n    const linesBC = linesPerpendicularToLine(points[1], points[2]);\n    const linesCD = linesPerpendicularToLine(points[2], points[3]);\n\n    const lineA = linesAB.first;\n    const lineB = lineAverage(lineCreate(), linesAB.second, linesBC.first);\n    const lineC = lineAverage(lineCreate(), linesBC.second, linesCD.first);\n    const lineD = linesCD.second;\n\n    graphics.moveTo(lineA[0][0], lineA[0][1]);\n    graphics.bezierCurveTo(\n      lineB[0][0],\n      lineB[0][1],\n      lineC[0][0],\n      lineC[0][1],\n      lineD[0][0],\n      lineD[0][1]\n    );\n    graphics.lineTo(lineD[1][0], lineD[1][1]);\n    graphics.bezierCurveTo(\n      lineC[1][0],\n      lineC[1][1],\n      lineB[1][0],\n      lineB[1][1],\n      lineA[1][0],\n      lineA[1][1]\n    );\n    graphics.closePath();\n  }\n}\n\nexport default BezierPath;\n"]},"metadata":{},"sourceType":"module"}