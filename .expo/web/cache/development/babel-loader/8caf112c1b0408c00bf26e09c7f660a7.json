{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { readAsStringAsync, EncodingType } from 'expo-file-system';\nimport { getSizeAsync } from \"./ImageUtils\";\n\nfunction base64forImageUriAsync(_x) {\n  return _base64forImageUriAsync.apply(this, arguments);\n}\n\nfunction _base64forImageUriAsync() {\n  _base64forImageUriAsync = _asyncToGenerator(function* (uri) {\n    var size = yield getSizeAsync(uri);\n    var data = yield readAsStringAsync(uri, {\n      encoding: EncodingType.Base64\n    });\n    return {\n      data,\n      size\n    };\n  });\n  return _base64forImageUriAsync.apply(this, arguments);\n}\n\nexport default base64forImageUriAsync;","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/expo-asset-utils/src/base64forImageUriAsync.js"],"names":["readAsStringAsync","EncodingType","getSizeAsync","base64forImageUriAsync","uri","size","data","encoding","Base64"],"mappings":";;;;AACA,SAASA,iBAAT,EAA4BC,YAA5B,QAAgD,kBAAhD;AACA,SAASC,YAAT;;SAEeC,sB;;;;;8CAAf,WAAsCC,GAAtC,EAAkE;AAChE,QAAMC,IAAI,SAASH,YAAY,CAACE,GAAD,CAA/B;AACA,QAAME,IAAI,SAASN,iBAAiB,CAACI,GAAD,EAAM;AACxCG,MAAAA,QAAQ,EAAEN,YAAY,CAACO;AADiB,KAAN,CAApC;AAGA,WAAO;AAAEF,MAAAA,IAAF;AAAQD,MAAAA;AAAR,KAAP;AACD,G;;;;AAED,eAAeF,sBAAf","sourcesContent":["// @flow\nimport { readAsStringAsync, EncodingType } from 'expo-file-system';\nimport { getSizeAsync } from './ImageUtils';\n\nasync function base64forImageUriAsync(uri: string): Promise<Data> {\n  const size = await getSizeAsync(uri);\n  const data = await readAsStringAsync(uri, {\n    encoding: EncodingType.Base64,\n  });\n  return { data, size };\n}\n\nexport default base64forImageUriAsync;\n"]},"metadata":{},"sourceType":"module"}