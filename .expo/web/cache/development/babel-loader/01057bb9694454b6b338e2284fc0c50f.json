{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { NativeModulesProxy } from '@unimodules/core';\nexport var BrightnessMode;\n\n(function (BrightnessMode) {\n  BrightnessMode[BrightnessMode[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  BrightnessMode[BrightnessMode[\"AUTOMATIC\"] = 1] = \"AUTOMATIC\";\n  BrightnessMode[BrightnessMode[\"MANUAL\"] = 2] = \"MANUAL\";\n})(BrightnessMode || (BrightnessMode = {}));\n\n;\nexport function getBrightnessAsync() {\n  return _getBrightnessAsync.apply(this, arguments);\n}\n\nfunction _getBrightnessAsync() {\n  _getBrightnessAsync = _asyncToGenerator(function* () {\n    return yield NativeModulesProxy.ExpoBrightness.getBrightnessAsync();\n  });\n  return _getBrightnessAsync.apply(this, arguments);\n}\n\nexport function setBrightnessAsync(_x) {\n  return _setBrightnessAsync.apply(this, arguments);\n}\n\nfunction _setBrightnessAsync() {\n  _setBrightnessAsync = _asyncToGenerator(function* (brightnessValue) {\n    var clampedBrightnessValue = Math.max(0, Math.min(brightnessValue, 1));\n\n    if (isNaN(clampedBrightnessValue)) {\n      throw new TypeError(\"setBrightnessAsync cannot be called with \".concat(brightnessValue));\n    }\n\n    return yield NativeModulesProxy.ExpoBrightness.setBrightnessAsync(clampedBrightnessValue);\n  });\n  return _setBrightnessAsync.apply(this, arguments);\n}\n\nexport function getSystemBrightnessAsync() {\n  return _getSystemBrightnessAsync.apply(this, arguments);\n}\n\nfunction _getSystemBrightnessAsync() {\n  _getSystemBrightnessAsync = _asyncToGenerator(function* () {\n    if (Platform.OS !== 'android') {\n      return yield getBrightnessAsync();\n    }\n\n    return yield NativeModulesProxy.ExpoBrightness.getSystemBrightnessAsync();\n  });\n  return _getSystemBrightnessAsync.apply(this, arguments);\n}\n\nexport function setSystemBrightnessAsync(_x2) {\n  return _setSystemBrightnessAsync.apply(this, arguments);\n}\n\nfunction _setSystemBrightnessAsync() {\n  _setSystemBrightnessAsync = _asyncToGenerator(function* (brightnessValue) {\n    var clampedBrightnessValue = Math.max(0, Math.min(brightnessValue, 1));\n\n    if (isNaN(clampedBrightnessValue)) {\n      throw new TypeError(\"setSystemBrightnessAsync cannot be called with \".concat(brightnessValue));\n    }\n\n    if (Platform.OS !== 'android') {\n      return yield setBrightnessAsync(clampedBrightnessValue);\n    }\n\n    return yield NativeModulesProxy.ExpoBrightness.setSystemBrightnessAsync(clampedBrightnessValue);\n  });\n  return _setSystemBrightnessAsync.apply(this, arguments);\n}\n\nexport function useSystemBrightnessAsync() {\n  return _useSystemBrightnessAsync.apply(this, arguments);\n}\n\nfunction _useSystemBrightnessAsync() {\n  _useSystemBrightnessAsync = _asyncToGenerator(function* () {\n    if (Platform.OS !== 'android') {\n      return;\n    }\n\n    return yield NativeModulesProxy.ExpoBrightness.useSystemBrightnessAsync();\n  });\n  return _useSystemBrightnessAsync.apply(this, arguments);\n}\n\nexport function isUsingSystemBrightnessAsync() {\n  return _isUsingSystemBrightnessAsync.apply(this, arguments);\n}\n\nfunction _isUsingSystemBrightnessAsync() {\n  _isUsingSystemBrightnessAsync = _asyncToGenerator(function* () {\n    if (Platform.OS !== 'android') {\n      return false;\n    }\n\n    return yield NativeModulesProxy.ExpoBrightness.isUsingSystemBrightnessAsync();\n  });\n  return _isUsingSystemBrightnessAsync.apply(this, arguments);\n}\n\nexport function getSystemBrightnessModeAsync() {\n  return _getSystemBrightnessModeAsync.apply(this, arguments);\n}\n\nfunction _getSystemBrightnessModeAsync() {\n  _getSystemBrightnessModeAsync = _asyncToGenerator(function* () {\n    if (Platform.OS !== 'android') {\n      return BrightnessMode.UNKNOWN;\n    }\n\n    return yield NativeModulesProxy.ExpoBrightness.getSystemBrightnessModeAsync();\n  });\n  return _getSystemBrightnessModeAsync.apply(this, arguments);\n}\n\nexport function setSystemBrightnessModeAsync(_x3) {\n  return _setSystemBrightnessModeAsync.apply(this, arguments);\n}\n\nfunction _setSystemBrightnessModeAsync() {\n  _setSystemBrightnessModeAsync = _asyncToGenerator(function* (brightnessMode) {\n    if (Platform.OS !== 'android' || brightnessMode === BrightnessMode.UNKNOWN) {\n      return;\n    }\n\n    return yield NativeModulesProxy.ExpoBrightness.setSystemBrightnessModeAsync(brightnessMode);\n  });\n  return _setSystemBrightnessModeAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/Brightness.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from 'react-native';\nimport { NativeModulesProxy } from '@unimodules/core';\n\nexport enum BrightnessMode {\n  UNKNOWN = 0,\n  AUTOMATIC = 1,\n  MANUAL = 2,\n};\n\nexport async function getBrightnessAsync(): Promise<number> {\n  return await NativeModulesProxy.ExpoBrightness.getBrightnessAsync();\n}\n\nexport async function setBrightnessAsync(brightnessValue: number): Promise<void> {\n  let clampedBrightnessValue = Math.max(0, Math.min(brightnessValue, 1));\n  if (isNaN(clampedBrightnessValue)) {\n    throw new TypeError(`setBrightnessAsync cannot be called with ${brightnessValue}`);\n  }\n  return await NativeModulesProxy.ExpoBrightness.setBrightnessAsync(clampedBrightnessValue);\n}\n\nexport async function getSystemBrightnessAsync(): Promise<number> {\n  if (Platform.OS !== 'android') {\n    return await getBrightnessAsync();\n  }\n  return await NativeModulesProxy.ExpoBrightness.getSystemBrightnessAsync();\n}\n\nexport async function setSystemBrightnessAsync(brightnessValue: number): Promise<void> {\n  let clampedBrightnessValue = Math.max(0, Math.min(brightnessValue, 1));\n  if (isNaN(clampedBrightnessValue)) {\n    throw new TypeError(`setSystemBrightnessAsync cannot be called with ${brightnessValue}`);\n  }\n  if (Platform.OS !== 'android') {\n    return await setBrightnessAsync(clampedBrightnessValue);\n  }\n  return await NativeModulesProxy.ExpoBrightness.setSystemBrightnessAsync(clampedBrightnessValue);\n}\n\nexport async function useSystemBrightnessAsync(): Promise<void> {\n  if (Platform.OS !== 'android') {\n    return;\n  }\n  return await NativeModulesProxy.ExpoBrightness.useSystemBrightnessAsync();\n}\n\nexport async function isUsingSystemBrightnessAsync(): Promise<boolean> {\n  if (Platform.OS !== 'android') {\n    return false;\n  }\n  return await NativeModulesProxy.ExpoBrightness.isUsingSystemBrightnessAsync();\n}\n\nexport async function getSystemBrightnessModeAsync(): Promise<BrightnessMode> {\n  if (Platform.OS !== 'android') {\n    return BrightnessMode.UNKNOWN;\n  }\n  return await NativeModulesProxy.ExpoBrightness.getSystemBrightnessModeAsync();\n}\n\nexport async function setSystemBrightnessModeAsync(brightnessMode: BrightnessMode): Promise<void> {\n  if (Platform.OS !== 'android' || brightnessMode === BrightnessMode.UNKNOWN) {\n    return;\n  }\n  return await NativeModulesProxy.ExpoBrightness.setSystemBrightnessModeAsync(brightnessMode);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}