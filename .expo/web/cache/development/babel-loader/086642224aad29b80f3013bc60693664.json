{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { EventEmitter, Platform } from '@unimodules/core';\nimport { _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS } from \"../AV\";\nimport ExponentAV from \"../ExponentAV\";\nimport { isAudioEnabled, throwIfAudioIsDisabled } from \"./AudioAvailability\";\nimport { Sound } from \"./Sound\";\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT = 0;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP = 1;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4 = 2;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_NB = 3;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_WB = 4;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADIF = 5;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADTS = 6;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_RTP_AVP = 7;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG2TS = 8;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_WEBM = 9;\nexport var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT = 0;\nexport var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB = 1;\nexport var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_WB = 2;\nexport var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC = 3;\nexport var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_HE_AAC = 4;\nexport var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC_ELD = 5;\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM = 'lpcm';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AC3 = 'ac-3';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_60958AC3 = 'cac3';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLEIMA4 = 'ima4';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC = 'aac ';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4CELP = 'celp';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4HVXC = 'hvxc';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4TWINVQ = 'twvq';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE3 = 'MAC3';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE6 = 'MAC6';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ULAW = 'ulaw';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ALAW = 'alaw';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN = 'QDMC';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN2 = 'QDM2';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_QUALCOMM = 'Qclp';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER1 = '.mp1';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER2 = '.mp2';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER3 = '.mp3';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLELOSSLESS = 'alac';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE = 'aach';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_LD = 'aacl';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD = 'aace';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_SBR = 'aacf';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_V2 = 'aacg';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE_V2 = 'aacp';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_SPATIAL = 'aacs';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR = 'samr';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR_WB = 'sawb';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AUDIBLE = 'AUDB';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ILBC = 'ilbc';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_DVIINTELIMA = 0x6d730011;\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MICROSOFTGSM = 0x6d730031;\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AES3 = 'aes3';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ENHANCEDAC3 = 'ec-3';\nexport var RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN = 0;\nexport var RECORDING_OPTION_IOS_AUDIO_QUALITY_LOW = 0x20;\nexport var RECORDING_OPTION_IOS_AUDIO_QUALITY_MEDIUM = 0x40;\nexport var RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH = 0x60;\nexport var RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX = 0x7f;\nexport var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_CONSTANT = 0;\nexport var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_LONG_TERM_AVERAGE = 1;\nexport var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE_CONSTRAINED = 2;\nexport var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE = 3;\nexport var RECORDING_OPTIONS_PRESET_HIGH_QUALITY = {\n  android: {\n    extension: '.m4a',\n    outputFormat: RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4,\n    audioEncoder: RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000\n  },\n  ios: {\n    extension: '.caf',\n    audioQuality: RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000,\n    linearPCMBitDepth: 16,\n    linearPCMIsBigEndian: false,\n    linearPCMIsFloat: false\n  }\n};\nexport var RECORDING_OPTIONS_PRESET_LOW_QUALITY = {\n  android: {\n    extension: '.3gp',\n    outputFormat: RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP,\n    audioEncoder: RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000\n  },\n  ios: {\n    extension: '.caf',\n    audioQuality: RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000,\n    linearPCMBitDepth: 16,\n    linearPCMIsBigEndian: false,\n    linearPCMIsFloat: false\n  }\n};\nvar _recorderExists = false;\nvar eventEmitter = Platform.OS === 'android' ? new EventEmitter(ExponentAV) : null;\nexport class Recording {\n  constructor() {\n    var _this = this;\n\n    this._subscription = null;\n    this._canRecord = false;\n    this._isDoneRecording = false;\n    this._finalDurationMillis = 0;\n    this._uri = null;\n    this._onRecordingStatusUpdate = null;\n    this._progressUpdateTimeoutVariable = null;\n    this._progressUpdateIntervalMillis = _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;\n    this._options = null;\n\n    this._cleanupForUnloadedRecorder = function () {\n      var _ref = _asyncToGenerator(function* (finalStatus) {\n        _this._canRecord = false;\n        _this._isDoneRecording = true;\n        _this._finalDurationMillis = finalStatus.durationMillis;\n        _recorderExists = false;\n\n        if (_this._subscription) {\n          _this._subscription.remove();\n\n          _this._subscription = null;\n        }\n\n        _this._disablePolling();\n\n        return yield _this.getStatusAsync();\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    this._pollingLoop = _asyncToGenerator(function* () {\n      if (isAudioEnabled() && _this._canRecord && _this._onRecordingStatusUpdate != null) {\n        _this._progressUpdateTimeoutVariable = setTimeout(_this._pollingLoop, _this._progressUpdateIntervalMillis);\n\n        try {\n          yield _this.getStatusAsync();\n        } catch (error) {\n          _this._disablePolling();\n        }\n      }\n    });\n    this.getStatusAsync = _asyncToGenerator(function* () {\n      if (_this._canRecord) {\n        return _this._performOperationAndHandleStatusAsync(() => ExponentAV.getAudioRecordingStatus());\n      }\n\n      var status = {\n        canRecord: false,\n        isRecording: false,\n        isDoneRecording: _this._isDoneRecording,\n        durationMillis: _this._finalDurationMillis\n      };\n\n      _this._callOnRecordingStatusUpdateForNewStatus(status);\n\n      return status;\n    });\n  }\n\n  _disablePolling() {\n    if (this._progressUpdateTimeoutVariable != null) {\n      clearTimeout(this._progressUpdateTimeoutVariable);\n      this._progressUpdateTimeoutVariable = null;\n    }\n  }\n\n  _enablePollingIfNecessaryAndPossible() {\n    if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n      this._disablePolling();\n\n      this._pollingLoop();\n    }\n  }\n\n  _callOnRecordingStatusUpdateForNewStatus(status) {\n    if (this._onRecordingStatusUpdate != null) {\n      this._onRecordingStatusUpdate(status);\n    }\n  }\n\n  _performOperationAndHandleStatusAsync(operation) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      throwIfAudioIsDisabled();\n\n      if (_this2._canRecord) {\n        var status = yield operation();\n\n        _this2._callOnRecordingStatusUpdateForNewStatus(status);\n\n        return status;\n      } else {\n        throw new Error('Cannot complete operation because this recorder is not ready to record.');\n      }\n    })();\n  }\n\n  setOnRecordingStatusUpdate(onRecordingStatusUpdate) {\n    this._onRecordingStatusUpdate = onRecordingStatusUpdate;\n\n    if (onRecordingStatusUpdate == null) {\n      this._disablePolling();\n    } else {\n      this._enablePollingIfNecessaryAndPossible();\n    }\n\n    this.getStatusAsync();\n  }\n\n  setProgressUpdateInterval(progressUpdateIntervalMillis) {\n    this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n    this.getStatusAsync();\n  }\n\n  prepareToRecordAsync() {\n    var _arguments = arguments,\n        _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      var options = _arguments.length > 0 && _arguments[0] !== undefined ? _arguments[0] : RECORDING_OPTIONS_PRESET_LOW_QUALITY;\n      throwIfAudioIsDisabled();\n\n      if (_recorderExists) {\n        throw new Error('Only one Recording object can be prepared at a given time.');\n      }\n\n      if (_this3._isDoneRecording) {\n        throw new Error('This Recording object is done recording; you must make a new one.');\n      }\n\n      if (!options || !options.android || !options.ios) {\n        throw new Error('You must provide recording options for android and ios in order to prepare to record.');\n      }\n\n      var extensionRegex = /^\\.\\w+$/;\n\n      if (!options.android.extension || !options.ios.extension || !extensionRegex.test(options.android.extension) || !extensionRegex.test(options.ios.extension)) {\n        throw new Error(\"Your file extensions must match \".concat(extensionRegex.toString(), \".\"));\n      }\n\n      if (!_this3._canRecord) {\n        if (eventEmitter) {\n          _this3._subscription = eventEmitter.addListener('Expo.Recording.recorderUnloaded', _this3._cleanupForUnloadedRecorder);\n        }\n\n        var {\n          uri,\n          status\n        } = yield ExponentAV.prepareAudioRecorder(options);\n        _recorderExists = true;\n        _this3._uri = uri;\n        _this3._options = options;\n        _this3._canRecord = true;\n\n        var currentStatus = _objectSpread({}, status, {\n          canRecord: true\n        });\n\n        _this3._callOnRecordingStatusUpdateForNewStatus(currentStatus);\n\n        _this3._enablePollingIfNecessaryAndPossible();\n\n        return currentStatus;\n      } else {\n        throw new Error('This Recording object is already prepared to record.');\n      }\n    })();\n  }\n\n  startAsync() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this4._performOperationAndHandleStatusAsync(() => ExponentAV.startAudioRecording());\n    })();\n  }\n\n  pauseAsync() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this5._performOperationAndHandleStatusAsync(() => ExponentAV.pauseAudioRecording());\n    })();\n  }\n\n  stopAndUnloadAsync() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this6._canRecord) {\n        if (_this6._isDoneRecording) {\n          throw new Error('Cannot unload a Recording that has already been unloaded.');\n        } else {\n          throw new Error('Cannot unload a Recording that has not been prepared.');\n        }\n      }\n\n      var finalStatus = yield ExponentAV.stopAudioRecording();\n      yield ExponentAV.unloadAudioRecorder();\n      return _this6._cleanupForUnloadedRecorder(finalStatus);\n    })();\n  }\n\n  getURI() {\n    return this._uri;\n  }\n\n  createNewLoadedSound() {\n    var _arguments2 = arguments,\n        _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      var initialStatus = _arguments2.length > 0 && _arguments2[0] !== undefined ? _arguments2[0] : {};\n      var onPlaybackStatusUpdate = _arguments2.length > 1 && _arguments2[1] !== undefined ? _arguments2[1] : null;\n      console.warn(\"createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name\");\n      return _this7.createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate);\n    })();\n  }\n\n  createNewLoadedSoundAsync() {\n    var _arguments3 = arguments,\n        _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      var initialStatus = _arguments3.length > 0 && _arguments3[0] !== undefined ? _arguments3[0] : {};\n      var onPlaybackStatusUpdate = _arguments3.length > 1 && _arguments3[1] !== undefined ? _arguments3[1] : null;\n\n      if (_this8._uri == null || !_this8._isDoneRecording) {\n        throw new Error('Cannot create sound when the Recording has not finished!');\n      }\n\n      return Sound.createAsync({\n        uri: _this8._uri\n      }, initialStatus, onPlaybackStatusUpdate, false);\n    })();\n  }\n\n}","map":{"version":3,"sources":["../../src/Audio/Recording.ts"],"names":[],"mappings":"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","sourcesContent":["import { NativeModulesProxy, EventEmitter, Subscription, Platform } from '@unimodules/core';\n\nimport {\n  _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS,\n  PlaybackStatus,\n  PlaybackStatusToSet,\n} from '../AV';\n\nimport ExponentAV from '../ExponentAV';\nimport { isAudioEnabled, throwIfAudioIsDisabled } from './AudioAvailability';\n\nimport { Sound } from './Sound';\n\nexport type RecordingOptions = {\n  android: {\n    extension: string;\n    outputFormat: number;\n    audioEncoder: number;\n    sampleRate?: number;\n    numberOfChannels?: number;\n    bitRate?: number;\n    maxFileSize?: number;\n  };\n  ios: {\n    extension: string;\n    outputFormat?: string | number;\n    audioQuality: number;\n    sampleRate: number;\n    numberOfChannels: number;\n    bitRate: number;\n    bitRateStrategy?: number;\n    bitDepthHint?: number;\n    linearPCMBitDepth?: number;\n    linearPCMIsBigEndian?: boolean;\n    linearPCMIsFloat?: boolean;\n  };\n};\n\n// TODO: consider changing these to enums\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT = 0;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP = 1;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4 = 2;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_NB = 3;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_WB = 4;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADIF = 5;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADTS = 6;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_RTP_AVP = 7;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG2TS = 8;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_WEBM = 9;\n\nexport const RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT = 0;\nexport const RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB = 1;\nexport const RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_WB = 2;\nexport const RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC = 3;\nexport const RECORDING_OPTION_ANDROID_AUDIO_ENCODER_HE_AAC = 4;\nexport const RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC_ELD = 5;\n\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM = 'lpcm';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_AC3 = 'ac-3';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_60958AC3 = 'cac3';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLEIMA4 = 'ima4';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC = 'aac ';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4CELP = 'celp';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4HVXC = 'hvxc';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4TWINVQ = 'twvq';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE3 = 'MAC3';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE6 = 'MAC6';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_ULAW = 'ulaw';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_ALAW = 'alaw';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN = 'QDMC';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN2 = 'QDM2';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_QUALCOMM = 'Qclp';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER1 = '.mp1';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER2 = '.mp2';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER3 = '.mp3';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLELOSSLESS = 'alac';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE = 'aach';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_LD = 'aacl';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD = 'aace';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_SBR = 'aacf';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_V2 = 'aacg';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE_V2 = 'aacp';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_SPATIAL = 'aacs';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR = 'samr';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR_WB = 'sawb';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_AUDIBLE = 'AUDB';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_ILBC = 'ilbc';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_DVIINTELIMA = 0x6d730011;\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MICROSOFTGSM = 0x6d730031;\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_AES3 = 'aes3';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_ENHANCEDAC3 = 'ec-3';\n\nexport const RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN = 0;\nexport const RECORDING_OPTION_IOS_AUDIO_QUALITY_LOW = 0x20;\nexport const RECORDING_OPTION_IOS_AUDIO_QUALITY_MEDIUM = 0x40;\nexport const RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH = 0x60;\nexport const RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX = 0x7f;\n\nexport const RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_CONSTANT = 0;\nexport const RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_LONG_TERM_AVERAGE = 1;\nexport const RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE_CONSTRAINED = 2;\nexport const RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE = 3;\n\n// TODO : maybe make presets for music and speech, or lossy / lossless.\n\nexport const RECORDING_OPTIONS_PRESET_HIGH_QUALITY: RecordingOptions = {\n  android: {\n    extension: '.m4a',\n    outputFormat: RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4,\n    audioEncoder: RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000,\n  },\n  ios: {\n    extension: '.caf',\n    audioQuality: RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000,\n    linearPCMBitDepth: 16,\n    linearPCMIsBigEndian: false,\n    linearPCMIsFloat: false,\n  },\n};\n\nexport const RECORDING_OPTIONS_PRESET_LOW_QUALITY: RecordingOptions = {\n  android: {\n    extension: '.3gp',\n    outputFormat: RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP,\n    audioEncoder: RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000,\n  },\n  ios: {\n    extension: '.caf',\n    audioQuality: RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000,\n    linearPCMBitDepth: 16,\n    linearPCMIsBigEndian: false,\n    linearPCMIsFloat: false,\n  },\n};\n\n// TODO: For consistency with PlaybackStatus, should we include progressUpdateIntervalMillis here as\n// well?\nexport type RecordingStatus = {\n  canRecord: boolean;\n  isRecording: boolean;\n  isDoneRecording: boolean;\n  durationMillis: number;\n};\n\nlet _recorderExists: boolean = false;\nconst eventEmitter = Platform.OS === 'android' ? new EventEmitter(ExponentAV) : null;\n\nexport class Recording {\n  _subscription: Subscription | null = null;\n  _canRecord: boolean = false;\n  _isDoneRecording: boolean = false;\n  _finalDurationMillis: number = 0;\n  _uri: string | null = null;\n  _onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null = null;\n  _progressUpdateTimeoutVariable: number | null = null;\n  _progressUpdateIntervalMillis: number = _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;\n  _options: RecordingOptions | null = null;\n\n  // Internal methods\n\n  _cleanupForUnloadedRecorder = async (finalStatus: RecordingStatus) => {\n    this._canRecord = false;\n    this._isDoneRecording = true;\n    // $FlowFixMe(greg): durationMillis is not always defined\n    this._finalDurationMillis = finalStatus.durationMillis;\n    _recorderExists = false;\n    if (this._subscription) {\n      this._subscription.remove();\n      this._subscription = null;\n    }\n    this._disablePolling();\n    return await this.getStatusAsync(); // Automatically calls onRecordingStatusUpdate for the final state.\n  };\n\n  _pollingLoop = async () => {\n    if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n      this._progressUpdateTimeoutVariable = <any>setTimeout(\n        this._pollingLoop,\n        this._progressUpdateIntervalMillis\n      );\n      try {\n        await this.getStatusAsync();\n      } catch (error) {\n        this._disablePolling();\n      }\n    }\n  };\n\n  _disablePolling() {\n    if (this._progressUpdateTimeoutVariable != null) {\n      clearTimeout(this._progressUpdateTimeoutVariable);\n      this._progressUpdateTimeoutVariable = null;\n    }\n  }\n\n  _enablePollingIfNecessaryAndPossible() {\n    if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n      this._disablePolling();\n      this._pollingLoop();\n    }\n  }\n\n  _callOnRecordingStatusUpdateForNewStatus(status: RecordingStatus) {\n    if (this._onRecordingStatusUpdate != null) {\n      this._onRecordingStatusUpdate(status);\n    }\n  }\n\n  async _performOperationAndHandleStatusAsync(\n    operation: () => Promise<RecordingStatus>\n  ): Promise<RecordingStatus> {\n    throwIfAudioIsDisabled();\n    if (this._canRecord) {\n      const status = await operation();\n      this._callOnRecordingStatusUpdateForNewStatus(status);\n      return status;\n    } else {\n      throw new Error('Cannot complete operation because this recorder is not ready to record.');\n    }\n  }\n\n  // Note that all calls automatically call onRecordingStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<RecordingStatus> => {\n    // Automatically calls onRecordingStatusUpdate.\n    if (this._canRecord) {\n      return this._performOperationAndHandleStatusAsync(() => ExponentAV.getAudioRecordingStatus());\n    }\n    const status = {\n      canRecord: false,\n      isRecording: false,\n      isDoneRecording: this._isDoneRecording,\n      durationMillis: this._finalDurationMillis,\n    };\n    this._callOnRecordingStatusUpdateForNewStatus(status);\n    return status;\n  };\n\n  setOnRecordingStatusUpdate(onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null) {\n    this._onRecordingStatusUpdate = onRecordingStatusUpdate;\n    if (onRecordingStatusUpdate == null) {\n      this._disablePolling();\n    } else {\n      this._enablePollingIfNecessaryAndPossible();\n    }\n    this.getStatusAsync();\n  }\n\n  setProgressUpdateInterval(progressUpdateIntervalMillis: number) {\n    this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n    this.getStatusAsync();\n  }\n\n  // Record API\n\n  async prepareToRecordAsync(\n    options: RecordingOptions = RECORDING_OPTIONS_PRESET_LOW_QUALITY\n  ): Promise<RecordingStatus> {\n    throwIfAudioIsDisabled();\n\n    if (_recorderExists) {\n      throw new Error('Only one Recording object can be prepared at a given time.');\n    }\n\n    if (this._isDoneRecording) {\n      throw new Error('This Recording object is done recording; you must make a new one.');\n    }\n\n    if (!options || !options.android || !options.ios) {\n      throw new Error(\n        'You must provide recording options for android and ios in order to prepare to record.'\n      );\n    }\n\n    const extensionRegex = /^\\.\\w+$/;\n    if (\n      !options.android.extension ||\n      !options.ios.extension ||\n      !extensionRegex.test(options.android.extension) ||\n      !extensionRegex.test(options.ios.extension)\n    ) {\n      throw new Error(`Your file extensions must match ${extensionRegex.toString()}.`);\n    }\n\n    if (!this._canRecord) {\n      if (eventEmitter) {\n        this._subscription = eventEmitter.addListener(\n          'Expo.Recording.recorderUnloaded',\n          this._cleanupForUnloadedRecorder\n        );\n      }\n\n      const {\n        uri,\n        status,\n      }: {\n        uri: string;\n        // status is of type RecordingStatus, but without the canRecord field populated\n        status: Pick<RecordingStatus, Exclude<keyof RecordingStatus, 'canRecord'>>;\n      } = await ExponentAV.prepareAudioRecorder(options);\n\n      _recorderExists = true;\n      this._uri = uri;\n      this._options = options;\n      this._canRecord = true;\n\n      const currentStatus = { ...status, canRecord: true };\n      this._callOnRecordingStatusUpdateForNewStatus(currentStatus);\n      this._enablePollingIfNecessaryAndPossible();\n      return currentStatus;\n    } else {\n      throw new Error('This Recording object is already prepared to record.');\n    }\n  }\n\n  async startAsync(): Promise<RecordingStatus> {\n    return this._performOperationAndHandleStatusAsync(() => ExponentAV.startAudioRecording());\n  }\n\n  async pauseAsync(): Promise<RecordingStatus> {\n    return this._performOperationAndHandleStatusAsync(() => ExponentAV.pauseAudioRecording());\n  }\n\n  async stopAndUnloadAsync(): Promise<RecordingStatus> {\n    if (!this._canRecord) {\n      if (this._isDoneRecording) {\n        throw new Error('Cannot unload a Recording that has already been unloaded.');\n      } else {\n        throw new Error('Cannot unload a Recording that has not been prepared.');\n      }\n    }\n    // We perform a separate native API call so that the state of the Recording can be updated with\n    // the final duration of the recording. (We cast stopStatus as Object to appease Flow)\n    const finalStatus = await ExponentAV.stopAudioRecording();\n    await ExponentAV.unloadAudioRecorder();\n    return this._cleanupForUnloadedRecorder(finalStatus);\n  }\n\n  // Read API\n\n  getURI(): string | null {\n    return this._uri;\n  }\n\n  async createNewLoadedSound(\n    initialStatus: PlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null = null\n  ): Promise<{ sound: Sound; status: PlaybackStatus }> {\n    console.warn(\n      `createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name`\n    );\n    return this.createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate);\n  }\n\n  async createNewLoadedSoundAsync(\n    initialStatus: PlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null = null\n  ): Promise<{ sound: Sound; status: PlaybackStatus }> {\n    if (this._uri == null || !this._isDoneRecording) {\n      throw new Error('Cannot create sound when the Recording has not finished!');\n    }\n    return Sound.createAsync(\n      // $FlowFixMe: Flow can't distinguish between this literal and Asset\n      { uri: this._uri },\n      initialStatus,\n      onPlaybackStatusUpdate,\n      false\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}