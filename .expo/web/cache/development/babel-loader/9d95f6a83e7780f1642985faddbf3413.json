{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jshukurov\\\\Desktop\\\\Poppi Over The Edge\\\\Poppi-Over-the-Edge-master\\\\node_modules\\\\expo\\\\build\\\\launch\\\\AppLoading.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { EventEmitter } from 'fbemitter';\nimport React from 'react';\nimport NativeAppLoading from \"./AppLoadingNativeWrapper\";\nexport default class AppLoading extends React.Component {\n  constructor() {\n    var _this;\n\n    super(...arguments);\n    _this = this;\n    this._isMounted = false;\n    this._startLoadingAppResourcesAsync = _asyncToGenerator(function* () {\n      if (!_this.props.onFinish) {\n        throw new Error('AppLoading onFinish prop is required if startAsync is provided');\n      }\n\n      try {\n        yield _this.props.startAsync();\n      } catch (e) {\n        if (!_this._isMounted) return;\n\n        if (_this.props.onError) {\n          _this.props.onError(e);\n        } else {\n          throw e;\n        }\n      } finally {\n        if (!_this._isMounted) return;\n\n        if (_this.props.onFinish) {\n          _this.props.onFinish();\n        }\n      }\n    });\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n\n    _emitEvent('componentDidMount');\n\n    if (this.props.startAsync) {\n      this._startLoadingAppResourcesAsync().catch(error => {\n        console.error(\"AppLoading threw an unexpected error when loading:\\n\".concat(error.stack));\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n\n    _emitEvent('componentWillUnmount');\n  }\n\n  render() {\n    return React.createElement(NativeAppLoading, _extends({}, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 16\n      }\n    }));\n  }\n\n}\nvar _lifecycleEmitter = null;\n\nfunction _emitEvent(event) {\n  if (_lifecycleEmitter) {\n    _lifecycleEmitter.emit(event);\n  }\n}\n\nexport function getAppLoadingLifecycleEmitter() {\n  if (!_lifecycleEmitter) {\n    _lifecycleEmitter = new EventEmitter();\n  }\n\n  return _lifecycleEmitter;\n}","map":{"version":3,"sources":["../../src/launch/AppLoading.tsx"],"names":[],"mappings":";;;;;;;;AAAA,SAAS,YAAT,QAA6B,WAA7B;AACA,OAAO,KAAP,MAAkB,OAAlB;AAEA,OAAO,gBAAP;AAeA,eAAc,MAAO,UAAP,SAA0B,KAAK,CAAC,SAAhC,CAAgD;AAA9D,EAAA,WAAA,GAAA;AAAA;;uBAAA;AAAA;AACE,SAAA,UAAA,GAAsB,KAAtB;AAoBA,SAAA,8BAAA,qBAAiC,aAAW;AAC1C,UAAI,CAAC,KAAI,CAAC,KAAL,CAAW,QAAhB,EAA0B;AACxB,cAAM,IAAI,KAAJ,CAAU,gEAAV,CAAN;AACD;;AAED,UAAI;AACF,cAAM,KAAI,CAAC,KAAL,CAAW,UAAX,EAAN;AACD,OAFD,CAEE,OAAO,CAAP,EAAU;AACV,YAAI,CAAC,KAAI,CAAC,UAAV,EAAsB;;AAEtB,YAAI,KAAI,CAAC,KAAL,CAAW,OAAf,EAAwB;AACtB,UAAA,KAAI,CAAC,KAAL,CAAW,OAAX,CAAmB,CAAnB;AACD,SAFD,MAEO;AACL,gBAAM,CAAN;AACD;AACF,OAVD,SAUU;AACR,YAAI,CAAC,KAAI,CAAC,UAAV,EAAsB;;AAItB,YAAI,KAAI,CAAC,KAAL,CAAW,QAAf,EAAyB;AACvB,UAAA,KAAI,CAAC,KAAL,CAAW,QAAX;AACD;AACF;AACF,KAxBD;AA6BD;;AA/CC,EAAA,iBAAiB,GAAA;AACf,SAAK,UAAL,GAAkB,IAAlB;;AACA,IAAA,UAAU,CAAC,mBAAD,CAAV;;AAIA,QAAI,KAAK,KAAL,CAAW,UAAf,EAA2B;AACzB,WAAK,8BAAL,GAAsC,KAAtC,CAA4C,KAAK,IAAG;AAClD,QAAA,OAAO,CAAC,KAAR,+DAAqE,KAAK,CAAC,KAA3E;AACD,OAFD;AAGD;AACF;;AAED,EAAA,oBAAoB,GAAA;AAClB,SAAK,UAAL,GAAkB,KAAlB;;AACA,IAAA,UAAU,CAAC,sBAAD,CAAV;AACD;;AA4BD,EAAA,MAAM,GAAA;AACJ,WAAO,oBAAC,gBAAD,eAAsB,KAAK,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD;;AAjD2D;AAoD9D,IAAI,iBAAiB,GAAwB,IAA7C;;AAEA,SAAS,UAAT,CAAoB,KAApB,EAAiC;AAC/B,MAAI,iBAAJ,EAAuB;AACrB,IAAA,iBAAiB,CAAC,IAAlB,CAAuB,KAAvB;AACD;AACF;;AAED,OAAM,SAAU,6BAAV,GAAuC;AAC3C,MAAI,CAAC,iBAAL,EAAwB;AACtB,IAAA,iBAAiB,GAAG,IAAI,YAAJ,EAApB;AACD;;AACD,SAAO,iBAAP;AACD","sourcesContent":["import { EventEmitter } from 'fbemitter';\nimport React from 'react';\n\nimport NativeAppLoading from './AppLoadingNativeWrapper';\n\ntype Props =\n  | {\n      startAsync?: () => Promise<void>;\n      onError?: (error: Error) => void;\n      onFinish?: () => void;\n      autoHideSplash?: boolean;\n    }\n  | {\n      startAsync: null;\n      onError: null;\n      onFinish: null;\n    };\n\nexport default class AppLoading extends React.Component<Props> {\n  _isMounted: boolean = false;\n\n  componentDidMount() {\n    this._isMounted = true;\n    _emitEvent('componentDidMount');\n\n    // startAsync is optional, you can do this process manually if you prefer (this is mainly for\n    // backwards compatibility and it is not recommended)\n    if (this.props.startAsync) {\n      this._startLoadingAppResourcesAsync().catch(error => {\n        console.error(`AppLoading threw an unexpected error when loading:\\n${error.stack}`);\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    _emitEvent('componentWillUnmount');\n  }\n\n  _startLoadingAppResourcesAsync = async () => {\n    if (!this.props.onFinish) {\n      throw new Error('AppLoading onFinish prop is required if startAsync is provided');\n    }\n\n    try {\n      await this.props.startAsync!();\n    } catch (e) {\n      if (!this._isMounted) return;\n\n      if (this.props.onError) {\n        this.props.onError(e);\n      } else {\n        throw e;\n      }\n    } finally {\n      if (!this._isMounted) return;\n\n      // If we get to this point then we know that either there was no error, or the error was\n      // handled.\n      if (this.props.onFinish) {\n        this.props.onFinish();\n      }\n    }\n  };\n\n  render() {\n    return <NativeAppLoading {...this.props} />;\n  }\n}\n\nlet _lifecycleEmitter: EventEmitter | null = null;\n\nfunction _emitEvent(event: string): void {\n  if (_lifecycleEmitter) {\n    _lifecycleEmitter.emit(event);\n  }\n}\n\nexport function getAppLoadingLifecycleEmitter(): EventEmitter {\n  if (!_lifecycleEmitter) {\n    _lifecycleEmitter = new EventEmitter();\n  }\n  return _lifecycleEmitter;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}