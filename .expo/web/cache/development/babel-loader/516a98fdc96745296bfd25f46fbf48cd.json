{"ast":null,"code":"import invariant from 'invariant';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeEventEmitter from 'react-native/Libraries/EventEmitter/NativeEventEmitter';\nvar nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';\nexport class EventEmitter {\n  constructor(nativeModule) {\n    this._listenerCount = 0;\n    this._nativeModule = nativeModule;\n    this._eventEmitter = new NativeEventEmitter(nativeModule);\n  }\n\n  addListener(eventName, listener) {\n    if (!this._listenerCount && Platform.OS === 'android' && this._nativeModule.startObserving) {\n      this._nativeModule.startObserving();\n    }\n\n    this._listenerCount++;\n\n    var nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);\n\n    var subscription = {\n      [nativeEmitterSubscriptionKey]: nativeEmitterSubscription,\n      remove: () => {\n        this.removeSubscription(subscription);\n      }\n    };\n    return subscription;\n  }\n\n  removeAllListeners(eventName) {\n    var removedListenerCount = this._eventEmitter.listeners(eventName).length;\n\n    this._eventEmitter.removeAllListeners(eventName);\n\n    this._listenerCount -= removedListenerCount;\n    invariant(this._listenerCount >= 0, \"EventEmitter must have a non-negative number of listeners\");\n\n    if (!this._listenerCount && Platform.OS === 'android' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  removeSubscription(subscription) {\n    var nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];\n\n    if (!nativeEmitterSubscription) {\n      return;\n    }\n\n    this._eventEmitter.removeSubscription(nativeEmitterSubscription);\n\n    this._listenerCount--;\n\n    if (!this._listenerCount && Platform.OS === 'android' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  emit(eventName) {\n    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      params[_key - 1] = arguments[_key];\n    }\n\n    this._eventEmitter.emit(eventName, ...params);\n  }\n\n}","map":{"version":3,"sources":["../src/EventEmitter.ts"],"names":[],"mappings":"AAAA,OAAO,SAAP,MAAsB,WAAtB;;AAIA,OAAO,kBAAP,MAA+B,wDAA/B;AAEA,IAAM,4BAA4B,GAAG,+BAArC;AAaA,OAAM,MAAO,YAAP,CAAmB;AAKvB,EAAA,WAAA,CAAY,YAAZ,EAAsC;AAJtC,SAAA,cAAA,GAAiB,CAAjB;AAKE,SAAK,aAAL,GAAqB,YAArB;AACA,SAAK,aAAL,GAAqB,IAAI,kBAAJ,CAAuB,YAAvB,CAArB;AACD;;AAED,EAAA,WAAW,CAAI,SAAJ,EAAuB,QAAvB,EAAmD;AAC5D,QAAI,CAAC,KAAK,cAAN,IAAwB,QAAQ,CAAC,EAAT,KAAgB,SAAxC,IAAqD,KAAK,aAAL,CAAmB,cAA5E,EAA4F;AAC1F,WAAK,aAAL,CAAmB,cAAnB;AACD;;AAED,SAAK,cAAL;;AACA,QAAM,yBAAyB,GAAG,KAAK,aAAL,CAAmB,WAAnB,CAA+B,SAA/B,EAA0C,QAA1C,CAAlC;;AACA,QAAM,YAAY,GAAG;AACnB,OAAC,4BAAD,GAAgC,yBADb;AAEnB,MAAA,MAAM,EAAE,MAAK;AACX,aAAK,kBAAL,CAAwB,YAAxB;AACD;AAJkB,KAArB;AAMA,WAAO,YAAP;AACD;;AAED,EAAA,kBAAkB,CAAC,SAAD,EAAkB;AAClC,QAAM,oBAAoB,GAAG,KAAK,aAAL,CAAmB,SAAnB,CAA6B,SAA7B,EAAwC,MAArE;;AACA,SAAK,aAAL,CAAmB,kBAAnB,CAAsC,SAAtC;;AACA,SAAK,cAAL,IAAuB,oBAAvB;AACA,IAAA,SAAS,CACP,KAAK,cAAL,IAAuB,CADhB,8DAAT;;AAKA,QAAI,CAAC,KAAK,cAAN,IAAwB,QAAQ,CAAC,EAAT,KAAgB,SAAxC,IAAqD,KAAK,aAAL,CAAmB,aAA5E,EAA2F;AACzF,WAAK,aAAL,CAAmB,aAAnB;AACD;AACF;;AAED,EAAA,kBAAkB,CAAC,YAAD,EAA2B;AAC3C,QAAM,yBAAyB,GAAG,YAAY,CAAC,4BAAD,CAA9C;;AACA,QAAI,CAAC,yBAAL,EAAgC;AAC9B;AACD;;AAED,SAAK,aAAL,CAAmB,kBAAnB,CAAsC,yBAAtC;;AACA,SAAK,cAAL;;AAEA,QAAI,CAAC,KAAK,cAAN,IAAwB,QAAQ,CAAC,EAAT,KAAgB,SAAxC,IAAqD,KAAK,aAAL,CAAmB,aAA5E,EAA2F;AACzF,WAAK,aAAL,CAAmB,aAAnB;AACD;AACF;;AAED,EAAA,IAAI,CAAC,SAAD,EAAoC;AAAA,sCAAb,MAAa;AAAb,MAAA,MAAa;AAAA;;AACtC,SAAK,aAAL,CAAmB,IAAnB,CAAwB,SAAxB,EAAmC,GAAG,MAAtC;AACD;;AAxDsB","sourcesContent":["import invariant from 'invariant';\nimport { EmitterSubscription, Platform } from 'react-native';\n// Importing this directly will circumvent the webpack alias `react-native$`. This will enable us to\n// use NativeEventEmitter from React Native and not from RNWeb.\nimport NativeEventEmitter from 'react-native/Libraries/EventEmitter/NativeEventEmitter';\n\nconst nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';\n\ntype NativeModule = {\n  startObserving?: () => void;\n  stopObserving?: () => void;\n  addListener: (eventName: string) => void;\n  removeListeners: (count: number) => void;\n};\n\nexport type Subscription = {\n  remove: () => void;\n};\n\nexport class EventEmitter {\n  _listenerCount = 0;\n  _nativeModule: NativeModule;\n  _eventEmitter: NativeEventEmitter;\n\n  constructor(nativeModule: NativeModule) {\n    this._nativeModule = nativeModule;\n    this._eventEmitter = new NativeEventEmitter(nativeModule);\n  }\n\n  addListener<T>(eventName: string, listener: (event: T) => void): Subscription {\n    if (!this._listenerCount && Platform.OS === 'android' && this._nativeModule.startObserving) {\n      this._nativeModule.startObserving();\n    }\n\n    this._listenerCount++;\n    const nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);\n    const subscription = {\n      [nativeEmitterSubscriptionKey]: nativeEmitterSubscription,\n      remove: () => {\n        this.removeSubscription(subscription);\n      },\n    };\n    return subscription;\n  }\n\n  removeAllListeners(eventName: string): void {\n    const removedListenerCount = this._eventEmitter.listeners(eventName).length;\n    this._eventEmitter.removeAllListeners(eventName);\n    this._listenerCount -= removedListenerCount;\n    invariant(\n      this._listenerCount >= 0,\n      `EventEmitter must have a non-negative number of listeners`\n    );\n\n    if (!this._listenerCount && Platform.OS === 'android' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  removeSubscription(subscription: Subscription): void {\n    const nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];\n    if (!nativeEmitterSubscription) {\n      return;\n    }\n\n    this._eventEmitter.removeSubscription(nativeEmitterSubscription!);\n    this._listenerCount--;\n\n    if (!this._listenerCount && Platform.OS === 'android' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  emit(eventName: string, ...params: any[]): void {\n    this._eventEmitter.emit(eventName, ...params);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}