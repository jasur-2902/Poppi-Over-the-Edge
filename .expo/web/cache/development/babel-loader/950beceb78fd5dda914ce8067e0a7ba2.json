{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { SyntheticPlatformEmitter } from '@unimodules/core';\nimport { isSensorEnabledAsync } from \"./utils/isSensorEnabledAsync.web\";\nvar scalar = Math.PI / 180;\nvar eventName = 'deviceorientation';\nexport default {\n  get name() {\n    return 'ExponentAccelerometer';\n  },\n\n  isAvailableAsync() {\n    return _asyncToGenerator(function* () {\n      if (typeof DeviceOrientationEvent === 'undefined') {\n        return false;\n      }\n\n      return yield isSensorEnabledAsync(eventName);\n    })();\n  },\n\n  _handleMotion(_ref) {\n    var {\n      alpha,\n      beta,\n      gamma\n    } = _ref;\n    SyntheticPlatformEmitter.emit('accelerometerDidUpdate', {\n      x: gamma * scalar,\n      y: beta * scalar,\n      z: alpha * scalar\n    });\n  },\n\n  startObserving() {\n    window.addEventListener(eventName, this._handleMotion);\n  },\n\n  stopObserving() {\n    window.removeEventListener(eventName, this._handleMotion);\n  }\n\n};","map":{"version":3,"sources":["../src/ExponentAccelerometer.web.ts"],"names":[],"mappings":";;;;AAAA,SAAS,wBAAT,QAAyC,kBAAzC;AAEA,SAAS,oBAAT;AAEA,IAAM,MAAM,GAAG,IAAI,CAAC,EAAL,GAAU,GAAzB;AACA,IAAM,SAAS,GAAG,mBAAlB;AAEA,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,uBAAP;AACD,GAHY;;AAIP,EAAA,gBAAN,GAAsB;AAAA;AACpB,UAAI,OAAO,sBAAP,KAAkC,WAAtC,EAAmD;AACjD,eAAO,KAAP;AACD;;AACD,mBAAa,oBAAoB,CAAC,SAAD,CAAjC;AAJoB;AAKrB,GATY;;AAUb,EAAA,aAAa,OAAuB;AAAA,QAAtB;AAAE,MAAA,KAAF;AAAS,MAAA,IAAT;AAAe,MAAA;AAAf,KAAsB;AAClC,IAAA,wBAAwB,CAAC,IAAzB,CAA8B,wBAA9B,EAAwD;AACtD,MAAA,CAAC,EAAE,KAAK,GAAG,MAD2C;AAEtD,MAAA,CAAC,EAAE,IAAI,GAAG,MAF4C;AAGtD,MAAA,CAAC,EAAE,KAAK,GAAG;AAH2C,KAAxD;AAKD,GAhBY;;AAiBb,EAAA,cAAc,GAAA;AACZ,IAAA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,KAAK,aAAxC;AACD,GAnBY;;AAoBb,EAAA,aAAa,GAAA;AACX,IAAA,MAAM,CAAC,mBAAP,CAA2B,SAA3B,EAAsC,KAAK,aAA3C;AACD;;AAtBY,CAAf","sourcesContent":["import { SyntheticPlatformEmitter } from '@unimodules/core';\n\nimport { isSensorEnabledAsync } from './utils/isSensorEnabledAsync.web';\n\nconst scalar = Math.PI / 180;\nconst eventName = 'deviceorientation';\n\nexport default {\n  get name(): string {\n    return 'ExponentAccelerometer';\n  },\n  async isAvailableAsync(): Promise<boolean> {\n    if (typeof DeviceOrientationEvent === 'undefined') {\n      return false;\n    }\n    return await isSensorEnabledAsync(eventName);\n  },\n  _handleMotion({ alpha, beta, gamma }) {\n    SyntheticPlatformEmitter.emit('accelerometerDidUpdate', {\n      x: gamma * scalar,\n      y: beta * scalar,\n      z: alpha * scalar,\n    });\n  },\n  startObserving() {\n    window.addEventListener(eventName, this._handleMotion);\n  },\n  stopObserving() {\n    window.removeEventListener(eventName, this._handleMotion);\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}