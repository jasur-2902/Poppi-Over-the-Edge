{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport * as FileSystem from 'expo-file-system';\nimport { Platform } from '@unimodules/core';\nimport filenameFromUri from \"./filenameFromUri\";\n\nfunction isAssetLibraryUri(uri) {\n  return uri.toLowerCase().startsWith('assets-library://');\n}\n\nfunction isLocalUri(uri) {\n  return uri.toLowerCase().startsWith('file://');\n}\n\nfunction getHashAsync(_x) {\n  return _getHashAsync.apply(this, arguments);\n}\n\nfunction _getHashAsync() {\n  _getHashAsync = _asyncToGenerator(function* (uri) {\n    var {\n      md5\n    } = yield FileSystem.getInfoAsync(uri, {\n      md5: true\n    });\n    return md5;\n  });\n  return _getHashAsync.apply(this, arguments);\n}\n\nfunction resolveLocalFileAsync(_x2) {\n  return _resolveLocalFileAsync.apply(this, arguments);\n}\n\nfunction _resolveLocalFileAsync() {\n  _resolveLocalFileAsync = _asyncToGenerator(function* (_ref) {\n    var {\n      uri,\n      name\n    } = _ref;\n    if (Platform.OS === 'web') return {\n      uri,\n      name,\n      hash: null\n    };\n    var hash = yield getHashAsync(uri);\n\n    if (!hash) {\n      return null;\n    }\n\n    return {\n      uri,\n      name,\n      hash\n    };\n  });\n  return _resolveLocalFileAsync.apply(this, arguments);\n}\n\nfunction fileInfoAsync(_x3, _x4) {\n  return _fileInfoAsync.apply(this, arguments);\n}\n\nfunction _fileInfoAsync() {\n  _fileInfoAsync = _asyncToGenerator(function* (url, name) {\n    if (!url) {\n      throw new Error('expo-asset-utils: fileInfoAsync(): cannot load from empty url!');\n      return null;\n    }\n\n    name = name || filenameFromUri(url);\n\n    if (Platform.OS === 'web') {\n      return {\n        uri: url,\n        name,\n        hash: null\n      };\n    }\n\n    var localUri = FileSystem.cacheDirectory + name;\n\n    if (isAssetLibraryUri(url)) {\n      yield FileSystem.copyAsync({\n        from: url,\n        to: localUri\n      });\n      var hash = yield getHashAsync(localUri);\n      return {\n        uri: localUri,\n        name,\n        hash\n      };\n    } else if (isLocalUri(url)) {\n      var file = yield resolveLocalFileAsync({\n        uri: url,\n        name\n      });\n\n      if (!file) {\n        file = yield resolveLocalFileAsync({\n          uri: localUri,\n          name\n        });\n\n        if (!file) {\n          throw new Error(\"expo-asset-utils: fileInfoAsync(): couldn't resolve md5 hash for local uri: \".concat(url, \" or alternate: \").concat(localUri));\n          return null;\n        }\n      }\n\n      return file;\n    } else {\n      var {\n        uri,\n        md5: _hash\n      } = yield FileSystem.downloadAsync(url, localUri, {\n        md5: true\n      });\n      return {\n        uri,\n        name,\n        hash: _hash\n      };\n    }\n  });\n  return _fileInfoAsync.apply(this, arguments);\n}\n\nexport default fileInfoAsync;","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/expo-asset-utils/src/fileInfoAsync.js"],"names":["FileSystem","Platform","filenameFromUri","isAssetLibraryUri","uri","toLowerCase","startsWith","isLocalUri","getHashAsync","md5","getInfoAsync","resolveLocalFileAsync","name","OS","hash","fileInfoAsync","url","Error","localUri","cacheDirectory","copyAsync","from","to","file","downloadAsync"],"mappings":"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","sourcesContent":["// @flow\nimport * as FileSystem from 'expo-file-system';\nimport { Platform } from '@unimodules/core';\nimport filenameFromUri from './filenameFromUri';\n\nfunction isAssetLibraryUri(uri: string): boolean {\n  return uri.toLowerCase().startsWith('assets-library://');\n}\n\nfunction isLocalUri(uri: string): boolean {\n  return uri.toLowerCase().startsWith('file://');\n}\n\nasync function getHashAsync(uri: string): Promise<string> {\n  const { md5 } = await FileSystem.getInfoAsync(uri, { md5: true });\n  return md5;\n}\n\nexport type ImageData = {\n  uri: string,\n  name: string,\n  hash?: string,\n};\n\nasync function resolveLocalFileAsync({ uri, name }: ImageData): Promise<ImageData> {\n  if (Platform.OS === 'web') return { uri, name, hash: null };\n\n  const hash = await getHashAsync(uri);\n  if (!hash) {\n    return null;\n  }\n  return { uri, name, hash };\n}\n\nasync function fileInfoAsync(url: ?string, name: string): Promise<ImageData> {\n  if (!url) {\n    throw new Error('expo-asset-utils: fileInfoAsync(): cannot load from empty url!');\n    return null;\n  }\n  name = name || filenameFromUri(url);\n\n  if (Platform.OS === 'web') {\n    return { uri: url, name, hash: null };\n  }\n\n  const localUri = FileSystem.cacheDirectory + name;\n\n  if (isAssetLibraryUri(url)) {\n    /// ios asset: we need to copy this over and then get the hash\n    await FileSystem.copyAsync({\n      from: url,\n      to: localUri,\n    });\n    const hash = await getHashAsync(localUri);\n    return { uri: localUri, name, hash };\n  } else if (isLocalUri(url)) {\n    /// local image: we just need the hash\n    let file = await resolveLocalFileAsync({ uri: url, name });\n    if (!file) {\n      file = await resolveLocalFileAsync({ uri: localUri, name });\n      if (!file) {\n        throw new Error(\n          `expo-asset-utils: fileInfoAsync(): couldn't resolve md5 hash for local uri: ${url} or alternate: ${localUri}`\n        );\n        return null;\n      }\n    }\n    return file;\n  } else {\n    /// remote image: download first\n    const { uri, md5: hash } = await FileSystem.downloadAsync(url, localUri, {\n      md5: true,\n    });\n    return { uri, name, hash };\n  }\n}\nexport default fileInfoAsync;\n"]},"metadata":{},"sourceType":"module"}