{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { uriAsync } from 'expo-asset-utils';\nimport { readAsStringAsync } from 'expo-file-system';\nimport PIXI from \"./Pixi\";\n\nfunction isFunction(functionToCheck) {\n  return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\n}\n\nfunction isObject(obj) {\n  return obj !== null && typeof obj === 'object';\n}\n\nfunction jsonFromResourceAsync(_x) {\n  return _jsonFromResourceAsync.apply(this, arguments);\n}\n\nfunction _jsonFromResourceAsync() {\n  _jsonFromResourceAsync = _asyncToGenerator(function* (resource) {\n    var jsonUrl = yield uriAsync(resource);\n    var jsonString = yield readAsStringAsync(jsonUrl);\n    return JSON.parse(jsonString);\n  });\n  return _jsonFromResourceAsync.apply(this, arguments);\n}\n\nfunction spineAsync(_x2) {\n  return _spineAsync.apply(this, arguments);\n}\n\nfunction _spineAsync() {\n  _spineAsync = _asyncToGenerator(function* (_ref) {\n    var {\n      json,\n      atlas,\n      assetProvider\n    } = _ref;\n\n    if (!PIXI.spine) {\n      require('pixi-spine');\n    }\n\n    var {\n      Spine,\n      core\n    } = PIXI.spine;\n    var {\n      TextureAtlas,\n      AtlasAttachmentLoader,\n      SkeletonJson\n    } = core;\n    var _json = null;\n\n    if (json === null) {\n      console.error('loadSpineAsync: Please provide a valid resource for the `json` prop');\n      return null;\n    } else {\n      if (typeof json === 'number') {\n        _json = yield jsonFromResourceAsync(json);\n      } else if (typeof json === 'object') {\n        if (json.bones) {\n          _json = json;\n        } else {\n          _json = yield jsonFromResourceAsync(json);\n        }\n      }\n    }\n\n    var atlasUrl = yield uriAsync(atlas);\n\n    var _atlas = yield readAsStringAsync(atlasUrl);\n\n    if (!_json || typeof _atlas !== 'string') {\n      console.error('loadSpine: Invalid props. Please provide: `{ json: Object, atlas: string, assetProvider: Function }`');\n    }\n\n    var customAssetProvider = function () {\n      var _ref2 = _asyncToGenerator(function* (line, callback) {\n        var getAsset = function () {\n          var _ref3 = _asyncToGenerator(function* () {\n            if (isFunction(assetProvider)) {\n              return new Promise(function () {\n                var _ref4 = _asyncToGenerator(function* (res) {\n                  var resource = yield assetProvider(line, res);\n\n                  if (resource) {\n                    res(resource);\n                  }\n                });\n\n                return function (_x5) {\n                  return _ref4.apply(this, arguments);\n                };\n              }());\n            } else if (isObject(assetProvider)) {\n              if (line in assetProvider) {\n                return assetProvider[line];\n              } else {\n                console.error(\"loadSpine: object `assetProvider` doesn't contain key\", line);\n              }\n            } else {\n              console.error('loadSpine: prop `assetProvider` must be a function: (path: string, loaderFunction: (tex: PIXI.BaseTexture) => any) => any, callback?: (obj: TextureAtlas) => any');\n            }\n          });\n\n          return function getAsset() {\n            return _ref3.apply(this, arguments);\n          };\n        }();\n\n        var asset = yield getAsset();\n\n        if (asset) {\n          if (asset instanceof PIXI.BaseTexture) {\n            callback(asset || asset.baseTexture);\n            return;\n          } else {\n            var texture = yield PIXI.Texture.fromExpoAsync(asset);\n\n            if (texture) {\n              callback(texture.baseTexture || texture);\n              return;\n            } else {\n              console.error('loadSpine: invalid texture provided for', line);\n            }\n          }\n        }\n\n        callback(null);\n      });\n\n      return function customAssetProvider(_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    var spineAtlas = yield new Promise(res => new TextureAtlas(_atlas, customAssetProvider, res));\n    var atlasAttachment = new AtlasAttachmentLoader(spineAtlas);\n    var spineJsonParser = new SkeletonJson(atlasAttachment);\n    var spineData = spineJsonParser.readSkeletonData(_json);\n    return new Spine(spineData);\n  });\n  return _spineAsync.apply(this, arguments);\n}\n\nexport default spineAsync;","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/expo-pixi/lib/spineAsync.js"],"names":["uriAsync","readAsStringAsync","PIXI","isFunction","functionToCheck","toString","call","isObject","obj","jsonFromResourceAsync","resource","jsonUrl","jsonString","JSON","parse","spineAsync","json","atlas","assetProvider","spine","require","Spine","core","TextureAtlas","AtlasAttachmentLoader","SkeletonJson","_json","console","error","bones","atlasUrl","_atlas","customAssetProvider","line","callback","getAsset","Promise","res","asset","BaseTexture","baseTexture","texture","Texture","fromExpoAsync","spineAtlas","atlasAttachment","spineJsonParser","spineData","readSkeletonData"],"mappings":"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","sourcesContent":["import { uriAsync } from 'expo-asset-utils';\nimport { readAsStringAsync } from 'expo-file-system';\nimport PIXI from './Pixi';\n\nfunction isFunction(functionToCheck) {\n  return (\n    functionToCheck && {}.toString.call(functionToCheck) === '[object Function]'\n  );\n}\n\nfunction isObject(obj) {\n  return obj !== null && typeof obj === 'object';\n}\n\nasync function jsonFromResourceAsync(resource) {\n  const jsonUrl = await uriAsync(resource);\n  const jsonString = await readAsStringAsync(jsonUrl);\n  return JSON.parse(jsonString);\n}\n\nasync function spineAsync({ json, atlas, assetProvider }) {\n  // If spine doesn't exist in the global instance of PIXI, import it!\n  if (!PIXI.spine) {\n    require('pixi-spine');\n    // console.error('loadSpineAsync: please import `pixi-spine`');\n  }\n  const { Spine, core } = PIXI.spine;\n  const { TextureAtlas, AtlasAttachmentLoader, SkeletonJson } = core;\n\n  // Parse json - it's a mess because sometimes json can be loaded as a resource, in that case we want to download and parse it.\n  let _json = null;\n  if (json === null) {\n    console.error(\n      'loadSpineAsync: Please provide a valid resource for the `json` prop'\n    );\n    return null;\n  } else {\n    if (typeof json === 'number') {\n      _json = await jsonFromResourceAsync(json);\n    } else if (typeof json === 'object') {\n      if (json.bones) {\n        _json = json;\n      } else {\n        _json = await jsonFromResourceAsync(json);\n      }\n    }\n  }\n  // Downlaod the atlas file\n  const atlasUrl = await uriAsync(atlas);\n  const _atlas = await readAsStringAsync(atlasUrl);\n\n  if (!_json || typeof _atlas !== 'string') {\n    console.error(\n      'loadSpine: Invalid props. Please provide: `{ json: Object, atlas: string, assetProvider: Function }`'\n    );\n  }\n\n  const customAssetProvider = async (line, callback) => {\n    const getAsset = async () => {\n      if (isFunction(assetProvider)) {\n        return new Promise(async res => {\n          const resource = await assetProvider(line, res);\n          if (resource) {\n            res(resource);\n          }\n        });\n      } else if (isObject(assetProvider)) {\n        if (line in assetProvider) {\n          return assetProvider[line];\n        } else {\n          console.error(\n            \"loadSpine: object `assetProvider` doesn't contain key\",\n            line\n          );\n        }\n      } else {\n        console.error(\n          'loadSpine: prop `assetProvider` must be a function: (path: string, loaderFunction: (tex: PIXI.BaseTexture) => any) => any, callback?: (obj: TextureAtlas) => any'\n        );\n      }\n    };\n\n    const asset = await getAsset();\n    if (asset) {\n      if (asset instanceof PIXI.BaseTexture) {\n        callback(asset || asset.baseTexture);\n        return;\n      } else {\n        const texture = await PIXI.Texture.fromExpoAsync(asset);\n        if (texture) {\n          callback(texture.baseTexture || texture);\n          return;\n        } else {\n          console.error('loadSpine: invalid texture provided for', line);\n        }\n      }\n    }\n\n    callback(null);\n  };\n\n  const spineAtlas = await new Promise(\n    res => new TextureAtlas(_atlas, customAssetProvider, res)\n  );\n  const atlasAttachment = new AtlasAttachmentLoader(spineAtlas);\n  const spineJsonParser = new SkeletonJson(atlasAttachment);\n  const spineData = spineJsonParser.readSkeletonData(_json);\n  // Create spine instance\n  return new Spine(spineData);\n}\n\nexport default spineAsync;\n"]},"metadata":{},"sourceType":"module"}