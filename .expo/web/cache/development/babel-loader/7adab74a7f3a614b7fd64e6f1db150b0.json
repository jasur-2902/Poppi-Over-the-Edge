{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { Platform } from '@unimodules/core';\nimport * as FileSystem from 'expo-file-system';\nimport Constants from 'expo-constants';\nimport computeMd5 from 'blueimp-md5';\nimport { getAssetByID } from \"./AssetRegistry\";\nimport resolveAssetSource, { setCustomSourceTransformer } from \"./resolveAssetSource\";\nimport * as AssetSources from \"./AssetSources\";\nimport * as AssetUris from \"./AssetUris\";\nimport * as EmbeddedAssets from \"./EmbeddedAssets\";\nimport * as ImageAssets from \"./ImageAssets\";\nvar IS_MANAGED_ENV = !!Constants.appOwnership;\nexport class Asset {\n  constructor(_ref) {\n    var {\n      name,\n      type,\n      hash = null,\n      uri,\n      width,\n      height\n    } = _ref;\n    this.hash = null;\n    this.localUri = null;\n    this.width = null;\n    this.height = null;\n    this.downloading = false;\n    this.downloaded = false;\n    this._downloadCallbacks = [];\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n\n    if (IS_MANAGED_ENV && hash) {\n      this.localUri = EmbeddedAssets.getEmbeddedAssetUri(hash, type);\n\n      if (this.localUri) {\n        this.downloaded = true;\n      }\n    }\n  }\n\n  static loadAsync(moduleId) {\n    var moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n    return Promise.all(moduleIds.map(moduleId => Asset.fromModule(moduleId).downloadAsync()));\n  }\n\n  static fromModule(virtualAssetModule) {\n    if (typeof virtualAssetModule === 'string') {\n      return Asset.fromURI(virtualAssetModule);\n    }\n\n    var meta = getAssetByID(virtualAssetModule);\n\n    if (!meta) {\n      throw new Error(\"Module \\\"\".concat(virtualAssetModule, \"\\\" is missing from the asset registry\"));\n    }\n\n    if (!IS_MANAGED_ENV) {\n      var {\n        uri\n      } = resolveAssetSource(virtualAssetModule);\n      var asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash: meta.hash,\n        uri,\n        width: meta.width,\n        height: meta.height\n      });\n\n      if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n        asset.localUri = asset.uri;\n        asset.downloaded = true;\n      }\n\n      Asset.byHash[meta.hash] = asset;\n      return asset;\n    }\n\n    return Asset.fromMetadata(meta);\n  }\n\n  static fromMetadata(meta) {\n    var metaHash = meta.hash;\n\n    if (Asset.byHash[metaHash]) {\n      return Asset.byHash[metaHash];\n    } else if (!IS_MANAGED_ENV && !Asset.byHash[metaHash]) {\n      throw new Error('Assets must be initialized with Asset.fromModule');\n    }\n\n    var {\n      uri,\n      hash\n    } = AssetSources.selectAssetSource(meta);\n    var asset = new Asset({\n      name: meta.name,\n      type: meta.type,\n      hash,\n      uri,\n      width: meta.width,\n      height: meta.height\n    });\n    Asset.byHash[metaHash] = asset;\n    return asset;\n  }\n\n  static fromURI(uri) {\n    if (Asset.byUri[uri]) {\n      return Asset.byUri[uri];\n    }\n\n    var type = '';\n\n    if (uri.indexOf(';base64') > -1) {\n      type = uri.split(';')[0].split('/')[1];\n    } else {\n      var extension = AssetUris.getFileExtension(uri);\n      type = extension.startsWith('.') ? extension.substring(1) : extension;\n    }\n\n    var asset = new Asset({\n      name: '',\n      type,\n      hash: null,\n      uri\n    });\n    Asset.byUri[uri] = asset;\n    return asset;\n  }\n\n  _downloadAsyncWeb() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (ImageAssets.isImageType(_this.type)) {\n        var {\n          width,\n          height,\n          name\n        } = yield ImageAssets.getImageInfoAsync(_this.uri);\n        _this.width = width;\n        _this.height = height;\n        _this.name = name;\n      } else {\n        _this.name = AssetUris.getFilename(_this.uri);\n      }\n\n      _this.localUri = _this.uri;\n    })();\n  }\n\n  _downloadAsyncManagedEnv() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      var cacheFileId = _this2.hash || computeMd5(_this2.uri);\n      var localUri = \"\".concat(FileSystem.cacheDirectory, \"ExponentAsset-\").concat(cacheFileId, \".\").concat(_this2.type);\n      var {\n        exists,\n        md5\n      } = yield FileSystem.getInfoAsync(localUri, {\n        md5: true\n      });\n\n      if (!exists || _this2.hash !== null && md5 !== _this2.hash) {\n        ({\n          md5\n        } = yield FileSystem.downloadAsync(_this2.uri, localUri, {\n          md5: true\n        }));\n\n        if (_this2.hash !== null && md5 !== _this2.hash) {\n          throw new Error(\"Downloaded file for asset '\".concat(_this2.name, \".\").concat(_this2.type, \"' \") + \"Located at \".concat(_this2.uri, \" \") + \"failed MD5 integrity check\");\n        }\n      }\n\n      _this2.localUri = localUri;\n    })();\n  }\n\n  _downloadAsyncUnmanagedEnv() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.uri.startsWith('file://')) {\n        _this3.localUri = _this3.uri;\n        return;\n      }\n\n      var cacheFileId = _this3.hash || computeMd5(_this3.uri);\n      var localUri = \"\".concat(FileSystem.cacheDirectory, \"ExponentAsset-\").concat(cacheFileId, \".\").concat(_this3.type);\n      yield FileSystem.downloadAsync(_this3.uri, localUri);\n      _this3.localUri = localUri;\n    })();\n  }\n\n  downloadAsync() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this4.downloaded) {\n        return;\n      }\n\n      if (_this4.downloading) {\n        yield new Promise((resolve, reject) => {\n          _this4._downloadCallbacks.push({\n            resolve,\n            reject\n          });\n        });\n        return;\n      }\n\n      _this4.downloading = true;\n\n      try {\n        if (Platform.OS === 'web') {\n          yield _this4._downloadAsyncWeb();\n        } else if (IS_MANAGED_ENV) {\n          yield _this4._downloadAsyncManagedEnv();\n        } else {\n          yield _this4._downloadAsyncUnmanagedEnv();\n        }\n\n        _this4.downloaded = true;\n\n        _this4._downloadCallbacks.forEach((_ref2) => {\n          var {\n            resolve\n          } = _ref2;\n          return resolve();\n        });\n      } catch (e) {\n        _this4._downloadCallbacks.forEach((_ref3) => {\n          var {\n            reject\n          } = _ref3;\n          return reject(e);\n        });\n\n        throw e;\n      } finally {\n        _this4.downloading = false;\n        _this4._downloadCallbacks = [];\n      }\n    })();\n  }\n\n}\nAsset.byHash = {};\nAsset.byUri = {};\nsetCustomSourceTransformer(resolver => {\n  try {\n    var asset = Asset.fromMetadata(resolver.asset);\n    return resolver.fromSource(asset.downloaded ? asset.localUri : asset.uri);\n  } catch (e) {\n    return resolver.defaultAsset();\n  }\n});","map":{"version":3,"sources":["../src/Asset.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from '@unimodules/core';\nimport * as FileSystem from 'expo-file-system';\nimport Constants from 'expo-constants';\nimport computeMd5 from 'blueimp-md5';\nimport { getAssetByID } from './AssetRegistry';\nimport resolveAssetSource, { setCustomSourceTransformer } from './resolveAssetSource';\n\nimport * as AssetSources from './AssetSources';\nimport * as AssetUris from './AssetUris';\nimport * as EmbeddedAssets from './EmbeddedAssets';\nimport * as ImageAssets from './ImageAssets';\n\ntype AssetDescriptor = {\n  name: string;\n  type: string;\n  hash?: string | null;\n  uri: string;\n  width?: number | null;\n  height?: number | null;\n};\n\ntype DownloadPromiseCallbacks = {\n  resolve: () => void;\n  reject: (error: Error) => void;\n};\n\nexport type AssetMetadata = AssetSources.AssetMetadata;\n\nconst IS_MANAGED_ENV = !!Constants.appOwnership;\n\nexport class Asset {\n  static byHash = {};\n  static byUri = {};\n\n  name: string;\n  type: string;\n  hash: string | null = null;\n  uri: string;\n  localUri: string | null = null;\n  width: number | null = null;\n  height: number | null = null;\n  downloading: boolean = false;\n  downloaded: boolean = false;\n  _downloadCallbacks: DownloadPromiseCallbacks[] = [];\n\n  constructor({ name, type, hash = null, uri, width, height }: AssetDescriptor) {\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n\n    // This only applies to assets that are bundled in Expo standalone apps\n    if (IS_MANAGED_ENV && hash) {\n      this.localUri = EmbeddedAssets.getEmbeddedAssetUri(hash, type);\n      if (this.localUri) {\n        this.downloaded = true;\n      }\n    }\n  }\n\n  static loadAsync(moduleId: number | number[]): Promise<void[]> {\n    const moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n    return Promise.all(moduleIds.map(moduleId => Asset.fromModule(moduleId).downloadAsync()));\n  }\n\n  static fromModule(virtualAssetModule: number | string): Asset {\n    if (typeof virtualAssetModule === 'string') {\n      return Asset.fromURI(virtualAssetModule);\n    }\n\n    const meta = getAssetByID(virtualAssetModule);\n    if (!meta) {\n      throw new Error(`Module \"${virtualAssetModule}\" is missing from the asset registry`);\n    }\n\n    // Outside of the managed env we need the moduleId to initialize the asset\n    // because resolveAssetSource depends on it\n    if (!IS_MANAGED_ENV) {\n      const { uri } = resolveAssetSource(virtualAssetModule);\n      const asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash: meta.hash,\n        uri,\n        width: meta.width,\n        height: meta.height,\n      });\n\n      // TODO: FileSystem should probably support 'downloading' from drawable\n      // resources But for now it doesn't (it only supports raw resources) and\n      // React Native's Image works fine with drawable resource names for\n      // images.\n      if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n        asset.localUri = asset.uri;\n        asset.downloaded = true;\n      }\n\n      Asset.byHash[meta.hash] = asset;\n      return asset;\n    }\n\n    return Asset.fromMetadata(meta);\n  }\n\n  static fromMetadata(meta: AssetMetadata): Asset {\n    // The hash of the whole asset, not to be confused with the hash of a specific file returned\n    // from `selectAssetSource`\n    const metaHash = meta.hash;\n    if (Asset.byHash[metaHash]) {\n      return Asset.byHash[metaHash];\n    } else if (!IS_MANAGED_ENV && !Asset.byHash[metaHash]) {\n      throw new Error('Assets must be initialized with Asset.fromModule');\n    }\n\n    const { uri, hash } = AssetSources.selectAssetSource(meta);\n    const asset = new Asset({\n      name: meta.name,\n      type: meta.type,\n      hash,\n      uri,\n      width: meta.width,\n      height: meta.height,\n    });\n    Asset.byHash[metaHash] = asset;\n    return asset;\n  }\n\n  static fromURI(uri: string): Asset {\n    if (Asset.byUri[uri]) {\n      return Asset.byUri[uri];\n    }\n\n    // Possibly a Base64-encoded URI\n    let type = '';\n    if (uri.indexOf(';base64') > -1) {\n      type = uri.split(';')[0].split('/')[1];\n    } else {\n      const extension = AssetUris.getFileExtension(uri);\n      type = extension.startsWith('.') ? extension.substring(1) : extension;\n    }\n\n    const asset = new Asset({\n      name: '',\n      type,\n      hash: null,\n      uri,\n    });\n\n    Asset.byUri[uri] = asset;\n\n    return asset;\n  }\n\n  async _downloadAsyncWeb(): Promise<void> {\n    if (ImageAssets.isImageType(this.type)) {\n      const { width, height, name } = await ImageAssets.getImageInfoAsync(this.uri);\n      this.width = width;\n      this.height = height;\n      this.name = name;\n    } else {\n      this.name = AssetUris.getFilename(this.uri);\n    }\n    this.localUri = this.uri;\n  }\n\n  async _downloadAsyncManagedEnv(): Promise<void> {\n    const cacheFileId = this.hash || computeMd5(this.uri);\n    const localUri = `${FileSystem.cacheDirectory}ExponentAsset-${cacheFileId}.${this.type}`;\n    let { exists, md5 } = await FileSystem.getInfoAsync(localUri, {\n      md5: true,\n    });\n    if (!exists || (this.hash !== null && md5 !== this.hash)) {\n      ({ md5 } = await FileSystem.downloadAsync(this.uri, localUri, {\n        md5: true,\n      }));\n      if (this.hash !== null && md5 !== this.hash) {\n        throw new Error(\n          `Downloaded file for asset '${this.name}.${this.type}' ` +\n            `Located at ${this.uri} ` +\n            `failed MD5 integrity check`\n        );\n      }\n    }\n\n    this.localUri = localUri;\n  }\n\n  async _downloadAsyncUnmanagedEnv(): Promise<void> {\n    // Bail out if it's already at a file URL because it's already available locally\n    if (this.uri.startsWith('file://')) {\n      this.localUri = this.uri;\n      return;\n    }\n\n    const cacheFileId = this.hash || computeMd5(this.uri);\n    const localUri = `${FileSystem.cacheDirectory}ExponentAsset-${cacheFileId}.${this.type}`;\n    // We don't check the FileSystem for an existing version of the asset and we\n    // also don't perform an integrity check!\n    await FileSystem.downloadAsync(this.uri, localUri);\n    this.localUri = localUri;\n  }\n\n  async downloadAsync(): Promise<void> {\n    if (this.downloaded) {\n      return;\n    }\n    if (this.downloading) {\n      await new Promise((resolve, reject) => {\n        this._downloadCallbacks.push({ resolve, reject });\n      });\n      return;\n    }\n    this.downloading = true;\n\n    try {\n      if (Platform.OS === 'web') {\n        await this._downloadAsyncWeb();\n      } else if (IS_MANAGED_ENV) {\n        await this._downloadAsyncManagedEnv();\n      } else {\n        await this._downloadAsyncUnmanagedEnv();\n      }\n\n      this.downloaded = true;\n      this._downloadCallbacks.forEach(({ resolve }) => resolve());\n    } catch (e) {\n      this._downloadCallbacks.forEach(({ reject }) => reject(e));\n      throw e;\n    } finally {\n      this.downloading = false;\n      this._downloadCallbacks = [];\n    }\n  }\n}\n\n// Override React Native's asset resolution for `Image` components\nsetCustomSourceTransformer(resolver => {\n  try {\n    const asset = Asset.fromMetadata(resolver.asset);\n    return resolver.fromSource(asset.downloaded ? asset.localUri! : asset.uri);\n  } catch (e) {\n    return resolver.defaultAsset();\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}