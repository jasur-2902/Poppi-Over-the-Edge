{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { SyntheticPlatformEmitter } from '@unimodules/core';\nimport { isSensorEnabledAsync } from \"./utils/isSensorEnabledAsync.web\";\nvar eventName = 'devicemotion';\nexport default {\n  get name() {\n    return 'ExponentDeviceMotion';\n  },\n\n  get Gravity() {\n    return 9.81;\n  },\n\n  isAvailableAsync() {\n    return _asyncToGenerator(function* () {\n      if (typeof DeviceMotionEvent === 'undefined') {\n        return false;\n      }\n\n      return yield isSensorEnabledAsync(eventName);\n    })();\n  },\n\n  _handleMotion(motion) {\n    SyntheticPlatformEmitter.emit('deviceMotionDidUpdate', {\n      acceleration: motion.acceleration,\n      accelerationIncludingGravity: motion.accelerationIncludingGravity,\n      interval: motion.interval,\n      rotationRate: motion.rotationRate,\n      orientation: window.orientation\n    });\n  },\n\n  startObserving() {\n    window.addEventListener(eventName, this._handleMotion);\n  },\n\n  stopObserving() {\n    window.removeEventListener(eventName, this._handleMotion);\n  }\n\n};","map":{"version":3,"sources":["../src/ExponentDeviceMotion.web.ts"],"names":[],"mappings":";;;;AAAA,SAAS,wBAAT,QAAyC,kBAAzC;AAEA,SAAS,oBAAT;AAEA,IAAM,SAAS,GAAG,cAAlB;AAEA,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,sBAAP;AACD,GAHY;;AAIb,MAAI,OAAJ,GAAW;AACT,WAAO,IAAP;AACD,GANY;;AAOP,EAAA,gBAAN,GAAsB;AAAA;AACpB,UAAI,OAAO,iBAAP,KAA6B,WAAjC,EAA8C;AAC5C,eAAO,KAAP;AACD;;AACD,mBAAa,oBAAoB,CAAC,SAAD,CAAjC;AAJoB;AAKrB,GAZY;;AAab,EAAA,aAAa,CAAC,MAAD,EAAO;AAElB,IAAA,wBAAwB,CAAC,IAAzB,CAA8B,uBAA9B,EAAuD;AACrD,MAAA,YAAY,EAAE,MAAM,CAAC,YADgC;AAErD,MAAA,4BAA4B,EAAE,MAAM,CAAC,4BAFgB;AAGrD,MAAA,QAAQ,EAAE,MAAM,CAAC,QAHoC;AAIrD,MAAA,YAAY,EAAE,MAAM,CAAC,YAJgC;AAKrD,MAAA,WAAW,EAAE,MAAM,CAAC;AALiC,KAAvD;AAOD,GAtBY;;AAuBb,EAAA,cAAc,GAAA;AACZ,IAAA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,KAAK,aAAxC;AACD,GAzBY;;AA0Bb,EAAA,aAAa,GAAA;AACX,IAAA,MAAM,CAAC,mBAAP,CAA2B,SAA3B,EAAsC,KAAK,aAA3C;AACD;;AA5BY,CAAf","sourcesContent":["import { SyntheticPlatformEmitter } from '@unimodules/core';\n\nimport { isSensorEnabledAsync } from './utils/isSensorEnabledAsync.web';\n\nconst eventName = 'devicemotion';\n\nexport default {\n  get name(): string {\n    return 'ExponentDeviceMotion';\n  },\n  get Gravity(): number {\n    return 9.81;\n  },\n  async isAvailableAsync(): Promise<boolean> {\n    if (typeof DeviceMotionEvent === 'undefined') {\n      return false;\n    }\n    return await isSensorEnabledAsync(eventName);\n  },\n  _handleMotion(motion) {\n    // TODO: Bacon: Can rotation be calculated?\n    SyntheticPlatformEmitter.emit('deviceMotionDidUpdate', {\n      acceleration: motion.acceleration,\n      accelerationIncludingGravity: motion.accelerationIncludingGravity,\n      interval: motion.interval,\n      rotationRate: motion.rotationRate,\n      orientation: window.orientation,\n    });\n  },\n  startObserving() {\n    window.addEventListener(eventName, this._handleMotion);\n  },\n  stopObserving() {\n    window.removeEventListener(eventName, this._handleMotion);\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}