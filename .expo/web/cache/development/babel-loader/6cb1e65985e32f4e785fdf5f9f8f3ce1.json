{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport ExpoLocalization from \"./ExpoLocalization\";\nexport default {\n  locale: ExpoLocalization.locale,\n  locales: ExpoLocalization.locales,\n  timezone: ExpoLocalization.timezone,\n  isoCurrencyCodes: ExpoLocalization.isoCurrencyCodes,\n  country: ExpoLocalization.country,\n  isRTL: ExpoLocalization.isRTL,\n\n  getLocalizationAsync() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var localization = yield ExpoLocalization.getLocalizationAsync();\n      _this.locale = ExpoLocalization.locale;\n      _this.locales = ExpoLocalization.locales;\n      _this.timezone = ExpoLocalization.timezone;\n      _this.isoCurrencyCodes = ExpoLocalization.isoCurrencyCodes;\n      _this.country = ExpoLocalization.country;\n      _this.isRTL = ExpoLocalization.isRTL;\n      return localization;\n    })();\n  }\n\n};","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/expo-localization/src/Localization.js"],"names":["ExpoLocalization","locale","locales","timezone","isoCurrencyCodes","country","isRTL","getLocalizationAsync","localization"],"mappings":";;;;AACA,OAAOA,gBAAP;AAWA,eAAe;AACbC,EAAAA,MAAM,EAAED,gBAAgB,CAACC,MADZ;AAEbC,EAAAA,OAAO,EAAEF,gBAAgB,CAACE,OAFb;AAGbC,EAAAA,QAAQ,EAAEH,gBAAgB,CAACG,QAHd;AAIbC,EAAAA,gBAAgB,EAAEJ,gBAAgB,CAACI,gBAJtB;AAKbC,EAAAA,OAAO,EAAEL,gBAAgB,CAACK,OALb;AAMbC,EAAAA,KAAK,EAAEN,gBAAgB,CAACM,KANX;;AAOPC,EAAAA,oBAAN,GAAoD;AAAA;;AAAA;AAClD,UAAMC,YAAY,SAASR,gBAAgB,CAACO,oBAAjB,EAA3B;AACA,MAAA,KAAI,CAACN,MAAL,GAAcD,gBAAgB,CAACC,MAA/B;AACA,MAAA,KAAI,CAACC,OAAL,GAAeF,gBAAgB,CAACE,OAAhC;AACA,MAAA,KAAI,CAACC,QAAL,GAAgBH,gBAAgB,CAACG,QAAjC;AACA,MAAA,KAAI,CAACC,gBAAL,GAAwBJ,gBAAgB,CAACI,gBAAzC;AACA,MAAA,KAAI,CAACC,OAAL,GAAeL,gBAAgB,CAACK,OAAhC;AACA,MAAA,KAAI,CAACC,KAAL,GAAaN,gBAAgB,CAACM,KAA9B;AACA,aAAOE,YAAP;AARkD;AASnD;;AAhBY,CAAf","sourcesContent":["// @flow\nimport ExpoLocalization from './ExpoLocalization';\n\ntype Localization = {\n  locale: string,\n  locales: Array<string>,\n  timezone: string,\n  isoCurrencyCodes: ?Array<string>,\n  country: ?string,\n  isRTL: boolean,\n};\n\nexport default {\n  locale: ExpoLocalization.locale,\n  locales: ExpoLocalization.locales,\n  timezone: ExpoLocalization.timezone,\n  isoCurrencyCodes: ExpoLocalization.isoCurrencyCodes,\n  country: ExpoLocalization.country,\n  isRTL: ExpoLocalization.isRTL,\n  async getLocalizationAsync(): Promise<Localization> {\n    const localization = await ExpoLocalization.getLocalizationAsync();\n    this.locale = ExpoLocalization.locale;\n    this.locales = ExpoLocalization.locales;\n    this.timezone = ExpoLocalization.timezone;\n    this.isoCurrencyCodes = ExpoLocalization.isoCurrencyCodes;\n    this.country = ExpoLocalization.country;\n    this.isRTL = ExpoLocalization.isRTL;\n    return localization;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}