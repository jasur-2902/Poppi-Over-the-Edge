{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { Asset } from 'expo-asset';\nimport Constants from 'expo-constants';\nimport { Platform } from '@unimodules/core';\nimport ExpoFontLoader from \"./ExpoFontLoader\";\nvar isWeb = Platform.OS === 'web';\nvar loaded = {};\nvar loadPromises = {};\nexport function processFontFamily(name) {\n  if (typeof name !== 'string' || Constants.systemFonts.includes(name) || name === 'System') {\n    return name;\n  }\n\n  if (name.includes(Constants.sessionId)) {\n    return name;\n  }\n\n  if (!isLoaded(name)) {\n    if (__DEV__) {\n      if (isLoading(name)) {\n        console.error(\"You started loading the font \\\"\".concat(name, \"\\\", but used it before it finished loading.\\n\\n- You need to wait for Font.loadAsync to complete before using the font.\\n\\n- We recommend loading all fonts before rendering the app, and rendering only Expo.AppLoading while waiting for loading to complete.\"));\n      } else {\n        console.error(\"fontFamily \\\"\".concat(name, \"\\\" is not a system font and has not been loaded through Font.loadAsync.\\n\\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\\n- If this is a custom font, be sure to load it with Font.loadAsync.\"));\n      }\n    }\n\n    return 'System';\n  }\n\n  return \"ExpoFont-\".concat(_getNativeFontName(name));\n}\nexport function isLoaded(name) {\n  return loaded.hasOwnProperty(name);\n}\nexport function isLoading(name) {\n  return loadPromises.hasOwnProperty(name);\n}\nexport function loadAsync(_x, _x2) {\n  return _loadAsync.apply(this, arguments);\n}\n\nfunction _loadAsync() {\n  _loadAsync = _asyncToGenerator(function* (nameOrMap, source) {\n    if (typeof nameOrMap === 'object') {\n      var fontMap = nameOrMap;\n      var names = Object.keys(fontMap);\n      yield Promise.all(names.map(name => loadAsync(name, fontMap[name])));\n      return;\n    }\n\n    var name = nameOrMap;\n\n    if (loaded[name]) {\n      return;\n    }\n\n    if (loadPromises[name]) {\n      return loadPromises[name];\n    }\n\n    if (!source) {\n      throw new Error(\"No source from which to load font \\\"\".concat(name, \"\\\"\"));\n    }\n\n    var asset = _getAssetForSource(source);\n\n    loadPromises[name] = _asyncToGenerator(function* () {\n      try {\n        yield _loadSingleFontAsync(name, asset);\n        loaded[name] = true;\n      } finally {\n        delete loadPromises[name];\n      }\n    })();\n    yield loadPromises[name];\n  });\n  return _loadAsync.apply(this, arguments);\n}\n\nfunction _getAssetForSource(source) {\n  if (source instanceof Asset) {\n    return source;\n  }\n\n  if (!isWeb && typeof source === 'string') {\n    return Asset.fromURI(source);\n  }\n\n  if (isWeb || typeof source === 'number') {\n    return Asset.fromModule(source);\n  }\n\n  return source;\n}\n\nfunction _loadSingleFontAsync(_x3, _x4) {\n  return _loadSingleFontAsync2.apply(this, arguments);\n}\n\nfunction _loadSingleFontAsync2() {\n  _loadSingleFontAsync2 = _asyncToGenerator(function* (name, asset) {\n    yield asset.downloadAsync();\n\n    if (!asset.downloaded) {\n      throw new Error(\"Failed to download asset for font \\\"\".concat(name, \"\\\"\"));\n    }\n\n    yield ExpoFontLoader.loadAsync(_getNativeFontName(name), asset.localUri);\n  });\n  return _loadSingleFontAsync2.apply(this, arguments);\n}\n\nfunction _getNativeFontName(name) {\n  if (isWeb) {\n    return name;\n  }\n\n  return \"\".concat(Constants.sessionId, \"-\").concat(name);\n}\n\nif (module && module.exports) {\n  var wasImportWarningShown = false;\n  Object.defineProperty(exports, 'Font', {\n    get() {\n      if (!wasImportWarningShown) {\n        console.warn(\"The syntax \\\"import { Font } from 'expo-font'\\\" is deprecated. Use \\\"import * as Font from 'expo-font'\\\" or import named exports instead. Support for the old syntax will be removed in SDK 33.\");\n        wasImportWarningShown = true;\n      }\n\n      return {\n        processFontFamily,\n        isLoaded,\n        isLoading,\n        loadAsync\n      };\n    }\n\n  });\n}","map":{"version":3,"sources":["../src/Font.ts"],"names":[],"mappings":"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","sourcesContent":["import { Asset } from 'expo-asset';\nimport Constants from 'expo-constants';\nimport { Platform } from '@unimodules/core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\n\n/**\n * A font source can be a URI, a module ID, or an Expo Asset.\n */\ntype FontSource = string | number | Asset;\n\nconst isWeb = Platform.OS === 'web';\nconst loaded: { [name: string]: boolean } = {};\nconst loadPromises: { [name: string]: Promise<void> } = {};\n\nexport function processFontFamily(name: string | null): string | null {\n  if (typeof name !== 'string' || Constants.systemFonts.includes(name) || name === 'System') {\n    return name;\n  }\n\n  if (name.includes(Constants.sessionId)) {\n    return name;\n  }\n\n  if (!isLoaded(name)) {\n    if (__DEV__) {\n      if (isLoading(name)) {\n        console.error(\n          `You started loading the font \"${name}\", but used it before it finished loading.\\n\n- You need to wait for Font.loadAsync to complete before using the font.\\n\n- We recommend loading all fonts before rendering the app, and rendering only Expo.AppLoading while waiting for loading to complete.`\n        );\n      } else {\n        console.error(\n          `fontFamily \"${name}\" is not a system font and has not been loaded through Font.loadAsync.\\n\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\n- If this is a custom font, be sure to load it with Font.loadAsync.`\n        );\n      }\n    }\n\n    return 'System';\n  }\n\n  return `ExpoFont-${_getNativeFontName(name)}`;\n}\n\nexport function isLoaded(name: string): boolean {\n  return loaded.hasOwnProperty(name);\n}\n\nexport function isLoading(name: string): boolean {\n  return loadPromises.hasOwnProperty(name);\n}\n\nexport async function loadAsync(\n  nameOrMap: string | { [name: string]: FontSource },\n  source?: FontSource\n): Promise<void> {\n  if (typeof nameOrMap === 'object') {\n    const fontMap = nameOrMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map(name => loadAsync(name, fontMap[name])));\n    return;\n  }\n\n  const name = nameOrMap;\n\n  if (loaded[name]) {\n    return;\n  }\n\n  if (loadPromises[name]) {\n    return loadPromises[name];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  if (!source) {\n    throw new Error(`No source from which to load font \"${name}\"`);\n  }\n  const asset = _getAssetForSource(source);\n  loadPromises[name] = (async () => {\n    try {\n      await _loadSingleFontAsync(name, asset);\n      loaded[name] = true;\n    } finally {\n      delete loadPromises[name];\n    }\n  })();\n\n  await loadPromises[name];\n}\n\nfunction _getAssetForSource(source: FontSource): Asset {\n  if (source instanceof Asset) {\n    return source;\n  }\n\n  if (!isWeb && typeof source === 'string') {\n    return Asset.fromURI(source);\n  }\n\n  if (isWeb || typeof source === 'number') {\n    return Asset.fromModule(source);\n  }\n\n  // @ts-ignore Error: Type 'string' is not assignable to type 'Asset'\n  // We can't have a string here, we would have thrown an error if !isWeb\n  // or returned Asset.fromModule if isWeb.\n  return source;\n}\n\nasync function _loadSingleFontAsync(name: string, asset: Asset): Promise<void> {\n  await asset.downloadAsync();\n  if (!asset.downloaded) {\n    throw new Error(`Failed to download asset for font \"${name}\"`);\n  }\n  await ExpoFontLoader.loadAsync(_getNativeFontName(name), asset.localUri);\n}\n\nfunction _getNativeFontName(name: string): string {\n  if (isWeb) {\n    return name;\n  }\n  return `${Constants.sessionId}-${name}`;\n}\n\ndeclare var module: any;\n\nif (module && module.exports) {\n  let wasImportWarningShown = false;\n  // @ts-ignore: Temporarily define an export named \"Font\" for legacy compatibility\n  Object.defineProperty(exports, 'Font', {\n    get() {\n      if (!wasImportWarningShown) {\n        console.warn(\n          `The syntax \"import { Font } from 'expo-font'\" is deprecated. Use \"import * as Font from 'expo-font'\" or import named exports instead. Support for the old syntax will be removed in SDK 33.`\n        );\n        wasImportWarningShown = true;\n      }\n      return {\n        processFontFamily,\n        isLoaded,\n        isLoading,\n        loadAsync,\n      };\n    },\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}