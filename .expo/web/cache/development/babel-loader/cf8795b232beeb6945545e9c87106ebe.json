{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jshukurov\\\\Desktop\\\\Poppi Over The Edge\\\\Poppi-Over-the-Edge-master\\\\node_modules\\\\react-native-super-grid\\\\FlatGrid.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef, memo, useState, useCallback, useMemo } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport PropTypes from 'prop-types';\nimport { chunkArray, calculateDimensions, generateStyles } from \"./utils\";\nvar FlatGrid = memo(forwardRef((props, ref) => {\n  var {\n    style,\n    spacing,\n    fixed,\n    data,\n    itemDimension,\n    renderItem,\n    horizontal,\n    onLayout,\n    staticDimension,\n    maxDimension,\n    itemContainerStyle,\n    keyExtractor\n  } = props,\n      restProps = _objectWithoutProperties(props, [\"style\", \"spacing\", \"fixed\", \"data\", \"itemDimension\", \"renderItem\", \"horizontal\", \"onLayout\", \"staticDimension\", \"maxDimension\", \"itemContainerStyle\", \"keyExtractor\"]);\n\n  if (props.items && !props.data) {\n    throw new Error('React Native Super Grid - Prop \"items\" has been renamed to \"data\" in version 4');\n  }\n\n  var [totalDimension, setTotalDimension] = useState(() => {\n    var defaultTotalDimension = staticDimension;\n\n    if (!staticDimension) {\n      var dimension = horizontal ? 'height' : 'width';\n      defaultTotalDimension = maxDimension || Dimensions.get('window')[dimension];\n    }\n\n    return defaultTotalDimension;\n  });\n  var onLayoutLocal = useCallback(e => {\n    if (!staticDimension) {\n      var {\n        width,\n        height\n      } = e.nativeEvent.layout || {};\n      var newTotalDimension = horizontal ? height : width;\n\n      if (maxDimension && newTotalDimension > maxDimension) {\n        newTotalDimension = maxDimension;\n      }\n\n      if (totalDimension !== newTotalDimension) {\n        setTotalDimension(newTotalDimension);\n      }\n    }\n\n    if (onLayout) {\n      onLayout(e);\n    }\n  }, [staticDimension, maxDimension, totalDimension, horizontal, onLayout]);\n  var renderRow = useCallback((_ref) => {\n    var {\n      rowItems,\n      rowIndex,\n      separators,\n      isLastRow,\n      itemsPerRow,\n      rowStyle,\n      containerStyle\n    } = _ref;\n    var additionalRowStyle = {};\n\n    if (isLastRow) {\n      additionalRowStyle = _objectSpread(_objectSpread({}, !horizontal ? {\n        marginBottom: spacing\n      } : {}), horizontal ? {\n        marginRight: spacing\n      } : {});\n    }\n\n    return React.createElement(View, {\n      style: [rowStyle, additionalRowStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, rowItems.map((item, i) => React.createElement(View, {\n      key: keyExtractor ? keyExtractor(item, i) : \"item_\".concat(rowIndex * itemsPerRow + i),\n      style: [containerStyle, itemContainerStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }\n    }, renderItem({\n      item,\n      index: rowIndex * itemsPerRow + i,\n      separators,\n      rowIndex\n    }))));\n  }, [renderItem, spacing, keyExtractor, itemContainerStyle, horizontal]);\n  var {\n    containerDimension,\n    itemsPerRow,\n    fixedSpacing\n  } = useMemo(() => calculateDimensions({\n    itemDimension,\n    staticDimension,\n    totalDimension,\n    spacing,\n    fixed\n  }), [itemDimension, staticDimension, totalDimension, spacing, fixed]);\n  var {\n    containerStyle,\n    rowStyle\n  } = useMemo(() => generateStyles({\n    horizontal,\n    itemDimension,\n    containerDimension,\n    spacing,\n    fixedSpacing,\n    fixed\n  }), [horizontal, itemDimension, containerDimension, spacing, fixedSpacing, fixed]);\n  var rows = chunkArray(data, itemsPerRow);\n  var localKeyExtractor = useCallback((rowItems, index) => {\n    if (keyExtractor) {\n      return rowItems.map((rowItem, rowItemIndex) => keyExtractor(rowItem, rowItemIndex)).join('_');\n    }\n\n    return \"row_\".concat(index);\n  }, [keyExtractor]);\n  return React.createElement(FlatList, _extends({\n    data: rows,\n    ref: ref,\n    extraData: totalDimension,\n    renderItem: (_ref2) => {\n      var {\n        item,\n        index\n      } = _ref2;\n      return renderRow({\n        rowItems: item,\n        rowIndex: index,\n        isLastRow: index === rows.length - 1,\n        itemsPerRow,\n        rowStyle,\n        containerStyle\n      });\n    },\n    style: [_objectSpread({}, horizontal ? {\n      paddingLeft: spacing\n    } : {\n      paddingTop: spacing\n    }), style],\n    onLayout: onLayoutLocal,\n    keyExtractor: localKeyExtractor\n  }, restProps, {\n    horizontal: horizontal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }));\n}));\nFlatGrid.displayName = 'FlatGrid';\nFlatGrid.propTypes = {\n  renderItem: PropTypes.func.isRequired,\n  data: PropTypes.arrayOf(PropTypes.any).isRequired,\n  itemDimension: PropTypes.number,\n  fixed: PropTypes.bool,\n  spacing: PropTypes.number,\n  style: ViewPropTypes.style,\n  itemContainerStyle: ViewPropTypes.style,\n  staticDimension: PropTypes.number,\n  horizontal: PropTypes.bool,\n  onLayout: PropTypes.func,\n  keyExtractor: PropTypes.func,\n  listKey: PropTypes.string\n};\nFlatGrid.defaultProps = {\n  fixed: false,\n  itemDimension: 120,\n  spacing: 10,\n  style: {},\n  itemContainerStyle: undefined,\n  staticDimension: undefined,\n  horizontal: false,\n  onLayout: null,\n  keyExtractor: null,\n  listKey: undefined\n};\nexport default FlatGrid;","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/react-native-super-grid/FlatGrid.js"],"names":["React","forwardRef","memo","useState","useCallback","useMemo","PropTypes","chunkArray","calculateDimensions","generateStyles","FlatGrid","props","ref","style","spacing","fixed","data","itemDimension","renderItem","horizontal","onLayout","staticDimension","maxDimension","itemContainerStyle","keyExtractor","restProps","items","Error","totalDimension","setTotalDimension","defaultTotalDimension","dimension","Dimensions","get","onLayoutLocal","e","width","height","nativeEvent","layout","newTotalDimension","renderRow","rowItems","rowIndex","separators","isLastRow","itemsPerRow","rowStyle","containerStyle","additionalRowStyle","marginBottom","marginRight","map","item","i","index","containerDimension","fixedSpacing","rows","localKeyExtractor","rowItem","rowItemIndex","join","length","paddingLeft","paddingTop","displayName","propTypes","func","isRequired","arrayOf","any","number","bool","ViewPropTypes","listKey","string","defaultProps","undefined"],"mappings":"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","sourcesContent":["import React, {\n  forwardRef, memo, useState, useCallback, useMemo,\n} from 'react';\nimport {\n  View, Dimensions, ViewPropTypes, FlatList,\n} from 'react-native';\nimport PropTypes from 'prop-types';\nimport { chunkArray, calculateDimensions, generateStyles } from './utils';\n\n\nconst FlatGrid = memo(\n  forwardRef((props, ref) => {\n    const {\n      style,\n      spacing,\n      fixed,\n      data,\n      itemDimension,\n      renderItem,\n      horizontal,\n      onLayout,\n      staticDimension,\n      maxDimension,\n      itemContainerStyle,\n      keyExtractor,\n      ...restProps\n    } = props;\n\n    if (props.items && !props.data) {\n      // eslint-disable-next-line no-console\n      throw new Error('React Native Super Grid - Prop \"items\" has been renamed to \"data\" in version 4');\n    }\n\n    const [totalDimension, setTotalDimension] = useState(() => {\n      let defaultTotalDimension = staticDimension;\n\n      if (!staticDimension) {\n        const dimension = horizontal ? 'height' : 'width';\n        defaultTotalDimension = maxDimension || Dimensions.get('window')[dimension];\n      }\n\n      return defaultTotalDimension;\n    });\n\n    const onLayoutLocal = useCallback(\n      (e) => {\n        if (!staticDimension) {\n          const { width, height } = e.nativeEvent.layout || {};\n          let newTotalDimension = horizontal ? height : width;\n\n          if (maxDimension && newTotalDimension > maxDimension) {\n            newTotalDimension = maxDimension;\n          }\n\n          if (totalDimension !== newTotalDimension) {\n            setTotalDimension(newTotalDimension);\n          }\n        }\n\n        // call onLayout prop if passed\n        if (onLayout) {\n          onLayout(e);\n        }\n      },\n      [staticDimension, maxDimension, totalDimension, horizontal, onLayout],\n    );\n\n    const renderRow = useCallback(\n      ({\n        rowItems,\n        rowIndex,\n        separators,\n        isLastRow,\n        itemsPerRow,\n        rowStyle,\n        containerStyle,\n      }) => {\n        // To make up for the top padding\n        let additionalRowStyle = {};\n        if (isLastRow) {\n          additionalRowStyle = {\n            ...(!horizontal ? { marginBottom: spacing } : {}),\n            ...(horizontal ? { marginRight: spacing } : {}),\n          };\n        }\n\n        return (\n          <View style={[rowStyle, additionalRowStyle]}>\n            {rowItems.map((item, i) => (\n              <View\n                key={\n                  keyExtractor\n                    ? keyExtractor(item, i)\n                    : `item_${rowIndex * itemsPerRow + i}`\n                }\n                style={[containerStyle, itemContainerStyle]}\n              >\n                {renderItem({\n                  item,\n                  index: rowIndex * itemsPerRow + i,\n                  separators,\n                  rowIndex,\n                })}\n              </View>\n            ))}\n          </View>\n        );\n      },\n      [renderItem, spacing, keyExtractor, itemContainerStyle, horizontal],\n    );\n\n    const { containerDimension, itemsPerRow, fixedSpacing } = useMemo(\n      () => calculateDimensions({\n        itemDimension,\n        staticDimension,\n        totalDimension,\n        spacing,\n        fixed,\n      }),\n      [itemDimension, staticDimension, totalDimension, spacing, fixed],\n    );\n\n    const { containerStyle, rowStyle } = useMemo(\n      () => generateStyles({\n        horizontal,\n        itemDimension,\n        containerDimension,\n        spacing,\n        fixedSpacing,\n        fixed,\n      }),\n      [horizontal, itemDimension, containerDimension, spacing, fixedSpacing, fixed],\n    );\n\n    const rows = chunkArray(data, itemsPerRow); // Splitting the data into rows\n\n\n    const localKeyExtractor = useCallback(\n      (rowItems, index) => {\n        if (keyExtractor) {\n          return rowItems\n            .map((rowItem, rowItemIndex) => keyExtractor(rowItem, rowItemIndex))\n            .join('_');\n        }\n        return `row_${index}`;\n      },\n      [keyExtractor],\n    );\n\n\n    return (\n      <FlatList\n        data={rows}\n        ref={ref}\n        extraData={totalDimension}\n        renderItem={({ item, index }) => renderRow({\n          rowItems: item,\n          rowIndex: index,\n          isLastRow: index === rows.length - 1,\n          itemsPerRow,\n          rowStyle,\n          containerStyle,\n        })\n        }\n        style={[\n          {\n            ...(horizontal\n              ? { paddingLeft: spacing }\n              : { paddingTop: spacing }),\n          },\n          style,\n        ]}\n        onLayout={onLayoutLocal}\n        keyExtractor={localKeyExtractor}\n        {...restProps}\n        horizontal={horizontal}\n      />\n    );\n  }),\n);\n\n\nFlatGrid.displayName = 'FlatGrid';\n\nFlatGrid.propTypes = {\n  renderItem: PropTypes.func.isRequired,\n  data: PropTypes.arrayOf(PropTypes.any).isRequired,\n  itemDimension: PropTypes.number,\n  fixed: PropTypes.bool,\n  spacing: PropTypes.number,\n  style: ViewPropTypes.style,\n  itemContainerStyle: ViewPropTypes.style,\n  staticDimension: PropTypes.number,\n  horizontal: PropTypes.bool,\n  onLayout: PropTypes.func,\n  keyExtractor: PropTypes.func,\n  listKey: PropTypes.string,\n};\n\nFlatGrid.defaultProps = {\n  fixed: false,\n  itemDimension: 120,\n  spacing: 10,\n  style: {},\n  itemContainerStyle: undefined,\n  staticDimension: undefined,\n  horizontal: false,\n  onLayout: null,\n  keyExtractor: null,\n  listKey: undefined,\n};\n\n\nexport default FlatGrid;\n"]},"metadata":{},"sourceType":"module"}