{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport AppState from \"react-native-web/dist/exports/AppState\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { UnavailabilityError } from '@unimodules/core';\nimport ExponentWebBrowser from \"./ExpoWebBrowser\";\nvar emptyCustomTabsPackages = {\n  defaultBrowserPackage: undefined,\n  preferredBrowserPackage: undefined,\n  browserPackages: [],\n  servicePackages: []\n};\nexport function getCustomTabsSupportingBrowsersAsync() {\n  return _getCustomTabsSupportingBrowsersAsync.apply(this, arguments);\n}\n\nfunction _getCustomTabsSupportingBrowsersAsync() {\n  _getCustomTabsSupportingBrowsersAsync = _asyncToGenerator(function* () {\n    if (!ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync) {\n      throw new UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n    }\n\n    if (Platform.OS !== 'android') {\n      return emptyCustomTabsPackages;\n    } else {\n      return yield ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync();\n    }\n  });\n  return _getCustomTabsSupportingBrowsersAsync.apply(this, arguments);\n}\n\nexport function warmUpAsync(_x) {\n  return _warmUpAsync.apply(this, arguments);\n}\n\nfunction _warmUpAsync() {\n  _warmUpAsync = _asyncToGenerator(function* (browserPackage) {\n    if (!ExponentWebBrowser.warmUpAsync) {\n      throw new UnavailabilityError('WebBrowser', 'warmUpAsync');\n    }\n\n    if (Platform.OS !== 'android') {\n      return {};\n    } else {\n      return yield ExponentWebBrowser.warmUpAsync(browserPackage);\n    }\n  });\n  return _warmUpAsync.apply(this, arguments);\n}\n\nexport function mayInitWithUrlAsync(_x2, _x3) {\n  return _mayInitWithUrlAsync.apply(this, arguments);\n}\n\nfunction _mayInitWithUrlAsync() {\n  _mayInitWithUrlAsync = _asyncToGenerator(function* (url, browserPackage) {\n    if (!ExponentWebBrowser.mayInitWithUrlAsync) {\n      throw new UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n    }\n\n    if (Platform.OS !== 'android') {\n      return {};\n    } else {\n      return yield ExponentWebBrowser.mayInitWithUrlAsync(url, browserPackage);\n    }\n  });\n  return _mayInitWithUrlAsync.apply(this, arguments);\n}\n\nexport function coolDownAsync(_x4) {\n  return _coolDownAsync.apply(this, arguments);\n}\n\nfunction _coolDownAsync() {\n  _coolDownAsync = _asyncToGenerator(function* (browserPackage) {\n    if (!ExponentWebBrowser.coolDownAsync) {\n      throw new UnavailabilityError('WebBrowser', 'coolDownAsync');\n    }\n\n    if (Platform.OS !== 'android') {\n      return {};\n    } else {\n      return yield ExponentWebBrowser.coolDownAsync(browserPackage);\n    }\n  });\n  return _coolDownAsync.apply(this, arguments);\n}\n\nexport function openBrowserAsync(_x5) {\n  return _openBrowserAsync.apply(this, arguments);\n}\n\nfunction _openBrowserAsync() {\n  _openBrowserAsync = _asyncToGenerator(function* (url) {\n    var browserParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!ExponentWebBrowser.openBrowserAsync) {\n      throw new UnavailabilityError('WebBrowser', 'openBrowserAsync');\n    }\n\n    return yield ExponentWebBrowser.openBrowserAsync(url, browserParams);\n  });\n  return _openBrowserAsync.apply(this, arguments);\n}\n\nexport function dismissBrowser() {\n  if (!ExponentWebBrowser.dismissBrowser) {\n    throw new UnavailabilityError('WebBrowser', 'dismissBrowser');\n  }\n\n  ExponentWebBrowser.dismissBrowser();\n}\nexport function openAuthSessionAsync(_x6, _x7) {\n  return _openAuthSessionAsync.apply(this, arguments);\n}\n\nfunction _openAuthSessionAsync() {\n  _openAuthSessionAsync = _asyncToGenerator(function* (url, redirectUrl) {\n    if (_authSessionIsNativelySupported()) {\n      if (!ExponentWebBrowser.openAuthSessionAsync) {\n        throw new UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n      }\n\n      return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl);\n    } else {\n      return _openAuthSessionPolyfillAsync(url, redirectUrl);\n    }\n  });\n  return _openAuthSessionAsync.apply(this, arguments);\n}\n\nexport function dismissAuthSession() {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.dismissAuthSession) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    if (!ExponentWebBrowser.dismissBrowser) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\n\nfunction _authSessionIsNativelySupported() {\n  if (Platform.OS === 'android') {\n    return false;\n  }\n\n  var versionNumber = parseInt(String(Platform.Version), 10);\n  return versionNumber >= 11;\n}\n\nvar _redirectHandler = null;\nvar _onWebBrowserCloseAndroid = null;\n\nfunction _onAppStateChangeAndroid(state) {\n  if (state === 'active' && _onWebBrowserCloseAndroid) {\n    _onWebBrowserCloseAndroid();\n  }\n}\n\nfunction _openBrowserAndWaitAndroidAsync(_x8) {\n  return _openBrowserAndWaitAndroidAsync2.apply(this, arguments);\n}\n\nfunction _openBrowserAndWaitAndroidAsync2() {\n  _openBrowserAndWaitAndroidAsync2 = _asyncToGenerator(function* (startUrl) {\n    var appStateChangedToActive = new Promise(resolve => {\n      _onWebBrowserCloseAndroid = resolve;\n      AppState.addEventListener('change', _onAppStateChangeAndroid);\n    });\n    var result = {\n      type: 'cancel'\n    };\n    var {\n      type\n    } = yield openBrowserAsync(startUrl);\n\n    if (type === 'opened') {\n      yield appStateChangedToActive;\n      result = {\n        type: 'dismiss'\n      };\n    }\n\n    AppState.removeEventListener('change', _onAppStateChangeAndroid);\n    _onWebBrowserCloseAndroid = null;\n    return result;\n  });\n  return _openBrowserAndWaitAndroidAsync2.apply(this, arguments);\n}\n\nfunction _openAuthSessionPolyfillAsync(_x9, _x10) {\n  return _openAuthSessionPolyfillAsync2.apply(this, arguments);\n}\n\nfunction _openAuthSessionPolyfillAsync2() {\n  _openAuthSessionPolyfillAsync2 = _asyncToGenerator(function* (startUrl, returnUrl) {\n    if (_redirectHandler) {\n      throw new Error(\"The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be\");\n    }\n\n    if (_onWebBrowserCloseAndroid) {\n      throw new Error(\"WebBrowser is already open, only one can be open at a time\");\n    }\n\n    try {\n      if (Platform.OS === 'android') {\n        return yield Promise.race([_openBrowserAndWaitAndroidAsync(startUrl), _waitForRedirectAsync(returnUrl)]);\n      } else {\n        return yield Promise.race([openBrowserAsync(startUrl), _waitForRedirectAsync(returnUrl)]);\n      }\n    } finally {\n      if (ExponentWebBrowser.dismissBrowser) {\n        ExponentWebBrowser.dismissBrowser();\n      }\n\n      _stopWaitingForRedirect();\n    }\n  });\n  return _openAuthSessionPolyfillAsync2.apply(this, arguments);\n}\n\nfunction _stopWaitingForRedirect() {\n  if (!_redirectHandler) {\n    throw new Error(\"The WebBrowser auth session is in an invalid state with no redirect handler when one should be set\");\n  }\n\n  Linking.removeEventListener('url', _redirectHandler);\n  _redirectHandler = null;\n}\n\nfunction _waitForRedirectAsync(returnUrl) {\n  return new Promise(resolve => {\n    _redirectHandler = event => {\n      if (event.url.startsWith(returnUrl)) {\n        resolve({\n          url: event.url,\n          type: 'success'\n        });\n      }\n    };\n\n    Linking.addEventListener('url', _redirectHandler);\n  });\n}","map":{"version":3,"sources":["../src/WebBrowser.ts"],"names":[],"mappings":"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","sourcesContent":["import { AppState, Linking, Platform, AppStateStatus } from 'react-native';\nimport { UnavailabilityError } from '@unimodules/core';\nimport ExponentWebBrowser from './ExpoWebBrowser';\n\ntype RedirectEvent = {\n  url: string;\n};\n\ntype OpenBrowserParams = {\n  toolbarColor?: string;\n  browserPackage?: string;\n  enableBarCollapsing?: boolean;\n  showTitle?: boolean;\n};\n\ntype AuthSessionResult = RedirectResult | BrowserResult;\n\ntype CustomTabsBrowsersResults = {\n  defaultBrowserPackage?: string;\n  preferredBrowserPackage?: string;\n  browserPackages: string[];\n  servicePackages: string[];\n};\n\nconst emptyCustomTabsPackages: CustomTabsBrowsersResults = {\n  defaultBrowserPackage: undefined,\n  preferredBrowserPackage: undefined,\n  browserPackages: [],\n  servicePackages: [],\n};\n\ntype BrowserResult = {\n  // cancel and dismiss are iOS only, opened is Android only\n  type: 'cancel' | 'dismiss' | 'opened';\n};\n\ntype RedirectResult = {\n  type: 'success';\n  url: string;\n};\n\ntype ServiceActionResult = {\n  servicePackage?: string;\n};\n\ntype MayInitWithUrlResult = ServiceActionResult;\ntype WarmUpResult = ServiceActionResult;\ntype CoolDownResult = ServiceActionResult;\n\nexport async function getCustomTabsSupportingBrowsersAsync(): Promise<CustomTabsBrowsersResults> {\n  if (!ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync) {\n    throw new UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return emptyCustomTabsPackages;\n  } else {\n    return await ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync();\n  }\n}\n\nexport async function warmUpAsync(browserPackage?: string): Promise<WarmUpResult> {\n  if (!ExponentWebBrowser.warmUpAsync) {\n    throw new UnavailabilityError('WebBrowser', 'warmUpAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.warmUpAsync(browserPackage);\n  }\n}\n\nexport async function mayInitWithUrlAsync(\n  url: string,\n  browserPackage?: string\n): Promise<MayInitWithUrlResult> {\n  if (!ExponentWebBrowser.mayInitWithUrlAsync) {\n    throw new UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.mayInitWithUrlAsync(url, browserPackage);\n  }\n}\n\nexport async function coolDownAsync(browserPackage?: string): Promise<CoolDownResult> {\n  if (!ExponentWebBrowser.coolDownAsync) {\n    throw new UnavailabilityError('WebBrowser', 'coolDownAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.coolDownAsync(browserPackage);\n  }\n}\n\nexport async function openBrowserAsync(\n  url: string,\n  browserParams: OpenBrowserParams = {}\n): Promise<BrowserResult> {\n  if (!ExponentWebBrowser.openBrowserAsync) {\n    throw new UnavailabilityError('WebBrowser', 'openBrowserAsync');\n  }\n  return await ExponentWebBrowser.openBrowserAsync(url, browserParams);\n}\n\nexport function dismissBrowser(): void {\n  if (!ExponentWebBrowser.dismissBrowser) {\n    throw new UnavailabilityError('WebBrowser', 'dismissBrowser');\n  }\n  ExponentWebBrowser.dismissBrowser();\n}\n\nexport async function openAuthSessionAsync(\n  url: string,\n  redirectUrl: string\n): Promise<AuthSessionResult> {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.openAuthSessionAsync) {\n      throw new UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n    }\n    return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl);\n  } else {\n    return _openAuthSessionPolyfillAsync(url, redirectUrl);\n  }\n}\n\nexport function dismissAuthSession(): void {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.dismissAuthSession) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    if (!ExponentWebBrowser.dismissBrowser) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\n\n/* iOS <= 10 and Android polyfill for SFAuthenticationSession flow */\n\nfunction _authSessionIsNativelySupported(): boolean {\n  if (Platform.OS === 'android') {\n    return false;\n  }\n\n  const versionNumber = parseInt(String(Platform.Version), 10);\n  return versionNumber >= 11;\n}\n\nlet _redirectHandler: ((event: RedirectEvent) => void) | null = null;\n\n/*\n * openBrowserAsync on Android doesn't wait until closed, so we need to polyfill\n * it with AppState\n */\n\n// Store the `resolve` function from a Promise to fire when the AppState\n// returns to active\nlet _onWebBrowserCloseAndroid: null | (() => void) = null;\n\nfunction _onAppStateChangeAndroid(state: AppStateStatus) {\n  if (state === 'active' && _onWebBrowserCloseAndroid) {\n    _onWebBrowserCloseAndroid();\n  }\n}\n\nasync function _openBrowserAndWaitAndroidAsync(startUrl: string): Promise<BrowserResult> {\n  let appStateChangedToActive = new Promise(resolve => {\n    _onWebBrowserCloseAndroid = resolve;\n    AppState.addEventListener('change', _onAppStateChangeAndroid);\n  });\n\n  let result: BrowserResult = { type: 'cancel' };\n  let { type } = await openBrowserAsync(startUrl);\n\n  if (type === 'opened') {\n    await appStateChangedToActive;\n    result = { type: 'dismiss' };\n  }\n\n  AppState.removeEventListener('change', _onAppStateChangeAndroid);\n  _onWebBrowserCloseAndroid = null;\n  return result;\n}\n\nasync function _openAuthSessionPolyfillAsync(\n  startUrl: string,\n  returnUrl: string\n): Promise<AuthSessionResult> {\n  if (_redirectHandler) {\n    throw new Error(\n      `The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be`\n    );\n  }\n\n  if (_onWebBrowserCloseAndroid) {\n    throw new Error(`WebBrowser is already open, only one can be open at a time`);\n  }\n\n  try {\n    if (Platform.OS === 'android') {\n      return await Promise.race([\n        _openBrowserAndWaitAndroidAsync(startUrl),\n        _waitForRedirectAsync(returnUrl),\n      ]);\n    } else {\n      return await Promise.race([openBrowserAsync(startUrl), _waitForRedirectAsync(returnUrl)]);\n    }\n  } finally {\n    // We can't dismiss the browser on Android, only call this when it's available.\n    // Users on Android need to manually press the 'x' button in Chrome Custom Tabs, sadly.\n    if (ExponentWebBrowser.dismissBrowser) {\n      ExponentWebBrowser.dismissBrowser();\n    }\n\n    _stopWaitingForRedirect();\n  }\n}\n\nfunction _stopWaitingForRedirect() {\n  if (!_redirectHandler) {\n    throw new Error(\n      `The WebBrowser auth session is in an invalid state with no redirect handler when one should be set`\n    );\n  }\n\n  Linking.removeEventListener('url', _redirectHandler);\n  _redirectHandler = null;\n}\n\nfunction _waitForRedirectAsync(returnUrl: string): Promise<RedirectResult> {\n  return new Promise(resolve => {\n    _redirectHandler = (event: RedirectEvent) => {\n      if (event.url.startsWith(returnUrl)) {\n        resolve({ url: event.url, type: 'success' });\n      }\n    };\n\n    Linking.addEventListener('url', _redirectHandler);\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}