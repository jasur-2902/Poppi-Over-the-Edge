{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Constants from 'expo-constants';\nimport { UnavailabilityError } from 'expo-errors';\nimport invariant from 'invariant';\nimport ExpoGoogleSignIn from \"./ExpoGoogleSignIn\";\nimport GoogleUser from \"./GoogleUser\";\nexport var {\n  ERRORS,\n  SCOPES,\n  TYPES\n} = ExpoGoogleSignIn;\nvar DEFAULT_SCOPES = [SCOPES.PROFILE, SCOPES.EMAIL];\n\nvar _initialization;\n\nvar _options = {};\nvar _currentUser = null;\nvar _isClientUsageEnabled = false;\n\nfunction setCurrentUser(currentUser) {\n  _currentUser = currentUser;\n  return _currentUser;\n}\n\nfunction validateOptions() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (options.offlineAccess) {\n    invariant(typeof options.webClientId === 'string' && options.webClientId !== '', 'GoogleSignIn: Offline access (offlineAccess: true) requires a valid google server id `webClientId`');\n  }\n\n  return _objectSpread(_objectSpread({}, options), {}, {\n    scopes: options.scopes || DEFAULT_SCOPES\n  });\n}\n\nfunction validateOwnership() {\n  invariant(_isClientUsageEnabled || Constants.appOwnership !== 'expo', 'expo-google-sign-in is not supported in the Expo Client because a custom URL scheme is required at build time. Please refer to the docs for usage outside of Expo www.npmjs.com/package/expo-google-sign-in');\n}\n\nfunction ensureGoogleIsInitializedAsync(_x) {\n  return _ensureGoogleIsInitializedAsync.apply(this, arguments);\n}\n\nfunction _ensureGoogleIsInitializedAsync() {\n  _ensureGoogleIsInitializedAsync = _asyncToGenerator(function* (options) {\n    if (_initialization == null) {\n      return initAsync(options);\n    }\n\n    return _initialization;\n  });\n  return _ensureGoogleIsInitializedAsync.apply(this, arguments);\n}\n\nfunction invokeAuthMethod(_x2) {\n  return _invokeAuthMethod.apply(this, arguments);\n}\n\nfunction _invokeAuthMethod() {\n  _invokeAuthMethod = _asyncToGenerator(function* (method) {\n    if (!ExpoGoogleSignIn[method]) {\n      throw new UnavailabilityError('GoogleSignIn', method);\n    }\n\n    yield ensureGoogleIsInitializedAsync();\n    var payload = yield ExpoGoogleSignIn[method]();\n    var account = payload != null ? new GoogleUser(payload) : null;\n    return setCurrentUser(account);\n  });\n  return _invokeAuthMethod.apply(this, arguments);\n}\n\nexport function allowInClient() {\n  _isClientUsageEnabled = true;\n}\nexport function getCurrentUser() {\n  return _currentUser;\n}\nexport function askForPlayServicesAsync() {\n  return _askForPlayServicesAsync.apply(this, arguments);\n}\n\nfunction _askForPlayServicesAsync() {\n  _askForPlayServicesAsync = _asyncToGenerator(function* () {\n    return yield getPlayServiceAvailability(true);\n  });\n  return _askForPlayServicesAsync.apply(this, arguments);\n}\n\nexport function getPlayServiceAvailability() {\n  return _getPlayServiceAvailability.apply(this, arguments);\n}\n\nfunction _getPlayServiceAvailability() {\n  _getPlayServiceAvailability = _asyncToGenerator(function* () {\n    var shouldAsk = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    validateOwnership();\n\n    if (ExpoGoogleSignIn.arePlayServicesAvailableAsync) {\n      return yield ExpoGoogleSignIn.arePlayServicesAvailableAsync(shouldAsk);\n    } else {\n      return true;\n    }\n  });\n  return _getPlayServiceAvailability.apply(this, arguments);\n}\n\nexport function initAsync(_x3) {\n  return _initAsync.apply(this, arguments);\n}\n\nfunction _initAsync() {\n  _initAsync = _asyncToGenerator(function* (options) {\n    if (!ExpoGoogleSignIn.initAsync) {\n      throw new UnavailabilityError('GoogleSignIn', 'initAsync');\n    }\n\n    _options = validateOptions(options || _options);\n    var hasPlayServices = yield getPlayServiceAvailability();\n\n    if (!hasPlayServices) {\n      return false;\n    }\n\n    _initialization = ExpoGoogleSignIn.initAsync(_options);\n    return _initialization;\n  });\n  return _initAsync.apply(this, arguments);\n}\n\nexport function isSignedInAsync() {\n  return _isSignedInAsync.apply(this, arguments);\n}\n\nfunction _isSignedInAsync() {\n  _isSignedInAsync = _asyncToGenerator(function* () {\n    var user = yield getCurrentUserAsync();\n    return user != null;\n  });\n  return _isSignedInAsync.apply(this, arguments);\n}\n\nexport function isConnectedAsync() {\n  return _isConnectedAsync.apply(this, arguments);\n}\n\nfunction _isConnectedAsync() {\n  _isConnectedAsync = _asyncToGenerator(function* () {\n    return yield ExpoGoogleSignIn.isConnectedAsync();\n  });\n  return _isConnectedAsync.apply(this, arguments);\n}\n\nexport function signInSilentlyAsync() {\n  return _signInSilentlyAsync.apply(this, arguments);\n}\n\nfunction _signInSilentlyAsync() {\n  _signInSilentlyAsync = _asyncToGenerator(function* () {\n    var isConnected = yield isConnectedAsync();\n\n    if (isConnected) {\n      try {\n        var auth = yield invokeAuthMethod('signInSilentlyAsync');\n        return auth;\n      } catch (error) {\n        if (error.code === ERRORS.SIGN_IN_REQUIRED) {\n          return null;\n        }\n\n        throw error;\n      }\n    }\n\n    return null;\n  });\n  return _signInSilentlyAsync.apply(this, arguments);\n}\n\nexport function signInAsync() {\n  return _signInAsync.apply(this, arguments);\n}\n\nfunction _signInAsync() {\n  _signInAsync = _asyncToGenerator(function* () {\n    try {\n      var user = yield invokeAuthMethod('signInAsync');\n      return {\n        type: 'success',\n        user\n      };\n    } catch (error) {\n      if (error.code === ERRORS.SIGN_IN_CANCELLED) {\n        return {\n          type: 'cancel',\n          user: null\n        };\n      }\n\n      throw error;\n    }\n  });\n  return _signInAsync.apply(this, arguments);\n}\n\nexport function signOutAsync() {\n  return _signOutAsync.apply(this, arguments);\n}\n\nfunction _signOutAsync() {\n  _signOutAsync = _asyncToGenerator(function* () {\n    yield invokeAuthMethod('signOutAsync');\n  });\n  return _signOutAsync.apply(this, arguments);\n}\n\nexport function disconnectAsync() {\n  return _disconnectAsync.apply(this, arguments);\n}\n\nfunction _disconnectAsync() {\n  _disconnectAsync = _asyncToGenerator(function* () {\n    yield invokeAuthMethod('disconnectAsync');\n  });\n  return _disconnectAsync.apply(this, arguments);\n}\n\nexport function getCurrentUserAsync() {\n  return _getCurrentUserAsync.apply(this, arguments);\n}\n\nfunction _getCurrentUserAsync() {\n  _getCurrentUserAsync = _asyncToGenerator(function* () {\n    return yield invokeAuthMethod('getCurrentUserAsync');\n  });\n  return _getCurrentUserAsync.apply(this, arguments);\n}\n\nexport function getPhotoAsync() {\n  return _getPhotoAsync.apply(this, arguments);\n}\n\nfunction _getPhotoAsync() {\n  _getPhotoAsync = _asyncToGenerator(function* () {\n    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;\n\n    if (!ExpoGoogleSignIn.getPhotoAsync) {\n      throw new UnavailabilityError('GoogleSignIn', 'getPhotoAsync');\n    }\n\n    yield ensureGoogleIsInitializedAsync();\n    return yield ExpoGoogleSignIn.getPhotoAsync(size);\n  });\n  return _getPhotoAsync.apply(this, arguments);\n}\n\nexport { GoogleAuthData } from \"./GoogleAuthData\";\nexport { GoogleAuthentication } from \"./GoogleAuthentication\";\nexport { GoogleIdentity } from \"./GoogleIdentity\";\nexport { GoogleUser } from \"./GoogleUser\";\nexport { ExpoGoogleSignIn } from \"./ExpoGoogleSignIn\";\nexport { GoogleSignInType, GoogleSignInOptions, GoogleSignInAuthResultType, GoogleSignInAuthResult, GoogleSignInPlayServicesOptions } from \"./GoogleSignIn.types\";","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/expo-google-sign-in/src/GoogleSignIn.js"],"names":["Constants","UnavailabilityError","invariant","ExpoGoogleSignIn","GoogleUser","ERRORS","SCOPES","TYPES","DEFAULT_SCOPES","PROFILE","EMAIL","_initialization","_options","_currentUser","_isClientUsageEnabled","setCurrentUser","currentUser","validateOptions","options","offlineAccess","webClientId","scopes","validateOwnership","appOwnership","ensureGoogleIsInitializedAsync","initAsync","invokeAuthMethod","method","payload","account","allowInClient","getCurrentUser","askForPlayServicesAsync","getPlayServiceAvailability","shouldAsk","arePlayServicesAvailableAsync","hasPlayServices","isSignedInAsync","user","getCurrentUserAsync","isConnectedAsync","signInSilentlyAsync","isConnected","auth","error","code","SIGN_IN_REQUIRED","signInAsync","type","SIGN_IN_CANCELLED","signOutAsync","disconnectAsync","getPhotoAsync","size","GoogleAuthData","GoogleAuthentication","GoogleIdentity","GoogleSignInType","GoogleSignInOptions","GoogleSignInAuthResultType","GoogleSignInAuthResult","GoogleSignInPlayServicesOptions"],"mappings":"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","sourcesContent":["// @flow\nimport Constants from 'expo-constants';\nimport { UnavailabilityError } from 'expo-errors';\nimport invariant from 'invariant';\n\nimport ExpoGoogleSignIn from './ExpoGoogleSignIn';\nimport GoogleUser from './GoogleUser';\n\nimport type { GoogleSignInOptions, GoogleSignInAuthResult } from './GoogleSignIn.types';\n\nexport const { ERRORS, SCOPES, TYPES } = ExpoGoogleSignIn;\n\nconst DEFAULT_SCOPES = [SCOPES.PROFILE, SCOPES.EMAIL];\n\nlet _initialization: Promise<void>;\nlet _options: GoogleSignInOptions = {};\nlet _currentUser: GoogleUser = null;\nlet _isClientUsageEnabled = false;\n\nfunction setCurrentUser(currentUser: GoogleUser | null): GoogleUser | null {\n  _currentUser = currentUser;\n  return _currentUser;\n}\n\nfunction validateOptions(options: ?GoogleSignInOptions = {}): GoogleSignInOptions {\n  if (options.offlineAccess) {\n    invariant(\n      typeof options.webClientId === 'string' && options.webClientId !== '',\n      'GoogleSignIn: Offline access (offlineAccess: true) requires a valid google server id `webClientId`'\n    );\n  }\n\n  return {\n    ...options,\n    scopes: options.scopes || DEFAULT_SCOPES,\n  };\n}\n\nfunction validateOwnership() {\n  invariant(\n    _isClientUsageEnabled || Constants.appOwnership !== 'expo',\n    'expo-google-sign-in is not supported in the Expo Client because a custom URL scheme is required at build time. Please refer to the docs for usage outside of Expo www.npmjs.com/package/expo-google-sign-in'\n  );\n}\n\nasync function ensureGoogleIsInitializedAsync(options: ?GoogleSignInOptions): Promise<any> {\n  if (_initialization == null) {\n    return initAsync(options);\n  }\n  return _initialization;\n}\n\nasync function invokeAuthMethod(method: string): Promise<GoogleUser | null> {\n  if (!ExpoGoogleSignIn[method]) {\n    throw new UnavailabilityError('GoogleSignIn', method);\n  }\n  await ensureGoogleIsInitializedAsync();\n  const payload = await ExpoGoogleSignIn[method]();\n  let account = payload != null ? new GoogleUser(payload) : null;\n  return setCurrentUser(account);\n}\n\nexport function allowInClient() {\n  _isClientUsageEnabled = true;\n}\n\nexport function getCurrentUser(): GoogleUser | null {\n  return _currentUser;\n} \n\nexport async function askForPlayServicesAsync(): Promise<boolean> {\n  return await getPlayServiceAvailability(true);\n}\n\nexport async function getPlayServiceAvailability(shouldAsk: boolean = false): Promise<boolean> {\n  validateOwnership();\n\n  if (ExpoGoogleSignIn.arePlayServicesAvailableAsync) {\n    return await ExpoGoogleSignIn.arePlayServicesAvailableAsync(shouldAsk);\n  } else {\n    return true;\n  }\n}\n\nexport async function initAsync(options: ?GoogleSignInOptions): Promise<void> {\n  if (!ExpoGoogleSignIn.initAsync) {\n    throw new UnavailabilityError('GoogleSignIn', 'initAsync');\n  }\n\n  _options = validateOptions(options || _options);\n\n  const hasPlayServices = await getPlayServiceAvailability();\n  if (!hasPlayServices) {\n    return false;\n  }\n\n  _initialization = ExpoGoogleSignIn.initAsync(_options);\n\n  return _initialization;\n}\n\nexport async function isSignedInAsync(): Promise<boolean> {\n  const user = await getCurrentUserAsync();\n  return user != null;\n}\n\nexport async function isConnectedAsync(): Promise<boolean> {\n  return await ExpoGoogleSignIn.isConnectedAsync();\n}\n\nexport async function signInSilentlyAsync(): Promise<GoogleUser | null> {\n  const isConnected = await isConnectedAsync();\n  if (isConnected) {\n    try {\n      const auth = await invokeAuthMethod('signInSilentlyAsync');\n      return auth;\n    } catch (error) {\n      /* Return null to create parity with Android */\n      if (error.code === ERRORS.SIGN_IN_REQUIRED) {\n        return null;\n      }\n      throw error;\n    }\n  }\n  return null;\n}\n\nexport async function signInAsync(): Promise<GoogleSignInAuthResult> {\n  try {\n    const user = await invokeAuthMethod('signInAsync');\n    return { type: 'success', user };\n  } catch (error) {\n    if (error.code === ERRORS.SIGN_IN_CANCELLED) {\n      return { type: 'cancel', user: null };\n    }\n    throw error;\n  }\n}\n\nexport async function signOutAsync(): Promise<void> {\n  await invokeAuthMethod('signOutAsync');\n}\n\nexport async function disconnectAsync(): Promise<void> {\n  await invokeAuthMethod('disconnectAsync');\n}\n\nexport async function getCurrentUserAsync(): Promise<GoogleUser | null> {\n  return await invokeAuthMethod('getCurrentUserAsync');\n}\n\nexport async function getPhotoAsync(size: number = 128): Promise<string | null> {\n  if (!ExpoGoogleSignIn.getPhotoAsync) {\n    throw new UnavailabilityError('GoogleSignIn', 'getPhotoAsync');\n  }\n\n  await ensureGoogleIsInitializedAsync();\n  return await ExpoGoogleSignIn.getPhotoAsync(size);\n}\n\n\nexport { GoogleAuthData } from './GoogleAuthData';\nexport { GoogleAuthentication } from './GoogleAuthentication';\nexport { GoogleIdentity } from './GoogleIdentity';\nexport { GoogleUser } from './GoogleUser';\nexport { ExpoGoogleSignIn } from './ExpoGoogleSignIn';\n\nexport {\n  GoogleSignInType,\n  GoogleSignInOptions,\n  GoogleSignInAuthResultType,\n  GoogleSignInAuthResult,\n  GoogleSignInPlayServicesOptions,\n} from './GoogleSignIn.types';\n"]},"metadata":{},"sourceType":"module"}