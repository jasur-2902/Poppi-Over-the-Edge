{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { EventEmitter } from 'expo-core';\nimport { UnavailabilityError } from 'expo-errors';\nimport MediaLibrary from \"./ExponentMediaLibrary\";\nvar eventEmitter = new EventEmitter(MediaLibrary);\n\nfunction arrayize(item) {\n  if (Array.isArray(item)) {\n    return item;\n  }\n\n  return item ? [item] : [];\n}\n\nfunction getId(ref) {\n  if (typeof ref === 'string') {\n    return ref;\n  }\n\n  return ref ? ref.id : undefined;\n}\n\nfunction checkAssetIds(assetIds) {\n  if (assetIds.some(id => !id || typeof id !== 'string')) {\n    throw new Error('Asset ID must be a string!');\n  }\n}\n\nfunction checkAlbumIds(albumIds) {\n  if (albumIds.some(id => !id || typeof id !== 'string')) {\n    throw new Error('Album ID must be a string!');\n  }\n}\n\nfunction checkMediaType(mediaType) {\n  if (Object.values(MediaType).indexOf(mediaType) === -1) {\n    throw new Error(\"Invalid mediaType: \".concat(mediaType));\n  }\n}\n\nfunction checkSortBy(sortBy) {\n  if (Array.isArray(sortBy)) {\n    checkSortByKey(sortBy[0]);\n\n    if (typeof sortBy[1] !== 'boolean') {\n      throw new Error('Invalid sortBy array argument. Second item must be a boolean!');\n    }\n  } else {\n    checkSortByKey(sortBy);\n  }\n}\n\nfunction checkSortByKey(sortBy) {\n  if (Object.values(SortBy).indexOf(sortBy) === -1) {\n    throw new Error(\"Invalid sortBy key: \".concat(sortBy));\n  }\n}\n\nexport var MediaType = MediaLibrary.MediaType;\nexport var SortBy = MediaLibrary.SortBy;\nexport function createAssetAsync(_x) {\n  return _createAssetAsync.apply(this, arguments);\n}\n\nfunction _createAssetAsync() {\n  _createAssetAsync = _asyncToGenerator(function* (localUri) {\n    if (!MediaLibrary.createAssetAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'createAssetAsync');\n    }\n\n    if (!localUri || typeof localUri !== 'string') {\n      throw new Error('Invalid argument \"localUri\". It must be a string!');\n    }\n\n    var asset = yield MediaLibrary.createAssetAsync(localUri);\n\n    if (Array.isArray(asset)) {\n      return asset[0];\n    }\n\n    return asset;\n  });\n  return _createAssetAsync.apply(this, arguments);\n}\n\nexport function addAssetsToAlbumAsync(_x2, _x3) {\n  return _addAssetsToAlbumAsync.apply(this, arguments);\n}\n\nfunction _addAssetsToAlbumAsync() {\n  _addAssetsToAlbumAsync = _asyncToGenerator(function* (assets, album) {\n    var copy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    if (!MediaLibrary.addAssetsToAlbumAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'addAssetsToAlbumAsync');\n    }\n\n    var assetIds = arrayize(assets).map(getId);\n    var albumId = getId(album);\n    checkAssetIds(assetIds);\n\n    if (!albumId || typeof albumId !== 'string') {\n      throw new Error('Invalid album ID. It must be a string!');\n    }\n\n    if (Platform.OS === 'ios') {\n      return MediaLibrary.addAssetsToAlbumAsync(assetIds, albumId);\n    }\n\n    return MediaLibrary.addAssetsToAlbumAsync(assetIds, albumId, !!copy);\n  });\n  return _addAssetsToAlbumAsync.apply(this, arguments);\n}\n\nexport function removeAssetsFromAlbumAsync(_x4, _x5) {\n  return _removeAssetsFromAlbumAsync.apply(this, arguments);\n}\n\nfunction _removeAssetsFromAlbumAsync() {\n  _removeAssetsFromAlbumAsync = _asyncToGenerator(function* (assets, album) {\n    if (!MediaLibrary.removeAssetsFromAlbumAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'removeAssetsFromAlbumAsync');\n    }\n\n    var assetIds = arrayize(assets).map(getId);\n    var albumId = getId(album);\n    checkAssetIds(assetIds);\n    return MediaLibrary.removeAssetsFromAlbumAsync(assetIds, albumId);\n  });\n  return _removeAssetsFromAlbumAsync.apply(this, arguments);\n}\n\nexport function deleteAssetsAsync(_x6) {\n  return _deleteAssetsAsync.apply(this, arguments);\n}\n\nfunction _deleteAssetsAsync() {\n  _deleteAssetsAsync = _asyncToGenerator(function* (assets) {\n    if (!MediaLibrary.deleteAssetsAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'deleteAssetsAsync');\n    }\n\n    var assetIds = arrayize(assets).map(getId);\n    checkAssetIds(assetIds);\n    return MediaLibrary.deleteAssetsAsync(assetIds);\n  });\n  return _deleteAssetsAsync.apply(this, arguments);\n}\n\nexport function getAssetInfoAsync(_x7) {\n  return _getAssetInfoAsync.apply(this, arguments);\n}\n\nfunction _getAssetInfoAsync() {\n  _getAssetInfoAsync = _asyncToGenerator(function* (asset) {\n    if (!MediaLibrary.getAssetInfoAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'getAssetInfoAsync');\n    }\n\n    var assetId = getId(asset);\n    checkAssetIds([assetId]);\n    var assetInfo = yield MediaLibrary.getAssetInfoAsync(assetId);\n\n    if (Array.isArray(assetInfo)) {\n      return assetInfo[0];\n    }\n\n    return assetInfo;\n  });\n  return _getAssetInfoAsync.apply(this, arguments);\n}\n\nexport function getAlbumsAsync() {\n  return _getAlbumsAsync.apply(this, arguments);\n}\n\nfunction _getAlbumsAsync() {\n  _getAlbumsAsync = _asyncToGenerator(function* () {\n    if (!MediaLibrary.getAlbumsAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'getAlbumsAsync');\n    }\n\n    return MediaLibrary.getAlbumsAsync();\n  });\n  return _getAlbumsAsync.apply(this, arguments);\n}\n\nexport function getAlbumAsync(_x8) {\n  return _getAlbumAsync.apply(this, arguments);\n}\n\nfunction _getAlbumAsync() {\n  _getAlbumAsync = _asyncToGenerator(function* (title) {\n    if (!MediaLibrary.getAlbumAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'getAlbumAsync');\n    }\n\n    if (typeof title !== 'string') {\n      throw new Error('Album title must be a string!');\n    }\n\n    return MediaLibrary.getAlbumAsync(title);\n  });\n  return _getAlbumAsync.apply(this, arguments);\n}\n\nexport function createAlbumAsync(_x9, _x10) {\n  return _createAlbumAsync.apply(this, arguments);\n}\n\nfunction _createAlbumAsync() {\n  _createAlbumAsync = _asyncToGenerator(function* (albumName, asset) {\n    var copyAsset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    if (!MediaLibrary.createAlbumAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'createAlbumAsync');\n    }\n\n    var assetId = getId(asset);\n\n    if (Platform.OS === 'android' && (typeof assetId !== 'string' || assetId.length === 0)) {\n      throw new Error('MediaLibrary.createAlbumAsync must be called with an asset on Android.');\n    }\n\n    if (!albumName || typeof albumName !== 'string') {\n      throw new Error('Invalid argument \"albumName\". It must be a string!');\n    }\n\n    if (assetId != null && typeof assetId !== 'string') {\n      throw new Error('Asset ID must be a string!');\n    }\n\n    if (Platform.OS === 'ios') return MediaLibrary.createAlbumAsync(albumName, assetId);\n    return MediaLibrary.createAlbumAsync(albumName, assetId, !!copyAsset);\n  });\n  return _createAlbumAsync.apply(this, arguments);\n}\n\nexport function deleteAlbumsAsync(_x11) {\n  return _deleteAlbumsAsync.apply(this, arguments);\n}\n\nfunction _deleteAlbumsAsync() {\n  _deleteAlbumsAsync = _asyncToGenerator(function* (albums) {\n    var assetRemove = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (!MediaLibrary.deleteAlbumsAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'deleteAlbumsAsync');\n    }\n\n    var albumIds = arrayize(albums).map(getId);\n    checkAlbumIds(albumIds);\n\n    if (Platform.OS === 'android') {\n      return MediaLibrary.deleteAlbumsAsync(albumIds);\n    }\n\n    return MediaLibrary.deleteAlbumsAsync(albumIds, !!assetRemove);\n  });\n  return _deleteAlbumsAsync.apply(this, arguments);\n}\n\nexport function getAssetsAsync() {\n  return _getAssetsAsync.apply(this, arguments);\n}\n\nfunction _getAssetsAsync() {\n  _getAssetsAsync = _asyncToGenerator(function* () {\n    var assetsOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!MediaLibrary.getAssetsAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'getAssetsAsync');\n    }\n\n    var {\n      first,\n      after,\n      album,\n      sortBy,\n      mediaType\n    } = assetsOptions;\n    var options = {\n      first: first == null ? 20 : first,\n      after: getId(after),\n      album: getId(album),\n      sortBy: arrayize(sortBy),\n      mediaType: arrayize(mediaType || [MediaType.photo])\n    };\n\n    if (first != null && typeof options.first !== 'number') {\n      throw new Error('Option \"first\" must be a number!');\n    }\n\n    if (after != null && typeof options.after !== 'string') {\n      throw new Error('Option \"after\" must be a string!');\n    }\n\n    if (album != null && typeof options.album !== 'string') {\n      throw new Error('Option \"album\" must be a string!');\n    }\n\n    options.sortBy.forEach(checkSortBy);\n    options.mediaType.forEach(checkMediaType);\n    return MediaLibrary.getAssetsAsync(options);\n  });\n  return _getAssetsAsync.apply(this, arguments);\n}\n\nexport function addListener(listener) {\n  var subscription = eventEmitter.addListener(MediaLibrary.CHANGE_LISTENER_NAME, listener);\n\n  subscription.remove = () => this.removeSubscription(subscription);\n\n  return subscription;\n}\nexport function removeSubscription(subscription) {\n  eventEmitter.removeSubscription(subscription);\n}\nexport function removeAllListeners() {\n  eventEmitter.removeAllListeners('mediaLibraryDidChange');\n}\nexport function getMomentsAsync() {\n  return _getMomentsAsync.apply(this, arguments);\n}\n\nfunction _getMomentsAsync() {\n  _getMomentsAsync = _asyncToGenerator(function* () {\n    if (!MediaLibrary.getMomentsAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'getMomentsAsync');\n    }\n\n    return MediaLibrary.getMomentsAsync();\n  });\n  return _getMomentsAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/expo-media-library/src/MediaLibrary.js"],"names":["EventEmitter","UnavailabilityError","MediaLibrary","eventEmitter","arrayize","item","Array","isArray","getId","ref","id","undefined","checkAssetIds","assetIds","some","Error","checkAlbumIds","albumIds","checkMediaType","mediaType","Object","values","MediaType","indexOf","checkSortBy","sortBy","checkSortByKey","SortBy","createAssetAsync","localUri","asset","addAssetsToAlbumAsync","assets","album","copy","map","albumId","Platform","OS","removeAssetsFromAlbumAsync","deleteAssetsAsync","getAssetInfoAsync","assetId","assetInfo","getAlbumsAsync","getAlbumAsync","title","createAlbumAsync","albumName","copyAsset","length","deleteAlbumsAsync","albums","assetRemove","getAssetsAsync","assetsOptions","first","after","options","photo","forEach","addListener","listener","subscription","CHANGE_LISTENER_NAME","remove","removeSubscription","removeAllListeners","getMomentsAsync"],"mappings":"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","sourcesContent":["// @flow\n\nimport { Platform } from 'react-native';\nimport { EventEmitter } from 'expo-core';\nimport { UnavailabilityError } from 'expo-errors';\nimport MediaLibrary from './ExponentMediaLibrary';\nconst eventEmitter = new EventEmitter(MediaLibrary);\n\ntype MediaTypeValue = 'audio' | 'photo' | 'video' | 'unknown';\ntype SortByKey =\n  | 'default'\n  | 'id'\n  | 'mediaType'\n  | 'width'\n  | 'height'\n  | 'creationTime'\n  | 'modificationTime'\n  | 'duration';\ntype SortByValue = [SortByKey, boolean] | SortByKey;\n\ntype MediaTypeObject = {\n  audio: 'audio',\n  photo: 'photo',\n  video: 'video',\n  unknown: 'unknown',\n};\n\ntype SortByObject = {\n  default: 'default',\n  id: 'id',\n  mediaType: 'mediaType',\n  width: 'width',\n  height: 'height',\n  creationTime: 'creationTime',\n  modificationTime: 'modificationTime',\n  duration: 'duration',\n};\n\ntype Asset = {\n  id: string,\n  filename: string,\n  uri: string,\n  mediaType: MediaTypeValue,\n  mediaSubtypes?: Array<string>, // iOS only\n  width: number,\n  height: number,\n  creationTime: number,\n  modificationTime: number,\n  duration: number,\n  albumId?: string, // Android only\n};\n\ntype AssetInfo = Asset & {\n  localUri?: string,\n  location?: Location,\n  exif?: Object,\n  isFavorite?: boolean, //iOS only\n};\n\ntype Location = {\n  latitude: number,\n  longitude: number,\n};\n\ntype Album = {\n  id: string,\n  title: string,\n  assetCount: number,\n  type?: string, // iOS only\n\n  // iOS moments only\n  startTime: number,\n  endTime: number,\n  approximateLocation?: Location,\n  locationNames?: Array<string>,\n};\n\ntype AssetsOptions = {\n  first?: number,\n  after?: AssetRef,\n  album?: AlbumRef,\n  sortBy?: Array<SortByValue> | SortByValue,\n  mediaType?: Array<MediaTypeValue> | MediaTypeValue,\n};\n\ntype PagedInfo<T> = {\n  assets: Array<T>,\n  endCursor: string,\n  hasNextPage: boolean,\n  totalCount: number,\n};\n\ntype AssetRef = Asset | string;\ntype AlbumRef = Album | string;\n\ntype Subscription = {\n  remove: () => void,\n};\n\nfunction arrayize(item: any): Array<any> {\n  if (Array.isArray(item)) {\n    return item;\n  }\n  return item ? [item] : [];\n}\n\nfunction getId(ref): ?string {\n  if (typeof ref === 'string') {\n    return ref;\n  }\n  return ref ? ref.id : undefined;\n}\n\nfunction checkAssetIds(assetIds) {\n  if (assetIds.some(id => !id || typeof id !== 'string')) {\n    throw new Error('Asset ID must be a string!');\n  }\n}\n\nfunction checkAlbumIds(albumIds) {\n  if (albumIds.some(id => !id || typeof id !== 'string')) {\n    throw new Error('Album ID must be a string!');\n  }\n}\n\nfunction checkMediaType(mediaType) {\n  if (Object.values(MediaType).indexOf(mediaType) === -1) {\n    throw new Error(`Invalid mediaType: ${mediaType}`);\n  }\n}\n\nfunction checkSortBy(sortBy) {\n  if (Array.isArray(sortBy)) {\n    checkSortByKey(sortBy[0]);\n\n    if (typeof sortBy[1] !== 'boolean') {\n      throw new Error('Invalid sortBy array argument. Second item must be a boolean!');\n    }\n  } else {\n    checkSortByKey(sortBy);\n  }\n}\n\nfunction checkSortByKey(sortBy) {\n  if (Object.values(SortBy).indexOf(sortBy) === -1) {\n    throw new Error(`Invalid sortBy key: ${sortBy}`);\n  }\n}\n\n// export constants\nexport const MediaType: MediaTypeObject = MediaLibrary.MediaType;\nexport const SortBy: SortByObject = MediaLibrary.SortBy;\n\nexport async function createAssetAsync(localUri: string): Promise<Asset> {\n  if (!MediaLibrary.createAssetAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'createAssetAsync');\n  }\n\n  if (!localUri || typeof localUri !== 'string') {\n    throw new Error('Invalid argument \"localUri\". It must be a string!');\n  }\n  const asset = await MediaLibrary.createAssetAsync(localUri);\n\n  if (Array.isArray(asset)) {\n    // Android returns an array with asset, we need to pick the first item\n    return asset[0];\n  }\n  return asset;\n}\n\nexport async function addAssetsToAlbumAsync(\n  assets: Array<AssetRef> | AssetRef,\n  album: AlbumRef,\n  copy: boolean = true\n) {\n  if (!MediaLibrary.addAssetsToAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'addAssetsToAlbumAsync');\n  }\n\n  const assetIds = arrayize(assets).map(getId);\n  const albumId = getId(album);\n\n  checkAssetIds(assetIds);\n\n  if (!albumId || typeof albumId !== 'string') {\n    throw new Error('Invalid album ID. It must be a string!');\n  }\n\n  if (Platform.OS === 'ios') {\n    return MediaLibrary.addAssetsToAlbumAsync(assetIds, albumId);\n  }\n  return MediaLibrary.addAssetsToAlbumAsync(assetIds, albumId, !!copy);\n}\n\nexport async function removeAssetsFromAlbumAsync(\n  assets: Array<AssetRef> | AssetRef,\n  album: AlbumRef\n) {\n  if (!MediaLibrary.removeAssetsFromAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'removeAssetsFromAlbumAsync');\n  }\n\n  const assetIds = arrayize(assets).map(getId);\n  const albumId = getId(album);\n\n  checkAssetIds(assetIds);\n  return MediaLibrary.removeAssetsFromAlbumAsync(assetIds, albumId);\n}\n\nexport async function deleteAssetsAsync(assets: Array<AssetRef> | AssetRef) {\n  if (!MediaLibrary.deleteAssetsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'deleteAssetsAsync');\n  }\n\n  const assetIds = arrayize(assets).map(getId);\n\n  checkAssetIds(assetIds);\n  return MediaLibrary.deleteAssetsAsync(assetIds);\n}\n\nexport async function getAssetInfoAsync(asset: AssetRef): Promise<AssetInfo> {\n  if (!MediaLibrary.getAssetInfoAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAssetInfoAsync');\n  }\n\n  const assetId = getId(asset);\n\n  checkAssetIds([assetId]);\n\n  const assetInfo = await MediaLibrary.getAssetInfoAsync(assetId);\n\n  if (Array.isArray(assetInfo)) {\n    // Android returns an array with asset info, we need to pick the first item\n    return assetInfo[0];\n  }\n  return assetInfo;\n}\n\nexport async function getAlbumsAsync(): Promise<Array<Album>> {\n  if (!MediaLibrary.getAlbumsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAlbumsAsync');\n  }\n  return MediaLibrary.getAlbumsAsync();\n}\n\nexport async function getAlbumAsync(title: string): Promise<Album> {\n  if (!MediaLibrary.getAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAlbumAsync');\n  }\n  if (typeof title !== 'string') {\n    throw new Error('Album title must be a string!');\n  }\n  return MediaLibrary.getAlbumAsync(title);\n}\n\nexport async function createAlbumAsync(\n  albumName: string,\n  asset?: AssetRef,\n  copyAsset?: boolean = true\n): Promise<Album> {\n  if (!MediaLibrary.createAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'createAlbumAsync');\n  }\n\n  const assetId = getId(asset);\n\n  if (Platform.OS === 'android' && (typeof assetId !== 'string' || assetId.length === 0)) {\n    // it's not possible to create empty album on Android, so initial asset must be provided\n    throw new Error('MediaLibrary.createAlbumAsync must be called with an asset on Android.');\n  }\n  if (!albumName || typeof albumName !== 'string') {\n    throw new Error('Invalid argument \"albumName\". It must be a string!');\n  }\n  if (assetId != null && typeof assetId !== 'string') {\n    throw new Error('Asset ID must be a string!');\n  }\n\n  if (Platform.OS === 'ios') return MediaLibrary.createAlbumAsync(albumName, assetId);\n  return MediaLibrary.createAlbumAsync(albumName, assetId, !!copyAsset);\n}\n\nexport async function deleteAlbumsAsync(\n  albums: Array<AlbumRef> | AlbumRef,\n  assetRemove: boolean = false\n) {\n  if (!MediaLibrary.deleteAlbumsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'deleteAlbumsAsync');\n  }\n\n  const albumIds = arrayize(albums).map(getId);\n\n  checkAlbumIds(albumIds);\n  if (Platform.OS === 'android') {\n    return MediaLibrary.deleteAlbumsAsync(albumIds);\n  }\n  return MediaLibrary.deleteAlbumsAsync(albumIds, !!assetRemove);\n}\n\nexport async function getAssetsAsync(assetsOptions: AssetsOptions = {}): Promise<PagedInfo<Asset>> {\n  if (!MediaLibrary.getAssetsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAssetsAsync');\n  }\n\n  const { first, after, album, sortBy, mediaType } = assetsOptions;\n\n  const options = {\n    first: first == null ? 20 : first,\n    after: getId(after),\n    album: getId(album),\n    sortBy: arrayize(sortBy),\n    mediaType: arrayize(mediaType || [MediaType.photo]),\n  };\n\n  if (first != null && typeof options.first !== 'number') {\n    throw new Error('Option \"first\" must be a number!');\n  }\n  if (after != null && typeof options.after !== 'string') {\n    throw new Error('Option \"after\" must be a string!');\n  }\n  if (album != null && typeof options.album !== 'string') {\n    throw new Error('Option \"album\" must be a string!');\n  }\n\n  options.sortBy.forEach(checkSortBy);\n  options.mediaType.forEach(checkMediaType);\n\n  return MediaLibrary.getAssetsAsync(options);\n}\n\nexport function addListener(listener: () => void): Subscription {\n  const subscription = eventEmitter.addListener(MediaLibrary.CHANGE_LISTENER_NAME, listener);\n  subscription.remove = () => this.removeSubscription(subscription);\n  return subscription;\n}\n\nexport function removeSubscription(subscription: Subscription): void {\n  eventEmitter.removeSubscription(subscription);\n}\n\nexport function removeAllListeners(): void {\n  eventEmitter.removeAllListeners('mediaLibraryDidChange');\n}\n\n// iOS only\nexport async function getMomentsAsync() {\n  if (!MediaLibrary.getMomentsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getMomentsAsync');\n  }\n\n  return MediaLibrary.getMomentsAsync();\n}\n"]},"metadata":{},"sourceType":"module"}