{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport Constants from 'expo-constants';\nimport qs from 'qs';\nimport Linking from \"./Linking/Linking\";\nimport { openAuthSessionAsync, dismissAuthSession } from 'expo-web-browser';\nvar BASE_URL = \"https://auth.expo.io\";\nvar _authLock = false;\n\nfunction startAsync(_x) {\n  return _startAsync.apply(this, arguments);\n}\n\nfunction _startAsync() {\n  _startAsync = _asyncToGenerator(function* (options) {\n    var returnUrl = options.returnUrl || getDefaultReturnUrl();\n    var authUrl = options.authUrl;\n    var startUrl = getStartUrl(authUrl, returnUrl);\n\n    if (!authUrl) {\n      throw new Error('No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.');\n    }\n\n    if (_authLock) {\n      if (__DEV__) {\n        console.warn('Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.');\n      }\n\n      return {\n        type: 'locked'\n      };\n    }\n\n    _authLock = true;\n    var result;\n\n    try {\n      result = yield _openWebBrowserAsync(startUrl, returnUrl);\n    } finally {\n      _authLock = false;\n    }\n\n    if (!result) {\n      throw new Error('Unexpected missing AuthSession result');\n    }\n\n    if (!result.url) {\n      if (result.type) {\n        return result;\n      } else {\n        throw new Error('Unexpected AuthSession result with missing type');\n      }\n    }\n\n    var {\n      params,\n      errorCode\n    } = parseUrl(result.url);\n    return {\n      type: errorCode ? 'error' : 'success',\n      params,\n      errorCode,\n      url: result.url\n    };\n  });\n  return _startAsync.apply(this, arguments);\n}\n\nfunction dismiss() {\n  dismissAuthSession();\n}\n\nfunction _openWebBrowserAsync(_x2, _x3) {\n  return _openWebBrowserAsync2.apply(this, arguments);\n}\n\nfunction _openWebBrowserAsync2() {\n  _openWebBrowserAsync2 = _asyncToGenerator(function* (startUrl, returnUrl) {\n    var result = yield openAuthSessionAsync(startUrl, returnUrl);\n\n    if (result.type === 'cancel' || result.type === 'dismiss') {\n      return {\n        type: result.type\n      };\n    }\n\n    return result;\n  });\n  return _openWebBrowserAsync2.apply(this, arguments);\n}\n\nfunction getStartUrl(authUrl, returnUrl) {\n  var queryString = qs.stringify({\n    authUrl,\n    returnUrl\n  });\n  return \"\".concat(getRedirectUrl(), \"/start?\").concat(queryString);\n}\n\nfunction getRedirectUrl() {\n  var redirectUrl = \"\".concat(BASE_URL, \"/\").concat(Constants.manifest.id);\n\n  if (__DEV__) {\n    _warnIfAnonymous(Constants.manifest.id, redirectUrl);\n  }\n\n  return redirectUrl;\n}\n\nfunction getDefaultReturnUrl() {\n  return Linking.makeUrl('expo-auth-session');\n}\n\nfunction parseUrl(url) {\n  var parts = url.split('#');\n  var hash = parts[1];\n  var partsWithoutHash = parts[0].split('?');\n  var queryString = partsWithoutHash[partsWithoutHash.length - 1];\n  var parsedSearch = qs.parse(queryString);\n  var {\n    errorCode\n  } = parsedSearch;\n  delete parsedSearch.errorCode;\n  var parsedHash = {};\n\n  if (parts[1]) {\n    parsedHash = qs.parse(hash);\n  }\n\n  var params = _objectSpread({}, parsedSearch, {}, parsedHash);\n\n  return {\n    errorCode,\n    params\n  };\n}\n\nfunction _warnIfAnonymous(id, url) {\n  if (id.startsWith('@anonymous/')) {\n    console.warn(\"You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \\\"\".concat(url, \"\\\". If you are using an OAuth provider that requires whitelisting redirect URLs, we recommend that you do not whitelist this URL -- instead, you should sign in to Expo to acquired a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.\"));\n  }\n}\n\nexport default {\n  dismiss,\n  getRedirectUrl,\n  getStartUrl,\n  getDefaultReturnUrl,\n\n  get getRedirectUri() {\n    console.warn('Use AuthSession.getRedirectUrl rather than AuthSession.getRedirectUri (Url instead of Uri)');\n    return getRedirectUrl;\n  },\n\n  startAsync\n};","map":{"version":3,"sources":["../src/AuthSession.ts"],"names":[],"mappings":"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","sourcesContent":["import Constants from 'expo-constants';\nimport qs from 'qs';\n\nimport Linking from './Linking/Linking';\nimport { openAuthSessionAsync, dismissAuthSession } from 'expo-web-browser';\n\ntype AuthSessionOptions = {\n  authUrl: string;\n  returnUrl?: string;\n};\n\ntype AuthSessionResult =\n  | { type: 'cancel' | 'dismiss' | 'locked' }\n  | {\n      type: 'error' | 'success';\n      errorCode: string | null;\n      params: { [key: string]: string };\n      url: string;\n    };\n\nconst BASE_URL = `https://auth.expo.io`;\nlet _authLock = false;\n\nasync function startAsync(options: AuthSessionOptions): Promise<AuthSessionResult> {\n  const returnUrl = options.returnUrl || getDefaultReturnUrl();\n  const authUrl = options.authUrl;\n  const startUrl = getStartUrl(authUrl, returnUrl);\n\n  // Prevent accidentally starting to an empty url\n  if (!authUrl) {\n    throw new Error(\n      'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.'\n    );\n  }\n\n  // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n  // support it this makes the behavior predictable.\n  if (_authLock) {\n    if (__DEV__) {\n      console.warn(\n        'Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.'\n      );\n    }\n\n    return { type: 'locked' };\n  }\n\n  // About to start session, set lock\n  _authLock = true;\n\n  let result;\n  try {\n    result = await _openWebBrowserAsync(startUrl, returnUrl);\n  } finally {\n    // WebBrowser session complete, unset lock\n    _authLock = false;\n  }\n\n  // Handle failures\n  if (!result) {\n    throw new Error('Unexpected missing AuthSession result');\n  }\n  if (!result.url) {\n    if (result.type) {\n      return result;\n    } else {\n      throw new Error('Unexpected AuthSession result with missing type');\n    }\n  }\n\n  let { params, errorCode } = parseUrl(result.url);\n\n  return {\n    type: errorCode ? 'error' : 'success',\n    params,\n    errorCode,\n    url: result.url,\n  };\n}\n\nfunction dismiss() {\n  dismissAuthSession();\n}\n\nasync function _openWebBrowserAsync(startUrl, returnUrl) {\n  // $FlowIssue: Flow thinks the awaited result can be a promise\n  let result = await openAuthSessionAsync(startUrl, returnUrl);\n  if (result.type === 'cancel' || result.type === 'dismiss') {\n    return { type: result.type };\n  }\n\n  return result;\n}\n\nfunction getStartUrl(authUrl: string, returnUrl: string): string {\n  let queryString = qs.stringify({\n    authUrl,\n    returnUrl,\n  });\n\n  return `${getRedirectUrl()}/start?${queryString}`;\n}\n\nfunction getRedirectUrl(): string {\n  const redirectUrl = `${BASE_URL}/${Constants.manifest.id}`;\n  if (__DEV__) {\n    _warnIfAnonymous(Constants.manifest.id, redirectUrl);\n  }\n  return redirectUrl;\n}\n\nfunction getDefaultReturnUrl(): string {\n  return Linking.makeUrl('expo-auth-session');\n}\n\nfunction parseUrl(url: string): { errorCode: string | null; params: { [key: string]: string } } {\n  let parts = url.split('#');\n  let hash = parts[1];\n  let partsWithoutHash = parts[0].split('?');\n  let queryString = partsWithoutHash[partsWithoutHash.length - 1];\n\n  // Get query string (?hello=world)\n  let parsedSearch = qs.parse(queryString);\n\n  // Pull errorCode off of params\n  let { errorCode } = parsedSearch;\n  delete parsedSearch.errorCode;\n\n  // Get hash (#abc=example)\n  let parsedHash = {};\n  if (parts[1]) {\n    parsedHash = qs.parse(hash);\n  }\n\n  // Merge search and hash\n  let params = {\n    ...parsedSearch,\n    ...parsedHash,\n  };\n\n  return {\n    errorCode,\n    params,\n  };\n}\n\nfunction _warnIfAnonymous(id, url): void {\n  if (id.startsWith('@anonymous/')) {\n    console.warn(\n      `You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \"${url}\". If you are using an OAuth provider that requires whitelisting redirect URLs, we recommend that you do not whitelist this URL -- instead, you should sign in to Expo to acquired a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.`\n    );\n  }\n}\n\nexport default {\n  dismiss,\n  getRedirectUrl,\n  getStartUrl,\n  getDefaultReturnUrl,\n  get getRedirectUri() {\n    console.warn(\n      'Use AuthSession.getRedirectUrl rather than AuthSession.getRedirectUri (Url instead of Uri)'\n    );\n    return getRedirectUrl;\n  },\n  startAsync,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}