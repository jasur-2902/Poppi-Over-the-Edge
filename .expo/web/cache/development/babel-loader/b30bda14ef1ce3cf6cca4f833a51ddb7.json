{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport invariant from 'invariant';\nvar EventTypes = ['url'];\nvar listeners = [];\n\nfunction _validateURL(url) {\n  invariant(typeof url === 'string', \"Invalid URL: should be a string. Instead found: \".concat(url));\n  invariant(url, 'Invalid URL: cannot be empty');\n}\n\nclass Linking {\n  addEventListener(type, listener) {\n    invariant(EventTypes.indexOf(type) !== -1, \"Linking.addEventListener(): \".concat(type, \" is not a valid event\"));\n\n    var nativeListener = nativeEvent => listener({\n      url: window.location.href,\n      nativeEvent\n    });\n\n    listeners.push({\n      listener,\n      nativeListener\n    });\n    window.addEventListener('message', nativeListener, false);\n  }\n\n  removeEventListener(type, listener) {\n    invariant(EventTypes.indexOf(type) !== -1, \"Linking.removeEventListener(): \".concat(type, \" is not a valid event.\"));\n    var listenerIndex = listeners.findIndex(pair => pair.listener === listener);\n    invariant(listenerIndex !== -1, 'Linking.removeEventListener(): cannot remove an unregistered event listener.');\n    var nativeListener = listeners[listenerIndex].nativeListener;\n    window.removeEventListener('message', nativeListener, false);\n    listeners.splice(listenerIndex, 1);\n  }\n\n  canOpenURL(url) {\n    return _asyncToGenerator(function* () {\n      _validateURL(url);\n\n      return true;\n    })();\n  }\n\n  getInitialURL() {\n    return _asyncToGenerator(function* () {\n      return window.location.href;\n    })();\n  }\n\n  openURL(url) {\n    return _asyncToGenerator(function* () {\n      _validateURL(url);\n\n      window.location.href = url;\n    })();\n  }\n\n}\n\nexport default new Linking();","map":{"version":3,"sources":["../../src/Linking/LinkingModule.web.ts"],"names":[],"mappings":";;;;AAAA,OAAO,SAAP,MAAsB,WAAtB;AAIA,IAAM,UAAU,GAAG,CAAC,KAAD,CAAnB;AAEA,IAAM,SAAS,GAAwE,EAAvF;;AAEA,SAAS,YAAT,CAAsB,GAAtB,EAAiC;AAC/B,EAAA,SAAS,CAAC,OAAO,GAAP,KAAe,QAAhB,4DAA6E,GAA7E,EAAT;AACA,EAAA,SAAS,CAAC,GAAD,EAAM,8BAAN,CAAT;AACD;;AAGD,MAAM,OAAN,CAAa;AACX,EAAA,gBAAgB,CAAC,IAAD,EAAc,QAAd,EAAmC;AACjD,IAAA,SAAS,CACP,UAAU,CAAC,OAAX,CAAmB,IAAnB,MAA6B,CAAC,CADvB,wCAEwB,IAFxB,2BAAT;;AAIA,QAAM,cAAc,GAAsB,WAAW,IACnD,QAAQ,CAAC;AAAE,MAAA,GAAG,EAAE,MAAM,CAAC,QAAP,CAAgB,IAAvB;AAA6B,MAAA;AAA7B,KAAD,CADV;;AAEA,IAAA,SAAS,CAAC,IAAV,CAAe;AAAE,MAAA,QAAF;AAAY,MAAA;AAAZ,KAAf;AACA,IAAA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,cAAnC,EAAmD,KAAnD;AACD;;AAED,EAAA,mBAAmB,CAAC,IAAD,EAAc,QAAd,EAAmC;AACpD,IAAA,SAAS,CACP,UAAU,CAAC,OAAX,CAAmB,IAAnB,MAA6B,CAAC,CADvB,2CAE2B,IAF3B,4BAAT;AAIA,QAAM,aAAa,GAAG,SAAS,CAAC,SAAV,CAAoB,IAAI,IAAI,IAAI,CAAC,QAAL,KAAkB,QAA9C,CAAtB;AACA,IAAA,SAAS,CACP,aAAa,KAAK,CAAC,CADZ,EAEP,8EAFO,CAAT;AAIA,QAAM,cAAc,GAAG,SAAS,CAAC,aAAD,CAAT,CAAyB,cAAhD;AACA,IAAA,MAAM,CAAC,mBAAP,CAA2B,SAA3B,EAAsC,cAAtC,EAAsD,KAAtD;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,aAAjB,EAAgC,CAAhC;AACD;;AAEK,EAAA,UAAN,CAAiB,GAAjB,EAA4B;AAAA;AAC1B,MAAA,YAAY,CAAC,GAAD,CAAZ;;AACA,aAAO,IAAP;AAF0B;AAG3B;;AAEK,EAAA,aAAN,GAAmB;AAAA;AACjB,aAAO,MAAM,CAAC,QAAP,CAAgB,IAAvB;AADiB;AAElB;;AAEK,EAAA,OAAN,CAAc,GAAd,EAAyB;AAAA;AACvB,MAAA,YAAY,CAAC,GAAD,CAAZ;;AACA,MAAA,MAAM,CAAC,QAAP,CAAgB,IAAhB,GAAuB,GAAvB;AAFuB;AAGxB;;AAvCU;;AA0Cb,eAAe,IAAI,OAAJ,EAAf","sourcesContent":["import invariant from 'invariant';\n\nimport { URLListener, NativeURLListener } from './Linking.types';\n\nconst EventTypes = ['url'];\n\nconst listeners: Array<{ listener: URLListener; nativeListener: NativeURLListener }> = [];\n\nfunction _validateURL(url: string): void {\n  invariant(typeof url === 'string', `Invalid URL: should be a string. Instead found: ${url}`);\n  invariant(url, 'Invalid URL: cannot be empty');\n}\n\n// TODO: Bacon: For better parity this should extend EventEmitter like React Native.\nclass Linking {\n  addEventListener(type: 'url', listener: URLListener): void {\n    invariant(\n      EventTypes.indexOf(type) !== -1,\n      `Linking.addEventListener(): ${type} is not a valid event`\n    );\n    const nativeListener: NativeURLListener = nativeEvent =>\n      listener({ url: window.location.href, nativeEvent });\n    listeners.push({ listener, nativeListener });\n    window.addEventListener('message', nativeListener, false);\n  }\n\n  removeEventListener(type: 'url', listener: URLListener): void {\n    invariant(\n      EventTypes.indexOf(type) !== -1,\n      `Linking.removeEventListener(): ${type} is not a valid event.`\n    );\n    const listenerIndex = listeners.findIndex(pair => pair.listener === listener);\n    invariant(\n      listenerIndex !== -1,\n      'Linking.removeEventListener(): cannot remove an unregistered event listener.'\n    );\n    const nativeListener = listeners[listenerIndex].nativeListener;\n    window.removeEventListener('message', nativeListener, false);\n    listeners.splice(listenerIndex, 1);\n  }\n\n  async canOpenURL(url: string): Promise<boolean> {\n    _validateURL(url);\n    return true;\n  }\n\n  async getInitialURL(): Promise<string> {\n    return window.location.href;\n  }\n\n  async openURL(url: string): Promise<void> {\n    _validateURL(url);\n    window.location.href = url;\n  }\n}\n\nexport default new Linking();\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}