{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jshukurov\\\\Desktop\\\\Poppi Over The Edge\\\\Poppi-Over-the-Edge-master\\\\node_modules\\\\@expo\\\\vector-icons\\\\build\\\\createIconSet.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport * as Font from \"expo-font\";\nimport React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\nexport { DEFAULT_ICON_COLOR, DEFAULT_ICON_SIZE } from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nexport default function (glyphMap, fontName, expoAssetId, fontStyle) {\n  var _a;\n\n  var font = {\n    [fontName]: expoAssetId\n  };\n  var RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n  return _a = class Icon extends React.Component {\n    constructor() {\n      super(...arguments);\n      this._mounted = false;\n      this.state = {\n        fontIsLoaded: Font.isLoaded(fontName)\n      };\n    }\n\n    componentDidMount() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        _this._mounted = true;\n\n        if (!_this.state.fontIsLoaded) {\n          yield Font.loadAsync(font);\n          _this._mounted && _this.setState({\n            fontIsLoaded: true\n          });\n        }\n      })();\n    }\n\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n\n    setNativeProps(props) {\n      if (this._icon) {\n        this._icon.setNativeProps(props);\n      }\n    }\n\n    render() {\n      if (!this.state.fontIsLoaded) {\n        return React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 28\n          }\n        });\n      }\n\n      return React.createElement(RNVIconComponent, _extends({\n        ref: view => {\n          this._icon = view;\n        }\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 25\n        }\n      }));\n    }\n\n  }, _a.propTypes = RNVIconComponent.propTypes, _a.defaultProps = RNVIconComponent.defaultProps, _a.Button = createIconButtonComponent(_a), _a.glyphMap = glyphMap, _a.getRawGlyphMap = () => glyphMap, _a.getFontFamily = () => fontName, _a.loadFont = () => Font.loadAsync(font), _a.font = font, _a;\n}","map":{"version":3,"sources":["../src/createIconSet.tsx"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,KAAK,IAAZ,MAAsB,WAAtB;AACA,OAAO,KAAP,MAAsC,OAAtC;;AAGA,OAAO,aAAP;AACA,OAAO,yBAAP;AAEA,SACE,kBADF,EAEE,iBAFF;AAiEA,eAAc,UACZ,QADY,EAEZ,QAFY,EAGZ,WAHY,EAIZ,SAJY,EAIG;;;AAEf,MAAM,IAAI,GAAG;AAAE,KAAC,QAAD,GAAY;AAAd,GAAb;AACA,MAAM,gBAAgB,GAAG,aAAa,CAAC,QAAD,EAAW,QAAX,EAAqB,IAArB,EAA2B,SAA3B,CAAtC;AAEA,SAAA,EAAA,GAAO,MAAM,IAAN,SAAmB,KAAK,CAAC,SAAzB,CAAgD;AAAhD,IAAA,WAAA,GAAA;;AAUL,WAAA,QAAA,GAAW,KAAX;AAGA,WAAA,KAAA,GAAQ;AACN,QAAA,YAAY,EAAE,IAAI,CAAC,QAAL,CAAc,QAAd;AADR,OAAR;AAoCD;;AAhCO,IAAA,iBAAN,GAAuB;AAAA;;AAAA;AACrB,QAAA,KAAI,CAAC,QAAL,GAAgB,IAAhB;;AACA,YAAI,CAAC,KAAI,CAAC,KAAL,CAAW,YAAhB,EAA8B;AAC5B,gBAAM,IAAI,CAAC,SAAL,CAAe,IAAf,CAAN;AACA,UAAA,KAAI,CAAC,QAAL,IAAiB,KAAI,CAAC,QAAL,CAAc;AAAE,YAAA,YAAY,EAAE;AAAhB,WAAd,CAAjB;AACD;AALoB;AAMtB;;AAED,IAAA,oBAAoB,GAAA;AAClB,WAAK,QAAL,GAAgB,KAAhB;AACD;;AAED,IAAA,cAAc,CAAC,KAAD,EAAM;AAClB,UAAI,KAAK,KAAT,EAAgB;AACd,aAAK,KAAL,CAAW,cAAX,CAA0B,KAA1B;AACD;AACF;;AAED,IAAA,MAAM,GAAA;AACJ,UAAI,CAAC,KAAK,KAAL,CAAW,YAAhB,EAA8B;AAC5B,eAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAED,aACE,oBAAC,gBAAD;AACE,QAAA,GAAG,EAAE,IAAI,IAAG;AACV,eAAK,KAAL,GAAa,IAAb;AACD;AAHH,SAIM,KAAK,KAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAQD;;AAhDoD,GAAvD,EACS,EAAA,CAAA,SAAA,GAAY,gBAAgB,CAAC,SADtC,EAES,EAAA,CAAA,YAAA,GAAe,gBAAgB,CAAC,YAFzC,EAGS,EAAA,CAAA,MAAA,GAAS,yBAAyB,CAAC,EAAD,CAH3C,EAIS,EAAA,CAAA,QAAA,GAAW,QAJpB,EAKS,EAAA,CAAA,cAAA,GAAiB,MAAM,QALhC,EAMS,EAAA,CAAA,aAAA,GAAgB,MAAM,QAN/B,EAOS,EAAA,CAAA,QAAA,GAAW,MAAM,IAAI,CAAC,SAAL,CAAe,IAAf,CAP1B,EAQS,EAAA,CAAA,IAAA,GAAO,IARhB,EAiDE,EAjDF;AAkDD","sourcesContent":["import * as Font from \"expo-font\";\nimport React, { ComponentClass } from \"react\";\nimport { Text, TextProps, TouchableHighlightProps, ViewProps } from \"react-native\";\n\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\n\nexport {\n  DEFAULT_ICON_COLOR,\n  DEFAULT_ICON_SIZE\n} from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\n\nexport interface IconButtonProps<GLYPHS extends string> extends ViewProps, TouchableHighlightProps {\n  /**\n   * Size of the icon, can also be passed as fontSize in the style object.\n   *\n   * @default 12\n   */\n  size?: number;\n\n  /**\n   * Name of the icon to show\n   *\n   * See Icon Explorer app\n   * {@link https://expo.github.io/vector-icons/}\n   */\n  name: GLYPHS;\n\n  /**\n   * Color of the icon\n   *\n   */\n  color?: string;\n}\n\nexport interface IconProps<GLYPHS extends string> extends TextProps {\n  /**\n   * Size of the icon, can also be passed as fontSize in the style object.\n   *\n   * @default 12\n   */\n  size?: number;\n\n  /**\n   * Name of the icon to show\n   *\n   * See Icon Explorer app\n   * {@link https://expo.github.io/vector-icons/}\n   */\n  name: GLYPHS;\n\n  /**\n   * Color of the icon\n   *\n   */\n  color?: string;\n}\n\nexport type GlyphMap<G extends string> = { [K in G]: number }\n\nexport interface Icon<G extends string, FN extends string> {\n  propTypes: any;\n  defaultProps: any;\n  Button: ComponentClass<IconButtonProps<G>>;\n  glyphMap: GlyphMap<G>;\n  getRawGlyphMap: () => GlyphMap<G>;\n  getFontFamily: () => FN;\n  loadFont: () => Promise<void>;\n  font: { [x: string]: any };\n  new (props: IconProps<G>): React.Component<IconProps<G>>;\n}\n\nexport default function<G extends string, FN extends string>(\n  glyphMap: GlyphMap<G>,\n  fontName: FN,\n  expoAssetId,\n  fontStyle?: any\n): Icon<G, FN> {\n  const font = { [fontName]: expoAssetId };\n  const RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n\n  return class Icon extends React.Component<IconProps<G>> {\n    static propTypes = RNVIconComponent.propTypes;\n    static defaultProps = RNVIconComponent.defaultProps;\n    static Button = createIconButtonComponent(Icon);\n    static glyphMap = glyphMap;\n    static getRawGlyphMap = () => glyphMap;\n    static getFontFamily = () => fontName;\n    static loadFont = () => Font.loadAsync(font);\n    static font = font;\n\n    _mounted = false;\n    _icon?: any;\n\n    state = {\n      fontIsLoaded: Font.isLoaded(fontName)\n    };\n\n    async componentDidMount() {\n      this._mounted = true;\n      if (!this.state.fontIsLoaded) {\n        await Font.loadAsync(font);\n        this._mounted && this.setState({ fontIsLoaded: true });\n      }\n    }\n\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n\n    setNativeProps(props) {\n      if (this._icon) {\n        this._icon.setNativeProps(props);\n      }\n    }\n\n    render() {\n      if (!this.state.fontIsLoaded) {\n        return <Text />;\n      }\n\n      return (\n        <RNVIconComponent\n          ref={view => {\n            this._icon = view;\n          }}\n          {...this.props}\n        />\n      );\n    }\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}