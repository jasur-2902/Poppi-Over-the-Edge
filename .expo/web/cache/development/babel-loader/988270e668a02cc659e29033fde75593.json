{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport { createOrReuseTransformNode } from \"./AnimatedTransform\";\nimport deepEqual from 'fbjs/lib/areEqual';\n\nfunction sanitizeStyle(inputStyle) {\n  var style = {};\n\n  for (var key in inputStyle) {\n    var value = inputStyle[key];\n\n    if (value instanceof AnimatedNode) {\n      style[key] = value.__nodeID;\n    }\n  }\n\n  return style;\n}\n\nexport function createOrReuseStyleNode(style, oldNode) {\n  style = StyleSheet.flatten(style) || {};\n\n  if (style.transform) {\n    style = _objectSpread(_objectSpread({}, style), {}, {\n      transform: createOrReuseTransformNode(style.transform, oldNode && oldNode._style.transform)\n    });\n  }\n\n  var config = sanitizeStyle(style);\n\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n\n  return new AnimatedStyle(style, config);\n}\nexport default class AnimatedStyle extends AnimatedNode {\n  constructor(style, config) {\n    super({\n      type: 'style',\n      style: config\n    }, Object.values(style));\n    this._config = config;\n    this._style = style;\n  }\n\n  _walkStyleAndGetAnimatedValues(style) {\n    var updatedStyle = {};\n\n    for (var key in style) {\n      var value = style[key];\n\n      if (value instanceof AnimatedNode) {\n        updatedStyle[key] = value.__getValue();\n      } else if (value && !Array.isArray(value) && typeof value === 'object') {\n        updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);\n      }\n    }\n\n    return updatedStyle;\n  }\n\n  __onEvaluate() {\n    return this._walkStyleAndGetAnimatedValues(this._style);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/react-native-reanimated/src/core/AnimatedStyle.js"],"names":["AnimatedNode","createOrReuseTransformNode","deepEqual","sanitizeStyle","inputStyle","style","key","value","__nodeID","createOrReuseStyleNode","oldNode","StyleSheet","flatten","transform","_style","config","_config","AnimatedStyle","constructor","type","Object","values","_walkStyleAndGetAnimatedValues","updatedStyle","__getValue","Array","isArray","__onEvaluate"],"mappings":";;;;;;;AAEA,OAAOA,YAAP;AACA,SAASC,0BAAT;AAEA,OAAOC,SAAP,MAAsB,mBAAtB;;AAEA,SAASC,aAAT,CAAuBC,UAAvB,EAAmC;AACjC,MAAMC,KAAK,GAAG,EAAd;;AACA,OAAK,IAAMC,GAAX,IAAkBF,UAAlB,EAA8B;AAC5B,QAAMG,KAAK,GAAGH,UAAU,CAACE,GAAD,CAAxB;;AACA,QAAIC,KAAK,YAAYP,YAArB,EAAmC;AACjCK,MAAAA,KAAK,CAACC,GAAD,CAAL,GAAaC,KAAK,CAACC,QAAnB;AACD;AACF;;AACD,SAAOH,KAAP;AACD;;AAED,OAAO,SAASI,sBAAT,CAAgCJ,KAAhC,EAAuCK,OAAvC,EAAgD;AACrDL,EAAAA,KAAK,GAAGM,UAAU,CAACC,OAAX,CAAmBP,KAAnB,KAA6B,EAArC;;AACA,MAAIA,KAAK,CAACQ,SAAV,EAAqB;AACnBR,IAAAA,KAAK,mCACAA,KADA;AAEHQ,MAAAA,SAAS,EAAEZ,0BAA0B,CACnCI,KAAK,CAACQ,SAD6B,EAEnCH,OAAO,IAAIA,OAAO,CAACI,MAAR,CAAeD,SAFS;AAFlC,MAAL;AAOD;;AACD,MAAME,MAAM,GAAGZ,aAAa,CAACE,KAAD,CAA5B;;AACA,MAAIK,OAAO,IAAIR,SAAS,CAACa,MAAD,EAASL,OAAO,CAACM,OAAjB,CAAxB,EAAmD;AACjD,WAAON,OAAP;AACD;;AACD,SAAO,IAAIO,aAAJ,CAAkBZ,KAAlB,EAAyBU,MAAzB,CAAP;AACD;AAMD,eAAe,MAAME,aAAN,SAA4BjB,YAA5B,CAAyC;AACtDkB,EAAAA,WAAW,CAACb,KAAD,EAAQU,MAAR,EAAgB;AACzB,UAAM;AAAEI,MAAAA,IAAI,EAAE,OAAR;AAAiBd,MAAAA,KAAK,EAAEU;AAAxB,KAAN,EAAwCK,MAAM,CAACC,MAAP,CAAchB,KAAd,CAAxC;AACA,SAAKW,OAAL,GAAeD,MAAf;AACA,SAAKD,MAAL,GAAcT,KAAd;AACD;;AAEDiB,EAAAA,8BAA8B,CAACjB,KAAD,EAAQ;AACpC,QAAMkB,YAAY,GAAG,EAArB;;AACA,SAAK,IAAMjB,GAAX,IAAkBD,KAAlB,EAAyB;AACvB,UAAME,KAAK,GAAGF,KAAK,CAACC,GAAD,CAAnB;;AACA,UAAIC,KAAK,YAAYP,YAArB,EAAmC;AACjCuB,QAAAA,YAAY,CAACjB,GAAD,CAAZ,GAAoBC,KAAK,CAACiB,UAAN,EAApB;AACD,OAFD,MAEO,IAAIjB,KAAK,IAAI,CAACkB,KAAK,CAACC,OAAN,CAAcnB,KAAd,CAAV,IAAkC,OAAOA,KAAP,KAAiB,QAAvD,EAAiE;AAEtEgB,QAAAA,YAAY,CAACjB,GAAD,CAAZ,GAAoB,KAAKgB,8BAAL,CAAoCf,KAApC,CAApB;AACD;AACF;;AACD,WAAOgB,YAAP;AACD;;AAEDI,EAAAA,YAAY,GAAG;AACb,WAAO,KAAKL,8BAAL,CAAoC,KAAKR,MAAzC,CAAP;AACD;;AAvBqD","sourcesContent":["import { StyleSheet } from 'react-native';\n\nimport AnimatedNode from './AnimatedNode';\nimport { createOrReuseTransformNode } from './AnimatedTransform';\n\nimport deepEqual from 'fbjs/lib/areEqual';\n\nfunction sanitizeStyle(inputStyle) {\n  const style = {};\n  for (const key in inputStyle) {\n    const value = inputStyle[key];\n    if (value instanceof AnimatedNode) {\n      style[key] = value.__nodeID;\n    }\n  }\n  return style;\n}\n\nexport function createOrReuseStyleNode(style, oldNode) {\n  style = StyleSheet.flatten(style) || {};\n  if (style.transform) {\n    style = {\n      ...style,\n      transform: createOrReuseTransformNode(\n        style.transform,\n        oldNode && oldNode._style.transform\n      ),\n    };\n  }\n  const config = sanitizeStyle(style);\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n  return new AnimatedStyle(style, config);\n}\n\n/**\n * AnimatedStyle should never be directly instantiated, use createOrReuseStyleNode\n * in order to make a new instance of this node.\n */\nexport default class AnimatedStyle extends AnimatedNode {\n  constructor(style, config) {\n    super({ type: 'style', style: config }, Object.values(style));\n    this._config = config;\n    this._style = style;\n  }\n\n  _walkStyleAndGetAnimatedValues(style) {\n    const updatedStyle = {};\n    for (const key in style) {\n      const value = style[key];\n      if (value instanceof AnimatedNode) {\n        updatedStyle[key] = value.__getValue();\n      } else if (value && !Array.isArray(value) && typeof value === 'object') {\n        // Support animating nested values (for example: shadowOffset.height)\n        updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);\n      }\n    }\n    return updatedStyle;\n  }\n\n  __onEvaluate() {\n    return this._walkStyleAndGetAnimatedValues(this._style);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}