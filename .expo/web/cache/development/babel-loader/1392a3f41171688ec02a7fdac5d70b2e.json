{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nexport default {\n  get name() {\n    return 'ExpoLocalAuthentication';\n  },\n\n  hasHardwareAsync() {\n    return _asyncToGenerator(function* () {\n      return false;\n    })();\n  },\n\n  cancelAuthenticate() {\n    return _asyncToGenerator(function* () {})();\n  },\n\n  authenticateAsync() {\n    return _asyncToGenerator(function* () {})();\n  },\n\n  isEnrolledAsync() {\n    return _asyncToGenerator(function* () {\n      return false;\n    })();\n  },\n\n  supportedAuthenticationTypesAsync() {\n    return _asyncToGenerator(function* () {})();\n  }\n\n};","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/expo-local-authentication/src/ExpoLocalAuthentication.web.js"],"names":["name","hasHardwareAsync","cancelAuthenticate","authenticateAsync","isEnrolledAsync","supportedAuthenticationTypesAsync"],"mappings":";;;;AAEA,eAAe;AACb,MAAIA,IAAJ,GAAmB;AACjB,WAAO,yBAAP;AACD,GAHY;;AAIPC,EAAAA,gBAAN,GAA2C;AAAA;AACzC,aAAO,KAAP;AADyC;AAE1C,GANY;;AAOPC,EAAAA,kBAAN,GAA0C;AAAA;AAEzC,GATY;;AAUPC,EAAAA,iBAAN,GAAyC;AAAA;AAExC,GAZY;;AAaPC,EAAAA,eAAN,GAA0C;AAAA;AACxC,aAAO,KAAP;AADwC;AAEzC,GAfY;;AAgBPC,EAAAA,iCAAN,GAAyD;AAAA;AAExD;;AAlBY,CAAf","sourcesContent":["// @flow\n\nexport default {\n  get name(): string {\n    return 'ExpoLocalAuthentication';\n  },\n  async hasHardwareAsync(): Promise<boolean> {\n    return false;\n  },\n  async cancelAuthenticate(): Promise<void> {\n    // TODO: Bacon: Add this\n  },\n  async authenticateAsync(): Promise<void> {\n    // TODO: Bacon: Add this\n  },\n  async isEnrolledAsync(): Promise<boolean> {\n    return false;\n  },\n  async supportedAuthenticationTypesAsync(): Promise<void> {\n    // TODO: Bacon: Add this\n  },\n};\n"]},"metadata":{},"sourceType":"module"}