{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport UAParser from 'ua-parser-js';\nimport uuidv4 from 'uuid/v4';\n\nvar ExpoPackageJson = require('expo/package.json');\n\nvar parser = new UAParser();\nvar ID_KEY = 'EXPO_CONSTANTS_INSTALLATION_ID';\n\nvar _sessionId = uuidv4();\n\nexport default {\n  get name() {\n    return 'ExponentConstants';\n  },\n\n  get appOwnership() {\n    return 'expo';\n  },\n\n  get installationId() {\n    var installationId;\n\n    try {\n      installationId = localStorage.getItem(ID_KEY);\n\n      if (installationId == null || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(ID_KEY, installationId);\n      }\n    } catch (error) {\n      installationId = _sessionId;\n    } finally {\n      return installationId;\n    }\n  },\n\n  get sessionId() {\n    return _sessionId;\n  },\n\n  get platform() {\n    return {\n      web: UAParser(navigator.userAgent)\n    };\n  },\n\n  get isHeadless() {\n    return false;\n  },\n\n  get isDevice() {\n    return true;\n  },\n\n  get isDetached() {\n    return false;\n  },\n\n  get expoVersion() {\n    return ExpoPackageJson.version;\n  },\n\n  get linkingUri() {\n    return location.origin + location.pathname;\n  },\n\n  get expoRuntimeVersion() {\n    return ExpoPackageJson.version;\n  },\n\n  get deviceName() {\n    var {\n      browser,\n      engine,\n      os: OS\n    } = parser.getResult();\n    return browser.name || engine.name || OS.name || undefined;\n  },\n\n  get nativeAppVersion() {\n    return null;\n  },\n\n  get nativeBuildVersion() {\n    return null;\n  },\n\n  get systemFonts() {\n    return [];\n  },\n\n  get statusBarHeight() {\n    return 0;\n  },\n\n  get deviceYearClass() {\n    return null;\n  },\n\n  get manifest() {\n    return process.env.APP_MANIFEST || {};\n  },\n\n  get experienceUrl() {\n    return location.origin + location.pathname;\n  },\n\n  get debugMode() {\n    return __DEV__;\n  },\n\n  getWebViewUserAgentAsync() {\n    return _asyncToGenerator(function* () {\n      return navigator.userAgent;\n    })();\n  }\n\n};","map":{"version":3,"sources":["../src/ExponentConstants.web.ts"],"names":[],"mappings":";;;;AAAA,OAAO,QAAP,MAAqB,cAArB;AACA,OAAO,MAAP,MAAmB,SAAnB;;AAGA,IAAM,eAAe,GAAG,OAAO,CAAC,mBAAD,CAA/B;;AAEA,IAAM,MAAM,GAAG,IAAI,QAAJ,EAAf;AACA,IAAM,MAAM,GAAG,gCAAf;;AAQA,IAAM,UAAU,GAAG,MAAM,EAAzB;;AAEA,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,mBAAP;AACD,GAHY;;AAIb,MAAI,YAAJ,GAAgB;AACd,WAAO,MAAP;AACD,GANY;;AAOb,MAAI,cAAJ,GAAkB;AAChB,QAAI,cAAJ;;AACA,QAAI;AACF,MAAA,cAAc,GAAG,YAAY,CAAC,OAAb,CAAqB,MAArB,CAAjB;;AACA,UAAI,cAAc,IAAI,IAAlB,IAA0B,OAAO,cAAP,KAA0B,QAAxD,EAAkE;AAChE,QAAA,cAAc,GAAG,MAAM,EAAvB;AACA,QAAA,YAAY,CAAC,OAAb,CAAqB,MAArB,EAA6B,cAA7B;AACD;AACF,KAND,CAME,OAAO,KAAP,EAAc;AACd,MAAA,cAAc,GAAG,UAAjB;AACD,KARD,SAQU;AACR,aAAO,cAAP;AACD;AACF,GApBY;;AAqBb,MAAI,SAAJ,GAAa;AACX,WAAO,UAAP;AACD,GAvBY;;AAwBb,MAAI,QAAJ,GAAY;AACV,WAAO;AAAE,MAAA,GAAG,EAAE,QAAQ,CAAC,SAAS,CAAC,SAAX;AAAf,KAAP;AACD,GA1BY;;AA2Bb,MAAI,UAAJ,GAAc;AACZ,WAAO,KAAP;AACD,GA7BY;;AA8Bb,MAAI,QAAJ,GAAY;AAEV,WAAO,IAAP;AACD,GAjCY;;AAkCb,MAAI,UAAJ,GAAc;AACZ,WAAO,KAAP;AACD,GApCY;;AAqCb,MAAI,WAAJ,GAAe;AACb,WAAO,eAAe,CAAC,OAAvB;AACD,GAvCY;;AAwCb,MAAI,UAAJ,GAAc;AAEZ,WAAO,QAAQ,CAAC,MAAT,GAAkB,QAAQ,CAAC,QAAlC;AACD,GA3CY;;AA4Cb,MAAI,kBAAJ,GAAsB;AACpB,WAAO,eAAe,CAAC,OAAvB;AACD,GA9CY;;AA+Cb,MAAI,UAAJ,GAAc;AACZ,QAAM;AAAE,MAAA,OAAF;AAAW,MAAA,MAAX;AAAmB,MAAA,EAAE,EAAE;AAAvB,QAA8B,MAAM,CAAC,SAAP,EAApC;AAEA,WAAO,OAAO,CAAC,IAAR,IAAgB,MAAM,CAAC,IAAvB,IAA+B,EAAE,CAAC,IAAlC,IAA0C,SAAjD;AACD,GAnDY;;AAoDb,MAAI,gBAAJ,GAAoB;AAClB,WAAO,IAAP;AACD,GAtDY;;AAuDb,MAAI,kBAAJ,GAAsB;AACpB,WAAO,IAAP;AACD,GAzDY;;AA0Db,MAAI,WAAJ,GAAe;AAEb,WAAO,EAAP;AACD,GA7DY;;AA8Db,MAAI,eAAJ,GAAmB;AACjB,WAAO,CAAP;AACD,GAhEY;;AAiEb,MAAI,eAAJ,GAAmB;AAEjB,WAAO,IAAP;AACD,GApEY;;AAqEb,MAAI,QAAJ,GAAY;AACV,WAAO,OAAO,CAAC,GAAR,CAAY,YAAZ,IAA4B,EAAnC;AACD,GAvEY;;AAwEb,MAAI,aAAJ,GAAiB;AACf,WAAO,QAAQ,CAAC,MAAT,GAAkB,QAAQ,CAAC,QAAlC;AACD,GA1EY;;AA2Eb,MAAI,SAAJ,GAAa;AACX,WAAO,OAAP;AACD,GA7EY;;AA8EP,EAAA,wBAAN,GAA8B;AAAA;AAC5B,aAAO,SAAS,CAAC,SAAjB;AAD4B;AAE7B;;AAhFY,CAAf","sourcesContent":["import UAParser from 'ua-parser-js';\nimport uuidv4 from 'uuid/v4';\nimport { PlatformManifest, WebManifest, NativeConstants } from './Constants.types';\n\nconst ExpoPackageJson = require('expo/package.json');\n\nconst parser = new UAParser();\nconst ID_KEY = 'EXPO_CONSTANTS_INSTALLATION_ID';\n\ndeclare var __DEV__: boolean;\ndeclare var process: { env: any };\ndeclare var navigator: Navigator;\ndeclare var location: Location;\ndeclare var localStorage: Storage;\n\nconst _sessionId = uuidv4();\n\nexport default {\n  get name(): string {\n    return 'ExponentConstants';\n  },\n  get appOwnership(): 'expo' {\n    return 'expo';\n  },\n  get installationId(): string {\n    let installationId;\n    try {\n      installationId = localStorage.getItem(ID_KEY);\n      if (installationId == null || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(ID_KEY, installationId as string);\n      }\n    } catch (error) {\n      installationId = _sessionId;\n    } finally {\n      return installationId;\n    }\n  },\n  get sessionId(): string {\n    return _sessionId;\n  },\n  get platform(): PlatformManifest {\n    return { web: UAParser(navigator.userAgent) };\n  },\n  get isHeadless(): false {\n    return false;\n  },\n  get isDevice(): true {\n    // TODO: Bacon: Possibly want to add information regarding simulators\n    return true;\n  },\n  get isDetached(): false {\n    return false;\n  },\n  get expoVersion(): string {\n    return ExpoPackageJson.version;\n  },\n  get linkingUri(): string {\n    // On native this is `exp://`\n    return location.origin + location.pathname;\n  },\n  get expoRuntimeVersion(): string {\n    return ExpoPackageJson.version;\n  },\n  get deviceName(): string | undefined {\n    const { browser, engine, os: OS } = parser.getResult();\n\n    return browser.name || engine.name || OS.name || undefined;\n  },\n  get nativeAppVersion(): null {\n    return null;\n  },\n  get nativeBuildVersion(): null {\n    return null;\n  },\n  get systemFonts(): string[] {\n    // TODO: Bacon: Maybe possible.\n    return [];\n  },\n  get statusBarHeight(): number {\n    return 0;\n  },\n  get deviceYearClass(): number | null {\n    // TODO: Bacon: The android version isn't very accurate either, maybe we could try and guess this value.\n    return null;\n  },\n  get manifest(): WebManifest {\n    return process.env.APP_MANIFEST || {};\n  },\n  get experienceUrl(): string {\n    return location.origin + location.pathname;\n  },\n  get debugMode(): boolean {\n    return __DEV__;\n  },\n  async getWebViewUserAgentAsync(): Promise<string> {\n    return navigator.userAgent;\n  },\n} as NativeConstants;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}