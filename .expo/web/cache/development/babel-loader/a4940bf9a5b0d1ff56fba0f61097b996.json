{"ast":null,"code":"import AnimatedValue from \"../core/AnimatedValue\";\nimport { call, always, cond, set } from \"../base\";\nexport function evaluateOnce(node) {\n  var input = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var callback = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n\n  var done = new AnimatedValue(0);\n  var evalNode = cond(done, 0, call([node, set(done, 1)], () => {\n    callback && callback();\n\n    for (var i = 0; i < input.length; i++) {\n      input[i].__removeChild(alwaysNode);\n\n      alwaysNode.__detach();\n    }\n  }));\n  var alwaysNode = always(evalNode);\n\n  for (var i = 0; i < input.length; i++) {\n    input[i].__addChild(alwaysNode);\n\n    alwaysNode.__attach();\n  }\n}","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/react-native-reanimated/src/derived/evaluateOnce.js"],"names":["AnimatedValue","call","always","cond","set","evaluateOnce","node","input","callback","Array","isArray","done","evalNode","i","length","__removeChild","alwaysNode","__detach","__addChild","__attach"],"mappings":"AAAA,OAAOA,aAAP;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,IAAvB,EAA6BC,GAA7B;AAQA,OAAO,SAASC,YAAT,CAAsBC,IAAtB,EAAkD;AAAA,MAAtBC,KAAsB,uEAAd,EAAc;AAAA,MAAVC,QAAU;;AACvD,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAL,EAA2B;AACzBA,IAAAA,KAAK,GAAG,CAACA,KAAD,CAAR;AACD;;AACD,MAAMI,IAAI,GAAG,IAAIX,aAAJ,CAAkB,CAAlB,CAAb;AACA,MAAMY,QAAQ,GAAGT,IAAI,CACnBQ,IADmB,EAEnB,CAFmB,EAGnBV,IAAI,CAAC,CAACK,IAAD,EAAOF,GAAG,CAACO,IAAD,EAAO,CAAP,CAAV,CAAD,EAAuB,MAAM;AAC/BH,IAAAA,QAAQ,IAAIA,QAAQ,EAApB;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAAK,CAACO,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCN,MAAAA,KAAK,CAACM,CAAD,CAAL,CAASE,aAAT,CAAuBC,UAAvB;;AACAA,MAAAA,UAAU,CAACC,QAAX;AACD;AACF,GANG,CAHe,CAArB;AAWA,MAAMD,UAAU,GAAGd,MAAM,CAACU,QAAD,CAAzB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAAK,CAACO,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCN,IAAAA,KAAK,CAACM,CAAD,CAAL,CAASK,UAAT,CAAoBF,UAApB;;AACAA,IAAAA,UAAU,CAACG,QAAX;AACD;AACF","sourcesContent":["import AnimatedValue from '../core/AnimatedValue';\nimport { call, always, cond, set } from '../base';\n\n/**\n * evaluate given node and notify children\n * @param node - node to be evaluated\n * @param input - nodes (or one node) representing values which states input for node.\n * @param callback - after callback\n */\nexport function evaluateOnce(node, input = [], callback) {\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n  const done = new AnimatedValue(0);\n  const evalNode = cond(\n    done,\n    0,\n    call([node, set(done, 1)], () => {\n      callback && callback();\n      for (let i = 0; i < input.length; i++) {\n        input[i].__removeChild(alwaysNode);\n        alwaysNode.__detach();\n      }\n    })\n  );\n  const alwaysNode = always(evalNode);\n  for (let i = 0; i < input.length; i++) {\n    input[i].__addChild(alwaysNode);\n    alwaysNode.__attach();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}