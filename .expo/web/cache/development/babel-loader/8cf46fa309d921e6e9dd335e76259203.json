{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nexport default {\n  getExponentPushTokenAsync() {\n    return _asyncToGenerator(function* () {})();\n  },\n\n  getDevicePushTokenAsync(config) {\n    return _asyncToGenerator(function* () {})();\n  },\n\n  createChannel(channelId, channel) {\n    return _asyncToGenerator(function* () {})();\n  },\n\n  deleteChannel(channelId) {\n    return _asyncToGenerator(function* () {})();\n  },\n\n  presentLocalNotification(notification) {\n    return _asyncToGenerator(function* () {})();\n  },\n\n  presentLocalNotificationWithChannel(notification, channelId) {\n    return _asyncToGenerator(function* () {})();\n  },\n\n  scheduleLocalNotification(notification, options) {\n    return _asyncToGenerator(function* () {})();\n  },\n\n  scheduleLocalNotificationWithChannel(notification, options, channelId) {\n    return _asyncToGenerator(function* () {})();\n  },\n\n  dismissNotification(notificationId) {\n    return _asyncToGenerator(function* () {})();\n  },\n\n  dismissAllNotifications() {\n    return _asyncToGenerator(function* () {})();\n  },\n\n  cancelScheduledNotification(notificationId) {\n    return _asyncToGenerator(function* () {})();\n  },\n\n  cancelAllScheduledNotifications() {\n    return _asyncToGenerator(function* () {})();\n  }\n\n};","map":{"version":3,"sources":["../../src/Notifications/ExponentNotifications.web.ts"],"names":[],"mappings":";;;;AAAA,eAAe;AACP,EAAA,yBAAN,GAA+B;AAAA;AAAoB,GADtC;;AAEP,EAAA,uBAAN,CAA8B,MAA9B,EAA4D;AAAA;AAAmB,GAFlE;;AAGP,EAAA,aAAN,CAAoB,SAApB,EAAuC,OAAvC,EAAsD;AAAA;AAAmB,GAH5D;;AAIP,EAAA,aAAN,CAAoB,SAApB,EAAqC;AAAA;AAAmB,GAJ3C;;AAKP,EAAA,wBAAN,CAA+B,YAA/B,EAAgD;AAAA;AAAmB,GALtD;;AAMP,EAAA,mCAAN,CAA0C,YAA1C,EAA6D,SAA7D,EAA8E;AAAA;AAAmB,GANpF;;AAOP,EAAA,yBAAN,CACE,YADF,EAEE,OAFF,EAEiC;AAAA;AACd,GAVN;;AAWP,EAAA,oCAAN,CACE,YADF,EAEE,OAFF,EAGE,SAHF,EAGmB;AAAA;AACA,GAfN;;AAgBP,EAAA,mBAAN,CAA0B,cAA1B,EAAgD;AAAA;AAAmB,GAhBtD;;AAiBP,EAAA,uBAAN,GAA6B;AAAA;AAAoB,GAjBpC;;AAkBP,EAAA,2BAAN,CAAkC,cAAlC,EAAwD;AAAA;AAAmB,GAlB9D;;AAmBP,EAAA,+BAAN,GAAqC;AAAA;AAAoB;;AAnB5C,CAAf","sourcesContent":["export default {\n  async getExponentPushTokenAsync(): Promise<void> {},\n  async getDevicePushTokenAsync(config: { [key: string]: any }): Promise<void> {},\n  async createChannel(channelId: string, channel: string): Promise<void> {},\n  async deleteChannel(channelId: string): Promise<void> {},\n  async presentLocalNotification(notification: any): Promise<void> {},\n  async presentLocalNotificationWithChannel(notification: any, channelId: string): Promise<void> {},\n  async scheduleLocalNotification(\n    notification: any,\n    options: { [key: string]: any }\n  ): Promise<void> {},\n  async scheduleLocalNotificationWithChannel(\n    notification: any,\n    options: { [key: string]: any },\n    channelId: string\n  ): Promise<void> {},\n  async dismissNotification(notificationId: string): Promise<void> {},\n  async dismissAllNotifications(): Promise<void> {},\n  async cancelScheduledNotification(notificationId: string): Promise<void> {},\n  async cancelAllScheduledNotifications(): Promise<void> {},\n  //   getBadgeNumberAsync(): Promise<void> {},\n  //   setBadgeNumberAsync(badgeNumber: number): Promise<void> {},\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}