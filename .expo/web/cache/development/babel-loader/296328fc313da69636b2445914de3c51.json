{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jshukurov\\\\Desktop\\\\Poppi Over The Edge\\\\Poppi-Over-the-Edge-master\\\\node_modules\\\\@expo\\\\vector-icons\\\\createIconSet.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport * as Font from 'expo-font';\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\nexport default function (glyphMap, fontName, expoAssetId) {\n  var font = {\n    [fontName]: expoAssetId\n  };\n  var RNVIconComponent = createIconSet(glyphMap, fontName);\n\n  class Icon extends React.Component {\n    constructor() {\n      super(...arguments);\n      this.state = {\n        fontIsLoaded: Font.isLoaded(fontName)\n      };\n    }\n\n    componentWillMount() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        _this._mounted = true;\n\n        if (!_this.state.fontIsLoaded) {\n          yield Font.loadAsync(font);\n          _this._mounted && _this.setState({\n            fontIsLoaded: true\n          });\n        }\n      })();\n    }\n\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n\n    setNativeProps(props) {\n      if (this._icon) {\n        this._icon.setNativeProps(props);\n      }\n    }\n\n    render() {\n      if (!this.state.fontIsLoaded) {\n        return React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 16\n          }\n        });\n      }\n\n      return React.createElement(RNVIconComponent, _extends({\n        ref: view => {\n          this._icon = view;\n        }\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }\n      }));\n    }\n\n  }\n\n  Icon.propTypes = RNVIconComponent.propTypes;\n  Icon.defaultProps = RNVIconComponent.defaultProps;\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.glyphMap = glyphMap;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n\n  Icon.getFontFamily = () => fontName;\n\n  Icon.loadFont = () => Font.loadAsync(font);\n\n  Icon.font = font;\n  return Icon;\n}","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/@expo/vector-icons/createIconSet.js"],"names":["React","Font","createIconSet","createIconButtonComponent","glyphMap","fontName","expoAssetId","font","RNVIconComponent","Icon","Component","state","fontIsLoaded","isLoaded","componentWillMount","_mounted","loadAsync","setState","componentWillUnmount","setNativeProps","props","_icon","render","view","propTypes","defaultProps","getRawGlyphMap","Button","getFontFamily","loadFont"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,OAAOC,aAAP;AACA,OAAOC,yBAAP;AAEA,eAAe,UAASC,QAAT,EAAmBC,QAAnB,EAA6BC,WAA7B,EAA0C;AACvD,MAAMC,IAAI,GAAG;AAAE,KAACF,QAAD,GAAYC;AAAd,GAAb;AACA,MAAME,gBAAgB,GAAGN,aAAa,CAACE,QAAD,EAAWC,QAAX,CAAtC;;AAEA,QAAMI,IAAN,SAAmBT,KAAK,CAACU,SAAzB,CAAmC;AAAA;AAAA;AAAA,WAIjCC,KAJiC,GAIzB;AACNC,QAAAA,YAAY,EAAEX,IAAI,CAACY,QAAL,CAAcR,QAAd;AADR,OAJyB;AAAA;;AAQ3BS,IAAAA,kBAAN,GAA2B;AAAA;;AAAA;AACzB,QAAA,KAAI,CAACC,QAAL,GAAgB,IAAhB;;AACA,YAAI,CAAC,KAAI,CAACJ,KAAL,CAAWC,YAAhB,EAA8B;AAC5B,gBAAMX,IAAI,CAACe,SAAL,CAAeT,IAAf,CAAN;AACA,UAAA,KAAI,CAACQ,QAAL,IAAiB,KAAI,CAACE,QAAL,CAAc;AAAEL,YAAAA,YAAY,EAAE;AAAhB,WAAd,CAAjB;AACD;AALwB;AAM1B;;AAEDM,IAAAA,oBAAoB,GAAG;AACrB,WAAKH,QAAL,GAAgB,KAAhB;AACD;;AAEDI,IAAAA,cAAc,CAACC,KAAD,EAAQ;AACpB,UAAI,KAAKC,KAAT,EAAgB;AACd,aAAKA,KAAL,CAAWF,cAAX,CAA0BC,KAA1B;AACD;AACF;;AAEDE,IAAAA,MAAM,GAAG;AACP,UAAI,CAAC,KAAKX,KAAL,CAAWC,YAAhB,EAA8B;AAC5B,eAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAED,aACE,oBAAC,gBAAD;AACE,QAAA,GAAG,EAAEW,IAAI,IAAI;AACX,eAAKF,KAAL,GAAaE,IAAb;AACD;AAHH,SAIM,KAAKH,KAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAQD;;AAvCgC;;AAA7BX,EAAAA,IAJiD,CAK9Ce,SAL8C,GAKlChB,gBAAgB,CAACgB,SALiB;AAIjDf,EAAAA,IAJiD,CAM9CgB,YAN8C,GAM/BjB,gBAAgB,CAACiB,YANc;;AA8CvD,WAASC,cAAT,GAA0B;AACxB,WAAOtB,QAAP;AACD;;AAEDK,EAAAA,IAAI,CAACkB,MAAL,GAAcxB,yBAAyB,CAACM,IAAD,CAAvC;AACAA,EAAAA,IAAI,CAACL,QAAL,GAAgBA,QAAhB;AACAK,EAAAA,IAAI,CAACiB,cAAL,GAAsBA,cAAtB;;AACAjB,EAAAA,IAAI,CAACmB,aAAL,GAAqB,MAAMvB,QAA3B;;AACAI,EAAAA,IAAI,CAACoB,QAAL,GAAgB,MAAM5B,IAAI,CAACe,SAAL,CAAeT,IAAf,CAAtB;;AACAE,EAAAA,IAAI,CAACF,IAAL,GAAYA,IAAZ;AAEA,SAAOE,IAAP;AACD","sourcesContent":["import React from 'react';\nimport { Text } from 'react-native';\nimport * as Font from 'expo-font';\nimport createIconSet from './vendor/react-native-vector-icons/lib/create-icon-set';\nimport createIconButtonComponent from './vendor/react-native-vector-icons/lib/icon-button';\n\nexport default function(glyphMap, fontName, expoAssetId) {\n  const font = { [fontName]: expoAssetId };\n  const RNVIconComponent = createIconSet(glyphMap, fontName);\n\n  class Icon extends React.Component {\n    static propTypes = RNVIconComponent.propTypes;\n    static defaultProps = RNVIconComponent.defaultProps;\n\n    state = {\n      fontIsLoaded: Font.isLoaded(fontName),\n    };\n\n    async componentWillMount() {\n      this._mounted = true;\n      if (!this.state.fontIsLoaded) {\n        await Font.loadAsync(font);\n        this._mounted && this.setState({ fontIsLoaded: true });\n      }\n    }\n\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n\n    setNativeProps(props) {\n      if (this._icon) {\n        this._icon.setNativeProps(props);\n      }\n    }\n\n    render() {\n      if (!this.state.fontIsLoaded) {\n        return <Text />;\n      }\n\n      return (\n        <RNVIconComponent\n          ref={view => {\n            this._icon = view;\n          }}\n          {...this.props}\n        />\n      );\n    }\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.glyphMap = glyphMap;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = () => fontName;\n  Icon.loadFont = () => Font.loadAsync(font);\n  Icon.font = font;\n\n  return Icon;\n}\n"]},"metadata":{},"sourceType":"module"}