{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport uuidv4 from 'uuid/v4';\nimport UAParser from 'ua-parser-js';\n\nvar ExpoPackageJson = require('expo/package.json');\n\nexport default {\n  _sessionId: uuidv4(),\n\n  get appOwnership() {\n    return 'expo';\n  },\n\n  get deviceId() {\n    console.warn(\"ExponentConstants.deviceId: is unimplemented on this platform.\");\n    return null;\n  },\n\n  get name() {\n    return 'ExponentConstants';\n  },\n\n  get sessionId() {\n    return this._sessionId;\n  },\n\n  get platform() {\n    return {\n      web: UAParser(navigator.userAgent)\n    };\n  },\n\n  get isDevice() {\n    return true;\n  },\n\n  get expoVersion() {\n    return ExpoPackageJson.version;\n  },\n\n  get linkingUri() {\n    return location.origin + location.pathname;\n  },\n\n  get expoRuntimeVersion() {\n    console.warn(\"ExponentConstants.expoRuntimeVersion: is unimplemented on this platform.\");\n    return null;\n  },\n\n  get deviceName() {\n    return null;\n  },\n\n  get systemFonts() {\n    return [];\n  },\n\n  get statusBarHeight() {\n    return 0;\n  },\n\n  get deviceYearClass() {\n    console.warn(\"ExponentConstants.deviceYearClass: is unimplemented on this platform.\");\n    return null;\n  },\n\n  get manifest() {\n    return {};\n  },\n\n  getWebViewUserAgentAsync() {\n    return _asyncToGenerator(function* () {\n      return navigator.userAgent;\n    })();\n  }\n\n};","map":{"version":3,"sources":["../src/ExponentConstants.web.ts"],"names":[],"mappings":";;;;AAAA,OAAO,MAAP,MAAmB,SAAnB;AACA,OAAO,QAAP,MAAqB,cAArB;;AAEA,IAAM,eAAe,GAAG,OAAO,CAAC,mBAAD,CAA/B;;AAEA,eAAe;AACb,EAAA,UAAU,EAAE,MAAM,EADL;;AAEb,MAAI,YAAJ,GAAgB;AACd,WAAO,MAAP;AACD,GAJY;;AAKb,MAAI,QAAJ,GAAY;AACV,IAAA,OAAO,CAAC,IAAR;AACA,WAAO,IAAP;AACD,GARY;;AASb,MAAI,IAAJ,GAAQ;AACN,WAAO,mBAAP;AACD,GAXY;;AAYb,MAAI,SAAJ,GAAa;AACX,WAAO,KAAK,UAAZ;AACD,GAdY;;AAeb,MAAI,QAAJ,GAAY;AACV,WAAO;AAAE,MAAA,GAAG,EAAE,QAAQ,CAAC,SAAS,CAAC,SAAX;AAAf,KAAP;AACD,GAjBY;;AAkBb,MAAI,QAAJ,GAAY;AACV,WAAO,IAAP;AACD,GApBY;;AAqBb,MAAI,WAAJ,GAAe;AACb,WAAO,eAAe,CAAC,OAAvB;AACD,GAvBY;;AAwBb,MAAI,UAAJ,GAAc;AACZ,WAAO,QAAQ,CAAC,MAAT,GAAkB,QAAQ,CAAC,QAAlC;AACD,GA1BY;;AA2Bb,MAAI,kBAAJ,GAAsB;AACpB,IAAA,OAAO,CAAC,IAAR;AACA,WAAO,IAAP;AACD,GA9BY;;AA+Bb,MAAI,UAAJ,GAAc;AACZ,WAAO,IAAP;AACD,GAjCY;;AAkCb,MAAI,WAAJ,GAAe;AACb,WAAO,EAAP;AACD,GApCY;;AAqCb,MAAI,eAAJ,GAAmB;AACjB,WAAO,CAAP;AACD,GAvCY;;AAwCb,MAAI,eAAJ,GAAmB;AACjB,IAAA,OAAO,CAAC,IAAR;AACA,WAAO,IAAP;AACD,GA3CY;;AA4Cb,MAAI,QAAJ,GAAY;AAGV,WAAO,EAAP;AACD,GAhDY;;AAiDP,EAAA,wBAAN,GAA8B;AAAA;AAC5B,aAAO,SAAS,CAAC,SAAjB;AAD4B;AAE7B;;AAnDY,CAAf","sourcesContent":["import uuidv4 from 'uuid/v4';\nimport UAParser from 'ua-parser-js';\n\nconst ExpoPackageJson = require('expo/package.json');\n\nexport default {\n  _sessionId: uuidv4(),\n  get appOwnership() {\n    return 'expo';\n  },\n  get deviceId() {\n    console.warn(`ExponentConstants.deviceId: is unimplemented on this platform.`);\n    return null;\n  },\n  get name(): string {\n    return 'ExponentConstants';\n  },\n  get sessionId(): string {\n    return this._sessionId;\n  },\n  get platform(): object {\n    return { web: UAParser(navigator.userAgent) };\n  },\n  get isDevice(): boolean {\n    return true;\n  },\n  get expoVersion(): string {\n    return ExpoPackageJson.version;\n  },\n  get linkingUri(): string {\n    return location.origin + location.pathname;\n  },\n  get expoRuntimeVersion(): string | null {\n    console.warn(`ExponentConstants.expoRuntimeVersion: is unimplemented on this platform.`);\n    return null;\n  },\n  get deviceName(): string | null {\n    return null;\n  },\n  get systemFonts(): string[] {\n    return [];\n  },\n  get statusBarHeight(): number {\n    return 0;\n  },\n  get deviceYearClass(): string | null {\n    console.warn(`ExponentConstants.deviceYearClass: is unimplemented on this platform.`);\n    return null;\n  },\n  get manifest(): { [manifestKey: string]: any } {\n    /* TODO: Bacon: Populate */\n\n    return {};\n  },\n  async getWebViewUserAgentAsync(): Promise<string> {\n    return navigator.userAgent;\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}