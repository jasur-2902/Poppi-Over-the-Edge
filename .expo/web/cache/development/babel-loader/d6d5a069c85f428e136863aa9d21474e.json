{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { UnavailabilityError } from '@unimodules/core';\nimport ExpoHaptics from \"./ExpoHaptics\";\nimport { NotificationFeedbackType, ImpactFeedbackStyle } from \"./Haptics.types\";\nexport function notification() {\n  return _notification.apply(this, arguments);\n}\n\nfunction _notification() {\n  _notification = _asyncToGenerator(function* () {\n    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NotificationFeedbackType.Success;\n    console.warn('`Haptics.notification` is deprecated. Use `Haptics.notificationAsync` instead.');\n    yield notificationAsync(type);\n  });\n  return _notification.apply(this, arguments);\n}\n\nexport function impact() {\n  return _impact.apply(this, arguments);\n}\n\nfunction _impact() {\n  _impact = _asyncToGenerator(function* () {\n    var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ImpactFeedbackStyle.Medium;\n    console.warn('`Haptics.impact` is deprecated. Use `Haptics.impactAsync` instead.');\n    yield impactAsync(style);\n  });\n  return _impact.apply(this, arguments);\n}\n\nexport function selection() {\n  return _selection.apply(this, arguments);\n}\n\nfunction _selection() {\n  _selection = _asyncToGenerator(function* () {\n    console.warn('`Haptics.selection` is deprecated. Use `Haptics.selectionAsync` instead.');\n    yield selectionAsync();\n  });\n  return _selection.apply(this, arguments);\n}\n\nexport function notificationAsync() {\n  return _notificationAsync.apply(this, arguments);\n}\n\nfunction _notificationAsync() {\n  _notificationAsync = _asyncToGenerator(function* () {\n    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NotificationFeedbackType.Success;\n\n    if (!ExpoHaptics.notificationAsync) {\n      throw new UnavailabilityError('Haptics', 'notificationAsync');\n    }\n\n    yield ExpoHaptics.notificationAsync(type);\n  });\n  return _notificationAsync.apply(this, arguments);\n}\n\nexport function impactAsync() {\n  return _impactAsync.apply(this, arguments);\n}\n\nfunction _impactAsync() {\n  _impactAsync = _asyncToGenerator(function* () {\n    var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ImpactFeedbackStyle.Medium;\n\n    if (!ExpoHaptics.impactAsync) {\n      throw new UnavailabilityError('Haptic', 'impactAsync');\n    }\n\n    yield ExpoHaptics.impactAsync(style);\n  });\n  return _impactAsync.apply(this, arguments);\n}\n\nexport function selectionAsync() {\n  return _selectionAsync.apply(this, arguments);\n}\n\nfunction _selectionAsync() {\n  _selectionAsync = _asyncToGenerator(function* () {\n    if (!ExpoHaptics.selectionAsync) {\n      throw new UnavailabilityError('Haptic', 'selectionAsync');\n    }\n\n    yield ExpoHaptics.selectionAsync();\n  });\n  return _selectionAsync.apply(this, arguments);\n}\n\nexport { NotificationFeedbackType, ImpactFeedbackStyle };","map":{"version":3,"sources":["../src/Haptics.ts"],"names":[],"mappings":";;;;AAAA,SAAS,mBAAT,QAAoC,kBAApC;AAEA,OAAO,WAAP;AACA,SAAS,wBAAT,EAAmC,mBAAnC;AAEA,gBAAsB,YAAtB;AAAA;AAAA;;;oCAAO,aAA6F;AAAA,QAAjE,IAAiE,uEAAhC,wBAAwB,CAAC,OAAO;AAClG,IAAA,OAAO,CAAC,IAAR,CAAa,gFAAb;AACA,UAAM,iBAAiB,CAAC,IAAD,CAAvB;AACD,G;;;;AAED,gBAAsB,MAAtB;AAAA;AAAA;;;8BAAO,aAA6E;AAAA,QAAvD,KAAuD,uEAA1B,mBAAmB,CAAC,MAAM;AAClF,IAAA,OAAO,CAAC,IAAR,CAAa,oEAAb;AACA,UAAM,WAAW,CAAC,KAAD,CAAjB;AACD,G;;;;AAED,gBAAsB,SAAtB;AAAA;AAAA;;;iCAAO,aAAwB;AAC7B,IAAA,OAAO,CAAC,IAAR,CAAa,0EAAb;AACA,UAAM,cAAc,EAApB;AACD,G;;;;AAKD,gBAAsB,iBAAtB;AAAA;AAAA;;;yCAAO,aAAkG;AAAA,QAAjE,IAAiE,uEAAhC,wBAAwB,CAAC,OAAO;;AACvG,QAAI,CAAC,WAAW,CAAC,iBAAjB,EAAoC;AAClC,YAAM,IAAI,mBAAJ,CAAwB,SAAxB,EAAmC,mBAAnC,CAAN;AACD;;AACD,UAAM,WAAW,CAAC,iBAAZ,CAA8B,IAA9B,CAAN;AACD,G;;;;AAKD,gBAAsB,WAAtB;AAAA;AAAA;;;mCAAO,aAAkF;AAAA,QAAvD,KAAuD,uEAA1B,mBAAmB,CAAC,MAAM;;AACvF,QAAI,CAAC,WAAW,CAAC,WAAjB,EAA8B;AAC5B,YAAM,IAAI,mBAAJ,CAAwB,QAAxB,EAAkC,aAAlC,CAAN;AACD;;AACD,UAAM,WAAW,CAAC,WAAZ,CAAwB,KAAxB,CAAN;AACD,G;;;;AAKD,gBAAsB,cAAtB;AAAA;AAAA;;;sCAAO,aAA6B;AAClC,QAAI,CAAC,WAAW,CAAC,cAAjB,EAAiC;AAC/B,YAAM,IAAI,mBAAJ,CAAwB,QAAxB,EAAkC,gBAAlC,CAAN;AACD;;AACD,UAAM,WAAW,CAAC,cAAZ,EAAN;AACD,G;;;;AAED,SAAS,wBAAT,EAAmC,mBAAnC","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\n\nimport ExpoHaptics from './ExpoHaptics';\nimport { NotificationFeedbackType, ImpactFeedbackStyle } from './Haptics.types';\n\nexport async function notification(type: NotificationFeedbackType = NotificationFeedbackType.Success): Promise<void> {\n  console.warn('`Haptics.notification` is deprecated. Use `Haptics.notificationAsync` instead.');\n  await notificationAsync(type);\n}\n\nexport async function impact(style: ImpactFeedbackStyle = ImpactFeedbackStyle.Medium): Promise<void> {\n  console.warn('`Haptics.impact` is deprecated. Use `Haptics.impactAsync` instead.');\n  await impactAsync(style);\n}\n\nexport async function selection(): Promise<void> {\n  console.warn('`Haptics.selection` is deprecated. Use `Haptics.selectionAsync` instead.');\n  await selectionAsync();\n}\n\n/**\n * Triggers notification feedback.\n */\nexport async function notificationAsync(type: NotificationFeedbackType = NotificationFeedbackType.Success): Promise<void> {\n  if (!ExpoHaptics.notificationAsync) {\n    throw new UnavailabilityError('Haptics', 'notificationAsync');\n  }\n  await ExpoHaptics.notificationAsync(type);\n}\n\n/**\n * Triggers impact feedback.\n */\nexport async function impactAsync(style: ImpactFeedbackStyle = ImpactFeedbackStyle.Medium): Promise<void> {\n  if (!ExpoHaptics.impactAsync) {\n    throw new UnavailabilityError('Haptic', 'impactAsync');\n  }\n  await ExpoHaptics.impactAsync(style);\n}\n\n/**\n * Triggers selection feedback.\n */\nexport async function selectionAsync(): Promise<void> {\n  if (!ExpoHaptics.selectionAsync) {\n    throw new UnavailabilityError('Haptic', 'selectionAsync');\n  }\n  await ExpoHaptics.selectionAsync();\n}\n\nexport { NotificationFeedbackType, ImpactFeedbackStyle };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}