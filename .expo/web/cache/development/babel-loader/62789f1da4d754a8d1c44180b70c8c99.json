{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jshukurov\\\\Desktop\\\\Poppi Over The Edge\\\\Poppi-Over-the-Edge-master\\\\node_modules\\\\react-native-gesture-handler\\\\DrawerLayout.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport invariant from 'invariant';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler, TapGestureHandler, State } from \"./GestureHandler\";\nvar DRAG_TOSS = 0.05;\nvar IDLE = 'Idle';\nvar DRAGGING = 'Dragging';\nvar SETTLING = 'Settling';\nexport default class DrawerLayout extends Component {\n  constructor(_props, context) {\n    var _this;\n\n    super(_props, context);\n    _this = this;\n    this._accessibilityIsModalView = React.createRef();\n    this._pointerEventsView = React.createRef();\n    this._panGestureHandler = React.createRef();\n    this._drawerShown = false;\n\n    this._updateAnimatedEvent = (props, state) => {\n      var {\n        drawerPosition,\n        drawerWidth,\n        drawerType\n      } = props;\n      var {\n        dragX: dragXValue,\n        touchX: touchXValue,\n        drawerTranslation,\n        containerWidth\n      } = state;\n      var dragX = dragXValue;\n      var touchX = touchXValue;\n\n      if (drawerPosition !== 'left') {\n        dragX = Animated.multiply(new Animated.Value(-1), dragXValue);\n        touchX = Animated.add(new Animated.Value(containerWidth), Animated.multiply(new Animated.Value(-1), touchXValue));\n        touchXValue.setValue(containerWidth);\n      } else {\n        touchXValue.setValue(0);\n      }\n\n      var translationX = dragX;\n\n      if (drawerType === 'front') {\n        var startPositionX = Animated.add(touchX, Animated.multiply(new Animated.Value(-1), dragX));\n        var dragOffsetFromOnStartPosition = startPositionX.interpolate({\n          inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n          outputRange: [0, 0, 1]\n        });\n        translationX = Animated.add(dragX, dragOffsetFromOnStartPosition);\n      }\n\n      this._openValue = Animated.add(translationX, drawerTranslation).interpolate({\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n      this._onGestureEvent = Animated.event([{\n        nativeEvent: {\n          translationX: dragXValue,\n          x: touchXValue\n        }\n      }], {\n        useNativeDriver: props.useNativeAnimations\n      });\n    };\n\n    this._handleContainerLayout = (_ref) => {\n      var {\n        nativeEvent\n      } = _ref;\n      this.setState({\n        containerWidth: nativeEvent.layout.width\n      });\n    };\n\n    this._emitStateChanged = (newState, drawerWillShow) => {\n      this.props.onDrawerStateChanged && this.props.onDrawerStateChanged(newState, drawerWillShow);\n    };\n\n    this._openingHandlerStateChange = (_ref2) => {\n      var {\n        nativeEvent\n      } = _ref2;\n\n      if (nativeEvent.oldState === State.ACTIVE) {\n        this._handleRelease(nativeEvent);\n      } else if (nativeEvent.state === State.ACTIVE) {\n        this._emitStateChanged(DRAGGING, false);\n\n        if (this.props.keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n\n        if (this.props.hideStatusBar) {\n          StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n        }\n      }\n    };\n\n    this._onTapHandlerStateChange = (_ref3) => {\n      var {\n        nativeEvent\n      } = _ref3;\n\n      if (this._drawerShown && nativeEvent.oldState === State.ACTIVE && this.props.drawerLockMode !== 'locked-open') {\n        this.closeDrawer();\n      }\n    };\n\n    this._handleRelease = nativeEvent => {\n      var {\n        drawerWidth,\n        drawerPosition,\n        drawerType\n      } = this.props;\n      var {\n        containerWidth\n      } = this.state;\n      var {\n        translationX: dragX,\n        velocityX,\n        x: touchX\n      } = nativeEvent;\n\n      if (drawerPosition !== 'left') {\n        dragX = -dragX;\n        touchX = containerWidth - touchX;\n        velocityX = -velocityX;\n      }\n\n      var gestureStartX = touchX - dragX;\n      var dragOffsetBasedOnStart = 0;\n\n      if (drawerType === 'front') {\n        dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n      }\n\n      var startOffsetX = dragX + dragOffsetBasedOnStart + (this._drawerShown ? drawerWidth : 0);\n      var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n      var shouldOpen = projOffsetX > drawerWidth / 2;\n\n      if (shouldOpen) {\n        this._animateDrawer(startOffsetX, drawerWidth, velocityX);\n      } else {\n        this._animateDrawer(startOffsetX, 0, velocityX);\n      }\n    };\n\n    this._updateShowing = showing => {\n      this._drawerShown = showing;\n      this._accessibilityIsModalView.current && this._accessibilityIsModalView.current.setNativeProps({\n        accessibilityViewIsModal: showing\n      });\n      this._pointerEventsView.current && this._pointerEventsView.current.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none'\n      });\n      var {\n        drawerPosition,\n        minSwipeDistance,\n        edgeWidth\n      } = this.props;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (this._drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: showing ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: showing ? undefined : edgeWidth\n      };\n      this._panGestureHandler.current && this._panGestureHandler.current.setNativeProps({\n        hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance\n      });\n    };\n\n    this._animateDrawer = (fromValue, toValue, velocity) => {\n      this.state.dragX.setValue(0);\n      this.state.touchX.setValue(this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth);\n\n      if (fromValue !== undefined) {\n        var nextFramePosition = fromValue;\n\n        if (this.props.useNativeAnimations) {\n          if (fromValue < toValue && velocity > 0) {\n            nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n          } else if (fromValue > toValue && velocity < 0) {\n            nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n          }\n        }\n\n        this.state.drawerTranslation.setValue(nextFramePosition);\n      }\n\n      var willShow = toValue !== 0;\n\n      this._updateShowing(willShow);\n\n      this._emitStateChanged(SETTLING, willShow);\n\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n      }\n\n      Animated.spring(this.state.drawerTranslation, {\n        velocity,\n        bounciness: 0,\n        toValue,\n        useNativeDriver: this.props.useNativeAnimations\n      }).start((_ref4) => {\n        var {\n          finished\n        } = _ref4;\n\n        if (finished) {\n          this._emitStateChanged(IDLE, willShow);\n\n          if (willShow) {\n            this.props.onDrawerOpen && this.props.onDrawerOpen();\n          } else {\n            this.props.onDrawerClose && this.props.onDrawerClose();\n          }\n        }\n      });\n    };\n\n    this.openDrawer = function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _this._animateDrawer(undefined, _this.props.drawerWidth, options.velocity ? options.velocity : 0);\n\n      _this.forceUpdate();\n    };\n\n    this.closeDrawer = function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _this._animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\n\n      _this.forceUpdate();\n    };\n\n    this._renderOverlay = () => {\n      invariant(this._openValue, 'should be set');\n\n      var overlayOpacity = this._openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, 0.7],\n        extrapolate: 'clamp'\n      });\n\n      var dynamicOverlayStyles = {\n        opacity: overlayOpacity,\n        backgroundColor: this.props.overlayColor\n      };\n      return React.createElement(TapGestureHandler, {\n        onHandlerStateChange: this._onTapHandlerStateChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 7\n        }\n      }, React.createElement(Animated.View, {\n        pointerEvents: this._drawerShown ? 'auto' : 'none',\n        ref: this._pointerEventsView,\n        style: [styles.overlay, dynamicOverlayStyles],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    this._renderDrawer = () => {\n      var {\n        drawerBackgroundColor,\n        drawerWidth,\n        drawerPosition,\n        drawerType,\n        drawerContainerStyle,\n        contentContainerStyle\n      } = this.props;\n      var fromLeft = drawerPosition === 'left';\n      var drawerSlide = drawerType !== 'back';\n      var containerSlide = drawerType !== 'front';\n      var reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n      var dynamicDrawerStyles = {\n        backgroundColor: drawerBackgroundColor,\n        width: drawerWidth\n      };\n      var openValue = this._openValue;\n      invariant(openValue, 'should be set');\n      var containerStyles;\n\n      if (containerSlide) {\n        var containerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n          extrapolate: 'clamp'\n        });\n        containerStyles = {\n          transform: [{\n            translateX: containerTranslateX\n          }]\n        };\n      }\n\n      var drawerTranslateX = 0;\n\n      if (drawerSlide) {\n        var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n        drawerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [closedDrawerOffset, 0],\n          extrapolate: 'clamp'\n        });\n      }\n\n      var drawerStyles = {\n        transform: [{\n          translateX: drawerTranslateX\n        }],\n        flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n      };\n      return React.createElement(Animated.View, {\n        style: styles.main,\n        onLayout: this._handleContainerLayout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 7\n        }\n      }, React.createElement(Animated.View, {\n        style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 9\n        }\n      }, typeof this.props.children === 'function' ? this.props.children(this._openValue) : this.props.children, this._renderOverlay()), React.createElement(Animated.View, {\n        pointerEvents: \"box-none\",\n        ref: this._accessibilityIsModalView,\n        accessibilityViewIsModal: this._drawerShown,\n        style: [styles.drawerContainer, drawerStyles, drawerContainerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: dynamicDrawerStyles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 11\n        }\n      }, this.props.renderNavigationView(this._openValue))));\n    };\n\n    this._setPanGestureRef = ref => {\n      this._panGestureHandler.current = ref;\n      this.props.onGestureRef && this.props.onGestureRef(ref);\n    };\n\n    var _dragX = new Animated.Value(0);\n\n    var _touchX = new Animated.Value(0);\n\n    var _drawerTranslation = new Animated.Value(0);\n\n    this.state = {\n      dragX: _dragX,\n      touchX: _touchX,\n      drawerTranslation: _drawerTranslation,\n      containerWidth: 0\n    };\n\n    this._updateAnimatedEvent(_props, this.state);\n  }\n\n  componentWillUpdate(props, state) {\n    if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n      this._updateAnimatedEvent(props, state);\n    }\n  }\n\n  render() {\n    var {\n      drawerPosition,\n      drawerLockMode,\n      edgeWidth,\n      minSwipeDistance\n    } = this.props;\n    var fromLeft = drawerPosition === 'left';\n    var gestureOrientation = (fromLeft ? 1 : -1) * (this._drawerShown ? -1 : 1);\n    var hitSlop = fromLeft ? {\n      left: 0,\n      width: this._drawerShown ? undefined : edgeWidth\n    } : {\n      right: 0,\n      width: this._drawerShown ? undefined : edgeWidth\n    };\n    return React.createElement(PanGestureHandler, {\n      ref: this._setPanGestureRef,\n      hitSlop: hitSlop,\n      activeOffsetX: gestureOrientation * minSwipeDistance,\n      failOffsetY: [-15, 15],\n      onGestureEvent: this._onGestureEvent,\n      onHandlerStateChange: this._openingHandlerStateChange,\n      enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 7\n      }\n    }, this._renderDrawer());\n  }\n\n}\nDrawerLayout.defaultProps = {\n  drawerWidth: 200,\n  drawerPosition: 'left',\n  useNativeAnimations: true,\n  drawerType: 'front',\n  edgeWidth: 20,\n  minSwipeDistance: 3,\n  overlayColor: 'black',\n  drawerLockMode: 'unlocked'\n};\nDrawerLayout.positions = {\n  Left: 'left',\n  Right: 'right'\n};\nvar styles = StyleSheet.create({\n  drawerContainer: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    zIndex: 1001,\n    flexDirection: 'row'\n  }),\n  containerInFront: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    zIndex: 1002\n  }),\n  containerOnBack: _objectSpread({}, StyleSheet.absoluteFillObject),\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden'\n  },\n  overlay: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    zIndex: 1000\n  })\n});","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/react-native-gesture-handler/DrawerLayout.js"],"names":["React","Component","invariant","PanGestureHandler","TapGestureHandler","State","DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","constructor","props","context","_accessibilityIsModalView","createRef","_pointerEventsView","_panGestureHandler","_drawerShown","_updateAnimatedEvent","state","drawerPosition","drawerWidth","drawerType","dragX","dragXValue","touchX","touchXValue","drawerTranslation","containerWidth","Animated","multiply","Value","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","_openValue","extrapolate","_onGestureEvent","event","nativeEvent","x","useNativeDriver","useNativeAnimations","_handleContainerLayout","setState","layout","width","_emitStateChanged","newState","drawerWillShow","onDrawerStateChanged","_openingHandlerStateChange","oldState","ACTIVE","_handleRelease","keyboardDismissMode","Keyboard","dismiss","hideStatusBar","StatusBar","setHidden","statusBarAnimation","_onTapHandlerStateChange","drawerLockMode","closeDrawer","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","_animateDrawer","_updateShowing","showing","current","setNativeProps","accessibilityViewIsModal","pointerEvents","minSwipeDistance","edgeWidth","fromLeft","gestureOrientation","hitSlop","left","undefined","right","activeOffsetX","fromValue","toValue","velocity","nextFramePosition","Math","min","max","willShow","spring","bounciness","start","finished","onDrawerOpen","onDrawerClose","openDrawer","options","forceUpdate","_renderOverlay","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","overlayColor","styles","overlay","_renderDrawer","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","I18nManager","isRTL","dynamicDrawerStyles","openValue","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","containerOnBack","containerInFront","children","drawerContainer","renderNavigationView","_setPanGestureRef","ref","onGestureRef","componentWillUpdate","render","defaultProps","positions","Left","Right","StyleSheet","create","absoluteFillObject","zIndex","flex","overflow"],"mappings":";;;;;;;;AAUA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,WAAtB;;;;;;;AAUA,SAASC,iBAAT,EAA4BC,iBAA5B,EAA+CC,KAA/C;AAEA,IAAMC,SAAS,GAAG,IAAlB;AAEA,IAAMC,IAAI,GAAG,MAAb;AACA,IAAMC,QAAQ,GAAG,UAAjB;AACA,IAAMC,QAAQ,GAAG,UAAjB;AA6CA,eAAe,MAAMC,YAAN,SAA2BT,SAA3B,CAA0D;AAuBvEU,EAAAA,WAAW,CAACC,MAAD,EAAkBC,OAAlB,EAAgC;AAAA;;AACzC,UAAMD,MAAN,EAAaC,OAAb,CADyC;AAAA;AAAA,SAL3CC,yBAK2C,GALfd,KAAK,CAACe,SAAN,EAKe;AAAA,SAJ3CC,kBAI2C,GAJtBhB,KAAK,CAACe,SAAN,EAIsB;AAAA,SAH3CE,kBAG2C,GAHtBjB,KAAK,CAACe,SAAN,EAGsB;AAAA,SAF3CG,YAE2C,GAF5B,KAE4B;;AAAA,SA4B3CC,oBA5B2C,GA4BpB,CAACP,KAAD,EAAkBQ,KAAlB,KAAuC;AAE5D,UAAM;AAAEC,QAAAA,cAAF;AAAkBC,QAAAA,WAAlB;AAA+BC,QAAAA;AAA/B,UAA8CX,KAApD;AACA,UAAM;AACJY,QAAAA,KAAK,EAAEC,UADH;AAEJC,QAAAA,MAAM,EAAEC,WAFJ;AAGJC,QAAAA,iBAHI;AAIJC,QAAAA;AAJI,UAKFT,KALJ;AAOA,UAAII,KAAK,GAAGC,UAAZ;AACA,UAAIC,MAAM,GAAGC,WAAb;;AAEA,UAAIN,cAAc,KAAK,MAAvB,EAA+B;AAQ7BG,QAAAA,KAAK,GAAGM,QAAQ,CAACC,QAAT,CAAkB,IAAID,QAAQ,CAACE,KAAb,CAAmB,CAAC,CAApB,CAAlB,EAA0CP,UAA1C,CAAR;AACAC,QAAAA,MAAM,GAAGI,QAAQ,CAACG,GAAT,CACP,IAAIH,QAAQ,CAACE,KAAb,CAAmBH,cAAnB,CADO,EAEPC,QAAQ,CAACC,QAAT,CAAkB,IAAID,QAAQ,CAACE,KAAb,CAAmB,CAAC,CAApB,CAAlB,EAA0CL,WAA1C,CAFO,CAAT;AAIAA,QAAAA,WAAW,CAACO,QAAZ,CAAqBL,cAArB;AACD,OAdD,MAcO;AACLF,QAAAA,WAAW,CAACO,QAAZ,CAAqB,CAArB;AACD;;AA0BD,UAAIC,YAAY,GAAGX,KAAnB;;AACA,UAAID,UAAU,KAAK,OAAnB,EAA4B;AAC1B,YAAMa,cAAc,GAAGN,QAAQ,CAACG,GAAT,CACrBP,MADqB,EAErBI,QAAQ,CAACC,QAAT,CAAkB,IAAID,QAAQ,CAACE,KAAb,CAAmB,CAAC,CAApB,CAAlB,EAA0CR,KAA1C,CAFqB,CAAvB;AAKA,YAAMa,6BAA6B,GAAGD,cAAc,CAACE,WAAf,CAA2B;AAC/DC,UAAAA,UAAU,EAAE,CAACjB,WAAW,GAAG,CAAf,EAAkBA,WAAlB,EAA+BA,WAAW,GAAG,CAA7C,CADmD;AAE/DkB,UAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAFkD,SAA3B,CAAtC;AAIAL,QAAAA,YAAY,GAAGL,QAAQ,CAACG,GAAT,CAAaT,KAAb,EAAoBa,6BAApB,CAAf;AACD;;AAED,WAAKI,UAAL,GAAkBX,QAAQ,CAACG,GAAT,CAAaE,YAAb,EAA2BP,iBAA3B,EAA8CU,WAA9C,CAChB;AACEC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAIjB,WAAJ,CADd;AAEEkB,QAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,CAFf;AAGEE,QAAAA,WAAW,EAAE;AAHf,OADgB,CAAlB;AAQA,WAAKC,eAAL,GAAuBb,QAAQ,CAACc,KAAT,CACrB,CAAC;AAAEC,QAAAA,WAAW,EAAE;AAAEV,UAAAA,YAAY,EAAEV,UAAhB;AAA4BqB,UAAAA,CAAC,EAAEnB;AAA/B;AAAf,OAAD,CADqB,EAErB;AAAEoB,QAAAA,eAAe,EAAEnC,KAAK,CAACoC;AAAzB,OAFqB,CAAvB;AAID,KA7G0C;;AAAA,SA+G3CC,sBA/G2C,GA+GlB,UAAqB;AAAA,UAApB;AAAEJ,QAAAA;AAAF,OAAoB;AAC5C,WAAKK,QAAL,CAAc;AAAErB,QAAAA,cAAc,EAAEgB,WAAW,CAACM,MAAZ,CAAmBC;AAArC,OAAd;AACD,KAjH0C;;AAAA,SAmH3CC,iBAnH2C,GAmHvB,CAACC,QAAD,EAAmBC,cAAnB,KAA+C;AACjE,WAAK3C,KAAL,CAAW4C,oBAAX,IACE,KAAK5C,KAAL,CAAW4C,oBAAX,CAAgCF,QAAhC,EAA0CC,cAA1C,CADF;AAED,KAtH0C;;AAAA,SAwH3CE,0BAxH2C,GAwHd,WAAqB;AAAA,UAApB;AAAEZ,QAAAA;AAAF,OAAoB;;AAChD,UAAIA,WAAW,CAACa,QAAZ,KAAyBrD,KAAK,CAACsD,MAAnC,EAA2C;AACzC,aAAKC,cAAL,CAAoBf,WAApB;AACD,OAFD,MAEO,IAAIA,WAAW,CAACzB,KAAZ,KAAsBf,KAAK,CAACsD,MAAhC,EAAwC;AAC7C,aAAKN,iBAAL,CAAuB7C,QAAvB,EAAiC,KAAjC;;AACA,YAAI,KAAKI,KAAL,CAAWiD,mBAAX,KAAmC,SAAvC,EAAkD;AAChDC,UAAAA,QAAQ,CAACC,OAAT;AACD;;AACD,YAAI,KAAKnD,KAAL,CAAWoD,aAAf,EAA8B;AAC5BC,UAAAA,SAAS,CAACC,SAAV,CAAoB,IAApB,EAA0B,KAAKtD,KAAL,CAAWuD,kBAAX,IAAiC,OAA3D;AACD;AACF;AACF,KApI0C;;AAAA,SAsI3CC,wBAtI2C,GAsIhB,WAAqB;AAAA,UAApB;AAAEvB,QAAAA;AAAF,OAAoB;;AAC9C,UACE,KAAK3B,YAAL,IACA2B,WAAW,CAACa,QAAZ,KAAyBrD,KAAK,CAACsD,MAD/B,IAEA,KAAK/C,KAAL,CAAWyD,cAAX,KAA8B,aAHhC,EAIE;AACA,aAAKC,WAAL;AACD;AACF,KA9I0C;;AAAA,SAgJ3CV,cAhJ2C,GAgJ1Bf,WAAW,IAAI;AAC9B,UAAM;AAAEvB,QAAAA,WAAF;AAAeD,QAAAA,cAAf;AAA+BE,QAAAA;AAA/B,UAA8C,KAAKX,KAAzD;AACA,UAAM;AAAEiB,QAAAA;AAAF,UAAqB,KAAKT,KAAhC;AACA,UAAI;AAAEe,QAAAA,YAAY,EAAEX,KAAhB;AAAuB+C,QAAAA,SAAvB;AAAkCzB,QAAAA,CAAC,EAAEpB;AAArC,UAAgDmB,WAApD;;AAEA,UAAIxB,cAAc,KAAK,MAAvB,EAA+B;AAG7BG,QAAAA,KAAK,GAAG,CAACA,KAAT;AACAE,QAAAA,MAAM,GAAGG,cAAc,GAAGH,MAA1B;AACA6C,QAAAA,SAAS,GAAG,CAACA,SAAb;AACD;;AAED,UAAMC,aAAa,GAAG9C,MAAM,GAAGF,KAA/B;AACA,UAAIiD,sBAAsB,GAAG,CAA7B;;AAEA,UAAIlD,UAAU,KAAK,OAAnB,EAA4B;AAC1BkD,QAAAA,sBAAsB,GACpBD,aAAa,GAAGlD,WAAhB,GAA8BkD,aAAa,GAAGlD,WAA9C,GAA4D,CAD9D;AAED;;AAED,UAAMoD,YAAY,GAChBlD,KAAK,GAAGiD,sBAAR,IAAkC,KAAKvD,YAAL,GAAoBI,WAApB,GAAkC,CAApE,CADF;AAEA,UAAMqD,WAAW,GAAGD,YAAY,GAAGpE,SAAS,GAAGiE,SAA/C;AAEA,UAAMK,UAAU,GAAGD,WAAW,GAAGrD,WAAW,GAAG,CAA/C;;AAEA,UAAIsD,UAAJ,EAAgB;AACd,aAAKC,cAAL,CAAoBH,YAApB,EAAkCpD,WAAlC,EAA+CiD,SAA/C;AACD,OAFD,MAEO;AACL,aAAKM,cAAL,CAAoBH,YAApB,EAAkC,CAAlC,EAAqCH,SAArC;AACD;AACF,KAhL0C;;AAAA,SAkL3CO,cAlL2C,GAkLzBC,OAAD,IAAsB;AACrC,WAAK7D,YAAL,GAAoB6D,OAApB;AACA,WAAKjE,yBAAL,CAA+BkE,OAA/B,IACE,KAAKlE,yBAAL,CAA+BkE,OAA/B,CAAuCC,cAAvC,CAAsD;AACpDC,QAAAA,wBAAwB,EAAEH;AAD0B,OAAtD,CADF;AAIA,WAAK/D,kBAAL,CAAwBgE,OAAxB,IACE,KAAKhE,kBAAL,CAAwBgE,OAAxB,CAAgCC,cAAhC,CAA+C;AAC7CE,QAAAA,aAAa,EAAEJ,OAAO,GAAG,MAAH,GAAY;AADW,OAA/C,CADF;AAIA,UAAM;AAAE1D,QAAAA,cAAF;AAAkB+D,QAAAA,gBAAlB;AAAoCC,QAAAA;AAApC,UAAkD,KAAKzE,KAA7D;AACA,UAAM0E,QAAQ,GAAGjE,cAAc,KAAK,MAApC;AAIA,UAAMkE,kBAAkB,GACtB,CAACD,QAAQ,GAAG,CAAH,GAAO,CAAC,CAAjB,KAAuB,KAAKpE,YAAL,GAAoB,CAAC,CAArB,GAAyB,CAAhD,CADF;AAKA,UAAMsE,OAAO,GAAGF,QAAQ,GACpB;AAAEG,QAAAA,IAAI,EAAE,CAAR;AAAWrC,QAAAA,KAAK,EAAE2B,OAAO,GAAGW,SAAH,GAAeL;AAAxC,OADoB,GAEpB;AAAEM,QAAAA,KAAK,EAAE,CAAT;AAAYvC,QAAAA,KAAK,EAAE2B,OAAO,GAAGW,SAAH,GAAeL;AAAzC,OAFJ;AAGA,WAAKpE,kBAAL,CAAwB+D,OAAxB,IACE,KAAK/D,kBAAL,CAAwB+D,OAAxB,CAAgCC,cAAhC,CAA+C;AAC7CO,QAAAA,OAD6C;AAE7CI,QAAAA,aAAa,EAAEL,kBAAkB,GAAGH;AAFS,OAA/C,CADF;AAKD,KA9M0C;;AAAA,SAgN3CP,cAhN2C,GAgN1B,CAACgB,SAAD,EAAqBC,OAArB,EAAsCC,QAAtC,KAA2D;AAC1E,WAAK3E,KAAL,CAAWI,KAAX,CAAiBU,QAAjB,CAA0B,CAA1B;AACA,WAAKd,KAAL,CAAWM,MAAX,CAAkBQ,QAAlB,CACE,KAAKtB,KAAL,CAAWS,cAAX,KAA8B,MAA9B,GAAuC,CAAvC,GAA2C,KAAKD,KAAL,CAAWS,cADxD;;AAIA,UAAIgE,SAAS,KAAKH,SAAlB,EAA6B;AAC3B,YAAIM,iBAAiB,GAAGH,SAAxB;;AACA,YAAI,KAAKjF,KAAL,CAAWoC,mBAAf,EAAoC;AAKlC,cAAI6C,SAAS,GAAGC,OAAZ,IAAuBC,QAAQ,GAAG,CAAtC,EAAyC;AACvCC,YAAAA,iBAAiB,GAAGC,IAAI,CAACC,GAAL,CAASL,SAAS,GAAGE,QAAQ,GAAG,IAAhC,EAAsCD,OAAtC,CAApB;AACD,WAFD,MAEO,IAAID,SAAS,GAAGC,OAAZ,IAAuBC,QAAQ,GAAG,CAAtC,EAAyC;AAC9CC,YAAAA,iBAAiB,GAAGC,IAAI,CAACE,GAAL,CAASN,SAAS,GAAGE,QAAQ,GAAG,IAAhC,EAAsCD,OAAtC,CAApB;AACD;AACF;;AACD,aAAK1E,KAAL,CAAWQ,iBAAX,CAA6BM,QAA7B,CAAsC8D,iBAAtC;AACD;;AAED,UAAMI,QAAQ,GAAGN,OAAO,KAAK,CAA7B;;AACA,WAAKhB,cAAL,CAAoBsB,QAApB;;AACA,WAAK/C,iBAAL,CAAuB5C,QAAvB,EAAiC2F,QAAjC;;AACA,UAAI,KAAKxF,KAAL,CAAWoD,aAAf,EAA8B;AAC5BC,QAAAA,SAAS,CAACC,SAAV,CAAoBkC,QAApB,EAA8B,KAAKxF,KAAL,CAAWuD,kBAAX,IAAiC,OAA/D;AACD;;AACDrC,MAAAA,QAAQ,CAACuE,MAAT,CAAgB,KAAKjF,KAAL,CAAWQ,iBAA3B,EAA8C;AAC5CmE,QAAAA,QAD4C;AAE5CO,QAAAA,UAAU,EAAE,CAFgC;AAG5CR,QAAAA,OAH4C;AAI5C/C,QAAAA,eAAe,EAAE,KAAKnC,KAAL,CAAWoC;AAJgB,OAA9C,EAKGuD,KALH,CAKS,WAAkB;AAAA,YAAjB;AAAEC,UAAAA;AAAF,SAAiB;;AACzB,YAAIA,QAAJ,EAAc;AACZ,eAAKnD,iBAAL,CAAuB9C,IAAvB,EAA6B6F,QAA7B;;AACA,cAAIA,QAAJ,EAAc;AACZ,iBAAKxF,KAAL,CAAW6F,YAAX,IAA2B,KAAK7F,KAAL,CAAW6F,YAAX,EAA3B;AACD,WAFD,MAEO;AACL,iBAAK7F,KAAL,CAAW8F,aAAX,IAA4B,KAAK9F,KAAL,CAAW8F,aAAX,EAA5B;AACD;AACF;AACF,OAdD;AAeD,KA3P0C;;AAAA,SA6P3CC,UA7P2C,GA6P9B,YAA4C;AAAA,UAA3CC,OAA2C,uEAAP,EAAO;;AACvD,MAAA,KAAI,CAAC/B,cAAL,CACEa,SADF,EAEE,KAAI,CAAC9E,KAAL,CAAWU,WAFb,EAGEsF,OAAO,CAACb,QAAR,GAAmBa,OAAO,CAACb,QAA3B,GAAsC,CAHxC;;AAOA,MAAA,KAAI,CAACc,WAAL;AACD,KAtQ0C;;AAAA,SAwQ3CvC,WAxQ2C,GAwQ7B,YAA4C;AAAA,UAA3CsC,OAA2C,uEAAP,EAAO;;AACxD,MAAA,KAAI,CAAC/B,cAAL,CAAoBa,SAApB,EAA+B,CAA/B,EAAkCkB,OAAO,CAACb,QAAR,GAAmBa,OAAO,CAACb,QAA3B,GAAsC,CAAxE;;AAGA,MAAA,KAAI,CAACc,WAAL;AACD,KA7Q0C;;AAAA,SA+Q3CC,cA/Q2C,GA+Q1B,MAAM;AAErB5G,MAAAA,SAAS,CAAC,KAAKuC,UAAN,EAAkB,eAAlB,CAAT;;AACA,UAAMsE,cAAc,GAAG,KAAKtE,UAAL,CAAgBH,WAAhB,CAA4B;AACjDC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADqC;AAEjDC,QAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,GAAJ,CAFoC;AAGjDE,QAAAA,WAAW,EAAE;AAHoC,OAA5B,CAAvB;;AAKA,UAAMsE,oBAAoB,GAAG;AAC3BC,QAAAA,OAAO,EAAEF,cADkB;AAE3BG,QAAAA,eAAe,EAAE,KAAKtG,KAAL,CAAWuG;AAFD,OAA7B;AAKA,aACE,oBAAC,iBAAD;AAAmB,QAAA,oBAAoB,EAAE,KAAK/C,wBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD,CAAU,IAAV;AACE,QAAA,aAAa,EAAE,KAAKlD,YAAL,GAAoB,MAApB,GAA6B,MAD9C;AAEE,QAAA,GAAG,EAAE,KAAKF,kBAFZ;AAGE,QAAA,KAAK,EAAE,CAACoG,MAAM,CAACC,OAAR,EAAiBL,oBAAjB,CAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AASD,KArS0C;;AAAA,SAuS3CM,aAvS2C,GAuS3B,MAAM;AACpB,UAAM;AACJC,QAAAA,qBADI;AAEJjG,QAAAA,WAFI;AAGJD,QAAAA,cAHI;AAIJE,QAAAA,UAJI;AAKJiG,QAAAA,oBALI;AAMJC,QAAAA;AANI,UAOF,KAAK7G,KAPT;AASA,UAAM0E,QAAQ,GAAGjE,cAAc,KAAK,MAApC;AACA,UAAMqG,WAAW,GAAGnG,UAAU,KAAK,MAAnC;AACA,UAAMoG,cAAc,GAAGpG,UAAU,KAAK,OAAtC;AAMA,UAAMqG,uBAAuB,GAAGC,WAAW,CAACC,KAAZ,GAAoBxC,QAApB,GAA+B,CAACA,QAAhE;AAEA,UAAMyC,mBAAmB,GAAG;AAC1Bb,QAAAA,eAAe,EAAEK,qBADS;AAE1BnE,QAAAA,KAAK,EAAE9B;AAFmB,OAA5B;AAIA,UAAM0G,SAAS,GAAG,KAAKvF,UAAvB;AACAvC,MAAAA,SAAS,CAAC8H,SAAD,EAAY,eAAZ,CAAT;AAEA,UAAIC,eAAJ;;AACA,UAAIN,cAAJ,EAAoB;AAClB,YAAMO,mBAAmB,GAAGF,SAAS,CAAC1F,WAAV,CAAsB;AAChDC,UAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADoC;AAEhDC,UAAAA,WAAW,EAAE8C,QAAQ,GAAG,CAAC,CAAD,EAAIhE,WAAJ,CAAH,GAAsB,CAAC,CAAD,EAAI,CAACA,WAAL,CAFK;AAGhDoB,UAAAA,WAAW,EAAE;AAHmC,SAAtB,CAA5B;AAKAuF,QAAAA,eAAe,GAAG;AAChBE,UAAAA,SAAS,EAAE,CAAC;AAAEC,YAAAA,UAAU,EAAEF;AAAd,WAAD;AADK,SAAlB;AAGD;;AAED,UAAIG,gBAAgB,GAAG,CAAvB;;AACA,UAAIX,WAAJ,EAAiB;AACf,YAAMY,kBAAkB,GAAGhD,QAAQ,GAAG,CAAChE,WAAJ,GAAkBA,WAArD;AACA+G,QAAAA,gBAAgB,GAAGL,SAAS,CAAC1F,WAAV,CAAsB;AACvCC,UAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CAD2B;AAEvCC,UAAAA,WAAW,EAAE,CAAC8F,kBAAD,EAAqB,CAArB,CAF0B;AAGvC5F,UAAAA,WAAW,EAAE;AAH0B,SAAtB,CAAnB;AAKD;;AACD,UAAM6F,YAAY,GAAG;AACnBJ,QAAAA,SAAS,EAAE,CAAC;AAAEC,UAAAA,UAAU,EAAEC;AAAd,SAAD,CADQ;AAEnBG,QAAAA,aAAa,EAAEZ,uBAAuB,GAAG,aAAH,GAAmB;AAFtC,OAArB;AAKA,aACE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,KAAK,EAAER,MAAM,CAACqB,IAA7B;AAAmC,QAAA,QAAQ,EAAE,KAAKxF,sBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD,CAAU,IAAV;AACE,QAAA,KAAK,EAAE,CACL1B,UAAU,KAAK,OAAf,GACI6F,MAAM,CAACsB,eADX,GAEItB,MAAM,CAACuB,gBAHN,EAILV,eAJK,EAKLR,qBALK,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQG,OAAO,KAAK7G,KAAL,CAAWgI,QAAlB,KAA+B,UAA/B,GACG,KAAKhI,KAAL,CAAWgI,QAAX,CAAoB,KAAKnG,UAAzB,CADH,GAEG,KAAK7B,KAAL,CAAWgI,QAVjB,EAWG,KAAK9B,cAAL,EAXH,CADF,EAcE,oBAAC,QAAD,CAAU,IAAV;AACE,QAAA,aAAa,EAAC,UADhB;AAEE,QAAA,GAAG,EAAE,KAAKhG,yBAFZ;AAGE,QAAA,wBAAwB,EAAE,KAAKI,YAHjC;AAIE,QAAA,KAAK,EAAE,CAACkG,MAAM,CAACyB,eAAR,EAAyBN,YAAzB,EAAuCf,oBAAvC,CAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEO,mBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKnH,KAAL,CAAWkI,oBAAX,CAAgC,KAAKrG,UAArC,CADH,CALF,CAdF,CADF;AA0BD,KAtX0C;;AAAA,SAwX3CsG,iBAxX2C,GAwXvBC,GAAG,IAAI;AACzB,WAAK/H,kBAAL,CAAwB+D,OAAxB,GAAkCgE,GAAlC;AACA,WAAKpI,KAAL,CAAWqI,YAAX,IAA2B,KAAKrI,KAAL,CAAWqI,YAAX,CAAwBD,GAAxB,CAA3B;AACD,KA3X0C;;AAGzC,QAAMxH,MAAK,GAAG,IAAIM,QAAQ,CAACE,KAAb,CAAmB,CAAnB,CAAd;;AACA,QAAMN,OAAM,GAAG,IAAII,QAAQ,CAACE,KAAb,CAAmB,CAAnB,CAAf;;AACA,QAAMJ,kBAAiB,GAAG,IAAIE,QAAQ,CAACE,KAAb,CAAmB,CAAnB,CAA1B;;AAEA,SAAKZ,KAAL,GAAa;AACXI,MAAAA,KAAK,EAALA,MADW;AAEXE,MAAAA,MAAM,EAANA,OAFW;AAGXE,MAAAA,iBAAiB,EAAjBA,kBAHW;AAIXC,MAAAA,cAAc,EAAE;AAJL,KAAb;;AAOA,SAAKV,oBAAL,CAA0BP,MAA1B,EAAiC,KAAKQ,KAAtC;AACD;;AAED8H,EAAAA,mBAAmB,CAACtI,KAAD,EAAkBQ,KAAlB,EAAoC;AACrD,QACE,KAAKR,KAAL,CAAWS,cAAX,KAA8BT,KAAK,CAACS,cAApC,IACA,KAAKT,KAAL,CAAWU,WAAX,KAA2BV,KAAK,CAACU,WADjC,IAEA,KAAKV,KAAL,CAAWW,UAAX,KAA0BX,KAAK,CAACW,UAFhC,IAGA,KAAKH,KAAL,CAAWS,cAAX,KAA8BT,KAAK,CAACS,cAJtC,EAKE;AACA,WAAKV,oBAAL,CAA0BP,KAA1B,EAAiCQ,KAAjC;AACD;AACF;;AAmWD+H,EAAAA,MAAM,GAAG;AACP,QAAM;AACJ9H,MAAAA,cADI;AAEJgD,MAAAA,cAFI;AAGJgB,MAAAA,SAHI;AAIJD,MAAAA;AAJI,QAKF,KAAKxE,KALT;AAOA,QAAM0E,QAAQ,GAAGjE,cAAc,KAAK,MAApC;AAKA,QAAMkE,kBAAkB,GACtB,CAACD,QAAQ,GAAG,CAAH,GAAO,CAAC,CAAjB,KAAuB,KAAKpE,YAAL,GAAoB,CAAC,CAArB,GAAyB,CAAhD,CADF;AAMA,QAAMsE,OAAO,GAAGF,QAAQ,GACpB;AAAEG,MAAAA,IAAI,EAAE,CAAR;AAAWrC,MAAAA,KAAK,EAAE,KAAKlC,YAAL,GAAoBwE,SAApB,GAAgCL;AAAlD,KADoB,GAEpB;AAAEM,MAAAA,KAAK,EAAE,CAAT;AAAYvC,MAAAA,KAAK,EAAE,KAAKlC,YAAL,GAAoBwE,SAApB,GAAgCL;AAAnD,KAFJ;AAIA,WACE,oBAAC,iBAAD;AACE,MAAA,GAAG,EAAE,KAAK0D,iBADZ;AAEE,MAAA,OAAO,EAAEvD,OAFX;AAGE,MAAA,aAAa,EAAED,kBAAkB,GAAGH,gBAHtC;AAIE,MAAA,WAAW,EAAE,CAAC,CAAC,EAAF,EAAM,EAAN,CAJf;AAKE,MAAA,cAAc,EAAE,KAAKzC,eALvB;AAME,MAAA,oBAAoB,EAAE,KAAKc,0BAN7B;AAOE,MAAA,OAAO,EACLY,cAAc,KAAK,eAAnB,IAAsCA,cAAc,KAAK,aAR7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAUG,KAAKiD,aAAL,EAVH,CADF;AAcD;;AAzbsE;AAApD5G,Y,CACZ0I,Y,GAAe;AACpB9H,EAAAA,WAAW,EAAE,GADO;AAEpBD,EAAAA,cAAc,EAAE,MAFI;AAGpB2B,EAAAA,mBAAmB,EAAE,IAHD;AAIpBzB,EAAAA,UAAU,EAAE,OAJQ;AAKpB8D,EAAAA,SAAS,EAAE,EALS;AAMpBD,EAAAA,gBAAgB,EAAE,CANE;AAOpB+B,EAAAA,YAAY,EAAE,OAPM;AAQpB9C,EAAAA,cAAc,EAAE;AARI,C;AADH3D,Y,CAYZ2I,S,GAAY;AACjBC,EAAAA,IAAI,EAAE,MADW;AAEjBC,EAAAA,KAAK,EAAE;AAFU,C;AAgbrB,IAAMnC,MAAM,GAAGoC,UAAU,CAACC,MAAX,CAAkB;AAC/BZ,EAAAA,eAAe,oBACVW,UAAU,CAACE,kBADD;AAEbC,IAAAA,MAAM,EAAE,IAFK;AAGbnB,IAAAA,aAAa,EAAE;AAHF,IADgB;AAM/BG,EAAAA,gBAAgB,oBACXa,UAAU,CAACE,kBADA;AAEdC,IAAAA,MAAM,EAAE;AAFM,IANe;AAU/BjB,EAAAA,eAAe,oBACVc,UAAU,CAACE,kBADD,CAVgB;AAa/BjB,EAAAA,IAAI,EAAE;AACJmB,IAAAA,IAAI,EAAE,CADF;AAEJD,IAAAA,MAAM,EAAE,CAFJ;AAGJE,IAAAA,QAAQ,EAAE;AAHN,GAbyB;AAkB/BxC,EAAAA,OAAO,oBACFmC,UAAU,CAACE,kBADT;AAELC,IAAAA,MAAM,EAAE;AAFH;AAlBwB,CAAlB,CAAf","sourcesContent":["// @flow\n\n// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies\n// on react-native-gesture-handler library which isn't very popular at the\n// moment I decided to keep it here for the time being. It will allow us\n// to move faster and fix issues that may arise in gesture handler library\n// that could be found when using the drawer component\n\nimport React, { Component } from 'react';\nimport invariant from 'invariant';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  Keyboard,\n  StatusBar,\n  I18nManager,\n} from 'react-native';\n\nimport { PanGestureHandler, TapGestureHandler, State } from './GestureHandler';\n\nconst DRAG_TOSS = 0.05;\n\nconst IDLE = 'Idle';\nconst DRAGGING = 'Dragging';\nconst SETTLING = 'Settling';\n\nexport type PropType = {\n  children: any,\n  drawerBackgroundColor?: string,\n  drawerPosition: 'left' | 'right',\n  drawerLockMode?: 'unlocked' | 'locked-closed' | 'locked-open',\n  drawerWidth: number,\n  keyboardDismissMode?: 'none' | 'on-drag',\n  onDrawerClose?: Function,\n  onDrawerOpen?: Function,\n  onDrawerStateChanged?: Function,\n  renderNavigationView: (progressAnimatedValue: any) => any,\n  useNativeAnimations: boolean,\n\n  // brand new properties\n  drawerType: 'front' | 'back' | 'slide',\n  edgeWidth: number,\n  minSwipeDistance: number,\n  hideStatusBar?: boolean,\n  statusBarAnimation?: 'slide' | 'none' | 'fade',\n  overlayColor: string,\n  drawerContainerStyle?: any,\n  contentContainerStyle?: any,\n  onGestureRef?: Function,\n\n  // Properties not yet supported\n  // onDrawerSlide?: Function\n};\n\nexport type StateType = {\n  dragX: any,\n  touchX: any,\n  drawerTranslation: any,\n  containerWidth: number,\n};\n\nexport type EventType = {\n  stopPropagation: Function,\n};\n\nexport type DrawerMovementOptionType = {\n  velocity?: number,\n};\n\nexport default class DrawerLayout extends Component<PropType, StateType> {\n  static defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'black',\n    drawerLockMode: 'unlocked',\n  };\n\n  static positions = {\n    Left: 'left',\n    Right: 'right',\n  };\n  _openValue: ?Animated.Interpolation;\n  _onGestureEvent: ?Animated.Event;\n  _accessibilityIsModalView = React.createRef();\n  _pointerEventsView = React.createRef();\n  _panGestureHandler = React.createRef();\n  _drawerShown = false;\n\n  constructor(props: PropType, context: any) {\n    super(props, context);\n\n    const dragX = new Animated.Value(0);\n    const touchX = new Animated.Value(0);\n    const drawerTranslation = new Animated.Value(0);\n\n    this.state = {\n      dragX,\n      touchX,\n      drawerTranslation,\n      containerWidth: 0,\n    };\n\n    this._updateAnimatedEvent(props, this.state);\n  }\n\n  componentWillUpdate(props: PropType, state: StateType) {\n    if (\n      this.props.drawerPosition !== props.drawerPosition ||\n      this.props.drawerWidth !== props.drawerWidth ||\n      this.props.drawerType !== props.drawerType ||\n      this.state.containerWidth !== state.containerWidth\n    ) {\n      this._updateAnimatedEvent(props, state);\n    }\n  }\n\n  _updateAnimatedEvent = (props: PropType, state: StateType) => {\n    // Event definition is based on\n    const { drawerPosition, drawerWidth, drawerType } = props;\n    const {\n      dragX: dragXValue,\n      touchX: touchXValue,\n      drawerTranslation,\n      containerWidth,\n    } = state;\n\n    let dragX = dragXValue;\n    let touchX = touchXValue;\n\n    if (drawerPosition !== 'left') {\n      // Most of the code is written in a way to handle left-side drawer.\n      // In order to handle right-side drawer the only thing we need to\n      // do is to reverse events coming from gesture handler in a way they\n      // emulate left-side drawer gestures. E.g. dragX is simply -dragX, and\n      // touchX is calulcated by subtracing real touchX from the width of the\n      // container (such that when touch happens at the right edge the value\n      // is simply 0)\n      dragX = Animated.multiply(new Animated.Value(-1), dragXValue);\n      touchX = Animated.add(\n        new Animated.Value(containerWidth),\n        Animated.multiply(new Animated.Value(-1), touchXValue)\n      );\n      touchXValue.setValue(containerWidth);\n    } else {\n      touchXValue.setValue(0);\n    }\n\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep start position\n    // of the gesture. Then we use that value to calculate how much we need to subtract from\n    // the dragX. If the gesture started on the greyed out area we take the distance from the\n    // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n    // drawer be pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    //\n    let translationX = dragX;\n    if (drawerType === 'front') {\n      const startPositionX = Animated.add(\n        touchX,\n        Animated.multiply(new Animated.Value(-1), dragX)\n      );\n\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n        inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n        outputRange: [0, 0, 1],\n      });\n      translationX = Animated.add(dragX, dragOffsetFromOnStartPosition);\n    }\n\n    this._openValue = Animated.add(translationX, drawerTranslation).interpolate(\n      {\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp',\n      }\n    );\n\n    this._onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragXValue, x: touchXValue } }],\n      { useNativeDriver: props.useNativeAnimations }\n    );\n  };\n\n  _handleContainerLayout = ({ nativeEvent }) => {\n    this.setState({ containerWidth: nativeEvent.layout.width });\n  };\n\n  _emitStateChanged = (newState: string, drawerWillShow: boolean) => {\n    this.props.onDrawerStateChanged &&\n      this.props.onDrawerStateChanged(newState, drawerWillShow);\n  };\n\n  _openingHandlerStateChange = ({ nativeEvent }) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this._handleRelease(nativeEvent);\n    } else if (nativeEvent.state === State.ACTIVE) {\n      this._emitStateChanged(DRAGGING, false);\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n      }\n    }\n  };\n\n  _onTapHandlerStateChange = ({ nativeEvent }) => {\n    if (\n      this._drawerShown &&\n      nativeEvent.oldState === State.ACTIVE &&\n      this.props.drawerLockMode !== 'locked-open'\n    ) {\n      this.closeDrawer();\n    }\n  };\n\n  _handleRelease = nativeEvent => {\n    const { drawerWidth, drawerPosition, drawerType } = this.props;\n    const { containerWidth } = this.state;\n    let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n\n    if (drawerPosition !== 'left') {\n      // See description in _updateAnimatedEvent about why events are flipped\n      // for right-side drawer\n      dragX = -dragX;\n      touchX = containerWidth - touchX;\n      velocityX = -velocityX;\n    }\n\n    const gestureStartX = touchX - dragX;\n    let dragOffsetBasedOnStart = 0;\n\n    if (drawerType === 'front') {\n      dragOffsetBasedOnStart =\n        gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n    }\n\n    const startOffsetX =\n      dragX + dragOffsetBasedOnStart + (this._drawerShown ? drawerWidth : 0);\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n\n    const shouldOpen = projOffsetX > drawerWidth / 2;\n\n    if (shouldOpen) {\n      this._animateDrawer(startOffsetX, drawerWidth, velocityX);\n    } else {\n      this._animateDrawer(startOffsetX, 0, velocityX);\n    }\n  };\n\n  _updateShowing = (showing: boolean) => {\n    this._drawerShown = showing;\n    this._accessibilityIsModalView.current &&\n      this._accessibilityIsModalView.current.setNativeProps({\n        accessibilityViewIsModal: showing,\n      });\n    this._pointerEventsView.current &&\n      this._pointerEventsView.current.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none',\n      });\n    const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\n    // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\n    // orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this._drawerShown ? -1 : 1);\n    // When drawer is closed we want the hitSlop to be horizontally shorter\n    // than the container size by the value of SLOP. This will make it only\n    // activate when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: showing ? undefined : edgeWidth }\n      : { right: 0, width: showing ? undefined : edgeWidth };\n    this._panGestureHandler.current &&\n      this._panGestureHandler.current.setNativeProps({\n        hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n      });\n  };\n\n  _animateDrawer = (fromValue: ?number, toValue: number, velocity: number) => {\n    this.state.dragX.setValue(0);\n    this.state.touchX.setValue(\n      this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth\n    );\n\n    if (fromValue !== undefined) {\n      let nextFramePosition = fromValue;\n      if (this.props.useNativeAnimations) {\n        // When using native driver, we predict the next position of the animation\n        // because it takes one frame of a roundtrip to pass RELEASE event from\n        // native driver to JS before we can start animating. Without it, it is more\n        // noticable that the frame is dropped.\n        if (fromValue < toValue && velocity > 0) {\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n        } else if (fromValue > toValue && velocity < 0) {\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n        }\n      }\n      this.state.drawerTranslation.setValue(nextFramePosition);\n    }\n\n    const willShow = toValue !== 0;\n    this._updateShowing(willShow);\n    this._emitStateChanged(SETTLING, willShow);\n    if (this.props.hideStatusBar) {\n      StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n    }\n    Animated.spring(this.state.drawerTranslation, {\n      velocity,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations,\n    }).start(({ finished }) => {\n      if (finished) {\n        this._emitStateChanged(IDLE, willShow);\n        if (willShow) {\n          this.props.onDrawerOpen && this.props.onDrawerOpen();\n        } else {\n          this.props.onDrawerClose && this.props.onDrawerClose();\n        }\n      }\n    });\n  };\n\n  openDrawer = (options: DrawerMovementOptionType = {}) => {\n    this._animateDrawer(\n      undefined,\n      this.props.drawerWidth,\n      options.velocity ? options.velocity : 0\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and it would not be clickable\n    this.forceUpdate();\n  };\n\n  closeDrawer = (options: DrawerMovementOptionType = {}) => {\n    this._animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\n\n    // We need to force the update, otherwise the overlay is not rerendered and it would be still clickable\n    this.forceUpdate();\n  };\n\n  _renderOverlay = () => {\n    /* Overlay styles */\n    invariant(this._openValue, 'should be set');\n    const overlayOpacity = this._openValue.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 0.7],\n      extrapolate: 'clamp',\n    });\n    const dynamicOverlayStyles = {\n      opacity: overlayOpacity,\n      backgroundColor: this.props.overlayColor,\n    };\n\n    return (\n      <TapGestureHandler onHandlerStateChange={this._onTapHandlerStateChange}>\n        <Animated.View\n          pointerEvents={this._drawerShown ? 'auto' : 'none'}\n          ref={this._pointerEventsView}\n          style={[styles.overlay, dynamicOverlayStyles]}\n        />\n      </TapGestureHandler>\n    );\n  };\n\n  _renderDrawer = () => {\n    const {\n      drawerBackgroundColor,\n      drawerWidth,\n      drawerPosition,\n      drawerType,\n      drawerContainerStyle,\n      contentContainerStyle,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n    const drawerSlide = drawerType !== 'back';\n    const containerSlide = drawerType !== 'front';\n\n    // we rely on row and row-reverse flex directions to position the drawer\n    // properly. Apparently for RTL these are flipped which requires us to use\n    // the opposite setting for the drawer to appear from left or right according\n    // to the drawerPosition prop\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n\n    const dynamicDrawerStyles = {\n      backgroundColor: drawerBackgroundColor,\n      width: drawerWidth,\n    };\n    const openValue = this._openValue;\n    invariant(openValue, 'should be set');\n\n    let containerStyles;\n    if (containerSlide) {\n      const containerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n        extrapolate: 'clamp',\n      });\n      containerStyles = {\n        transform: [{ translateX: containerTranslateX }],\n      };\n    }\n\n    let drawerTranslateX = 0;\n    if (drawerSlide) {\n      const closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n      drawerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [closedDrawerOffset, 0],\n        extrapolate: 'clamp',\n      });\n    }\n    const drawerStyles = {\n      transform: [{ translateX: drawerTranslateX }],\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n    };\n\n    return (\n      <Animated.View style={styles.main} onLayout={this._handleContainerLayout}>\n        <Animated.View\n          style={[\n            drawerType === 'front'\n              ? styles.containerOnBack\n              : styles.containerInFront,\n            containerStyles,\n            contentContainerStyle,\n          ]}>\n          {typeof this.props.children === 'function'\n            ? this.props.children(this._openValue)\n            : this.props.children}\n          {this._renderOverlay()}\n        </Animated.View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          ref={this._accessibilityIsModalView}\n          accessibilityViewIsModal={this._drawerShown}\n          style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\n          <View style={dynamicDrawerStyles}>\n            {this.props.renderNavigationView(this._openValue)}\n          </View>\n        </Animated.View>\n      </Animated.View>\n    );\n  };\n\n  _setPanGestureRef = ref => {\n    this._panGestureHandler.current = ref;\n    this.props.onGestureRef && this.props.onGestureRef(ref);\n  };\n\n  render() {\n    const {\n      drawerPosition,\n      drawerLockMode,\n      edgeWidth,\n      minSwipeDistance,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n\n    // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\n    // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\n    // orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this._drawerShown ? -1 : 1);\n\n    // When drawer is closed we want the hitSlop to be horizontally shorter\n    // than the container size by the value of SLOP. This will make it only\n    // activate when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: this._drawerShown ? undefined : edgeWidth }\n      : { right: 0, width: this._drawerShown ? undefined : edgeWidth };\n\n    return (\n      <PanGestureHandler\n        ref={this._setPanGestureRef}\n        hitSlop={hitSlop}\n        activeOffsetX={gestureOrientation * minSwipeDistance}\n        failOffsetY={[-15, 15]}\n        onGestureEvent={this._onGestureEvent}\n        onHandlerStateChange={this._openingHandlerStateChange}\n        enabled={\n          drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n        }>\n        {this._renderDrawer()}\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row',\n  },\n  containerInFront: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1002,\n  },\n  containerOnBack: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1000,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}