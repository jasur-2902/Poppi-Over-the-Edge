{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport invariant from 'invariant';\nimport { Platform } from 'expo-core';\nimport LocalAuthentication from \"./ExpoLocalAuthentication\";\nexport var AuthenticationType = {\n  FINGERPRINT: 1,\n  FACIAL_RECOGNITION: 2\n};\nexport function hasHardwareAsync() {\n  return _hasHardwareAsync.apply(this, arguments);\n}\n\nfunction _hasHardwareAsync() {\n  _hasHardwareAsync = _asyncToGenerator(function* () {\n    return yield LocalAuthentication.hasHardwareAsync();\n  });\n  return _hasHardwareAsync.apply(this, arguments);\n}\n\nexport function supportedAuthenticationTypesAsync() {\n  return _supportedAuthenticationTypesAsync.apply(this, arguments);\n}\n\nfunction _supportedAuthenticationTypesAsync() {\n  _supportedAuthenticationTypesAsync = _asyncToGenerator(function* () {\n    return yield LocalAuthentication.supportedAuthenticationTypesAsync();\n  });\n  return _supportedAuthenticationTypesAsync.apply(this, arguments);\n}\n\nexport function isEnrolledAsync() {\n  return _isEnrolledAsync.apply(this, arguments);\n}\n\nfunction _isEnrolledAsync() {\n  _isEnrolledAsync = _asyncToGenerator(function* () {\n    return yield LocalAuthentication.isEnrolledAsync();\n  });\n  return _isEnrolledAsync.apply(this, arguments);\n}\n\nexport function authenticateAsync() {\n  return _authenticateAsync.apply(this, arguments);\n}\n\nfunction _authenticateAsync() {\n  _authenticateAsync = _asyncToGenerator(function* () {\n    var promptMessageIOS = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Authenticate';\n\n    if (Platform.OS === 'ios') {\n      invariant(typeof promptMessageIOS === 'string' && promptMessageIOS.length, 'Fingerprint.authenticateAsync must be called with a non-empty string on iOS');\n      var result = yield LocalAuthentication.authenticateAsync(promptMessageIOS);\n\n      if (result.warning) {\n        console.warn(result.warning);\n      }\n\n      return result;\n    } else {\n      return yield LocalAuthentication.authenticateAsync();\n    }\n  });\n  return _authenticateAsync.apply(this, arguments);\n}\n\nexport function cancelAuthenticate() {\n  return _cancelAuthenticate.apply(this, arguments);\n}\n\nfunction _cancelAuthenticate() {\n  _cancelAuthenticate = _asyncToGenerator(function* () {\n    if (!LocalAuthentication.cancelAuthenticate) {\n      throw new Error(\"LocalAuthentication.cancelAuthenticate is not supported on \".concat(Platform.OS));\n    }\n\n    return yield LocalAuthentication.cancelAuthenticate();\n  });\n  return _cancelAuthenticate.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/expo-local-authentication/src/LocalAuthentication.js"],"names":["invariant","Platform","LocalAuthentication","AuthenticationType","FINGERPRINT","FACIAL_RECOGNITION","hasHardwareAsync","supportedAuthenticationTypesAsync","isEnrolledAsync","authenticateAsync","promptMessageIOS","OS","length","result","warning","console","warn","cancelAuthenticate","Error"],"mappings":";;;;AACA,OAAOA,SAAP,MAAsB,WAAtB;AACA,SAASC,QAAT,QAAyB,WAAzB;AAEA,OAAOC,mBAAP;AAIA,OAAO,IAAMC,kBAAkB,GAAG;AAChCC,EAAAA,WAAW,EAAE,CADmB;AAEhCC,EAAAA,kBAAkB,EAAE;AAFY,CAA3B;AAOP,gBAAsBC,gBAAtB;AAAA;AAAA;;;wCAAO,aAAoD;AACzD,iBAAaJ,mBAAmB,CAACI,gBAApB,EAAb;AACD,G;;;;AAED,gBAAsBC,iCAAtB;AAAA;AAAA;;;yDAAO,aAA2F;AAChG,iBAAaL,mBAAmB,CAACK,iCAApB,EAAb;AACD,G;;;;AAED,gBAAsBC,eAAtB;AAAA;AAAA;;;uCAAO,aAAmD;AACxD,iBAAaN,mBAAmB,CAACM,eAApB,EAAb;AACD,G;;;;AAED,gBAAsBC,iBAAtB;AAAA;AAAA;;;yCAAO,aAE+B;AAAA,QADpCC,gBACoC,uEADR,cACQ;;AACpC,QAAIT,QAAQ,CAACU,EAAT,KAAgB,KAApB,EAA2B;AACzBX,MAAAA,SAAS,CACP,OAAOU,gBAAP,KAA4B,QAA5B,IAAwCA,gBAAgB,CAACE,MADlD,EAEP,6EAFO,CAAT;AAKA,UAAMC,MAAM,SAASX,mBAAmB,CAACO,iBAApB,CAAsCC,gBAAtC,CAArB;;AAEA,UAAIG,MAAM,CAACC,OAAX,EAAoB;AAClBC,QAAAA,OAAO,CAACC,IAAR,CAAaH,MAAM,CAACC,OAApB;AACD;;AACD,aAAOD,MAAP;AACD,KAZD,MAYO;AACL,mBAAaX,mBAAmB,CAACO,iBAApB,EAAb;AACD;AACF,G;;;;AAED,gBAAsBQ,kBAAtB;AAAA;AAAA;;;0CAAO,aAAmD;AACxD,QAAI,CAACf,mBAAmB,CAACe,kBAAzB,EAA6C;AAC3C,YAAM,IAAIC,KAAJ,sEAAwEjB,QAAQ,CAACU,EAAjF,EAAN;AACD;;AACD,iBAAaT,mBAAmB,CAACe,kBAApB,EAAb;AACD,G","sourcesContent":["// @flow\nimport invariant from 'invariant';\nimport { Platform } from 'expo-core';\n\nimport LocalAuthentication from './ExpoLocalAuthentication';\n\ntype LocalAuthenticationResult = { success: true } | { success: false, error: string };\n\nexport const AuthenticationType = {\n  FINGERPRINT: 1,\n  FACIAL_RECOGNITION: 2,\n};\n\ntype AuthenticationTypeType = $Keys<typeof AuthenticationType>;\n\nexport async function hasHardwareAsync(): Promise<boolean> {\n  return await LocalAuthentication.hasHardwareAsync();\n}\n\nexport async function supportedAuthenticationTypesAsync(): Promise<Array<AuthenticationTypeType>> {\n  return await LocalAuthentication.supportedAuthenticationTypesAsync();\n}\n\nexport async function isEnrolledAsync(): Promise<boolean> {\n  return await LocalAuthentication.isEnrolledAsync();\n}\n\nexport async function authenticateAsync(\n  promptMessageIOS?: string = 'Authenticate'\n): Promise<LocalAuthenticationResult> {\n  if (Platform.OS === 'ios') {\n    invariant(\n      typeof promptMessageIOS === 'string' && promptMessageIOS.length,\n      'Fingerprint.authenticateAsync must be called with a non-empty string on iOS'\n    );\n\n    const result = await LocalAuthentication.authenticateAsync(promptMessageIOS);\n\n    if (result.warning) {\n      console.warn(result.warning);\n    }\n    return result;\n  } else {\n    return await LocalAuthentication.authenticateAsync();\n  }\n}\n\nexport async function cancelAuthenticate(): Promise<void> {\n  if (!LocalAuthentication.cancelAuthenticate) {\n    throw new Error(`LocalAuthentication.cancelAuthenticate is not supported on ${Platform.OS}`);\n  }\n  return await LocalAuthentication.cancelAuthenticate();\n}\n"]},"metadata":{},"sourceType":"module"}