{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nexport default function symbolicateStackTrace() {\n  return _symbolicateStackTrace.apply(this, arguments);\n}\n\nfunction _symbolicateStackTrace() {\n  _symbolicateStackTrace = _asyncToGenerator(function* () {\n    return null;\n  });\n  return _symbolicateStackTrace.apply(this, arguments);\n}","map":{"version":3,"sources":["../../src/logs/symbolicateStackTrace.web.ts"],"names":[],"mappings":";;;;AAEA,wBAA8B,qBAA9B;AAAA;AAAA;;;6CAAe,aAAoC;AACjD,WAAO,IAAP;AACD,G","sourcesContent":["import { StackFrame } from 'react-native/Libraries/Core/Devtools/parseErrorStack';\n\nexport default async function symbolicateStackTrace(): Promise<StackFrame[] | null> {\n  return null;\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}