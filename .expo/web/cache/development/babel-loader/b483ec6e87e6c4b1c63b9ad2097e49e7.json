{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jshukurov\\\\Desktop\\\\Poppi Over The Edge\\\\Poppi-Over-the-Edge-master\\\\node_modules\\\\react-native-maps\\\\lib\\\\components\\\\MapCircle.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ColorPropType from \"react-native-web/dist/exports/ColorPropType\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport View from \"react-native-web/dist/exports/View\";\nimport decorateMapComponent, { USES_DEFAULT_IMPLEMENTATION, SUPPORTED } from \"./decorateMapComponent\";\nvar viewPropTypes = ViewPropTypes || View.propTypes;\n\nvar propTypes = _objectSpread(_objectSpread({}, viewPropTypes), {}, {\n  center: PropTypes.shape({\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired\n  }).isRequired,\n  radius: PropTypes.number.isRequired,\n  onPress: PropTypes.func,\n  strokeWidth: PropTypes.number,\n  strokeColor: ColorPropType,\n  fillColor: ColorPropType,\n  zIndex: PropTypes.number,\n  lineCap: PropTypes.oneOf(['butt', 'round', 'square']),\n  lineJoin: PropTypes.oneOf(['miter', 'round', 'bevel']),\n  miterLimit: PropTypes.number,\n  lineDashPhase: PropTypes.number,\n  lineDashPattern: PropTypes.arrayOf(PropTypes.number)\n});\n\nvar defaultProps = {\n  strokeColor: '#000',\n  strokeWidth: 1\n};\n\nclass MapCircle extends React.Component {\n  setNativeProps(props) {\n    this.circle.setNativeProps(props);\n  }\n\n  render() {\n    var AIRMapCircle = this.getAirComponent();\n    return React.createElement(AIRMapCircle, _extends({}, this.props, {\n      ref: _ref => {\n        this.circle = _ref;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\nMapCircle.propTypes = propTypes;\nMapCircle.defaultProps = defaultProps;\nexport default decorateMapComponent(MapCircle, {\n  componentType: 'Circle',\n  providers: {\n    google: {\n      ios: SUPPORTED,\n      android: USES_DEFAULT_IMPLEMENTATION\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/react-native-maps/lib/components/MapCircle.js"],"names":["PropTypes","React","decorateMapComponent","USES_DEFAULT_IMPLEMENTATION","SUPPORTED","viewPropTypes","ViewPropTypes","View","propTypes","center","shape","latitude","number","isRequired","longitude","radius","onPress","func","strokeWidth","strokeColor","ColorPropType","fillColor","zIndex","lineCap","oneOf","lineJoin","miterLimit","lineDashPhase","lineDashPattern","arrayOf","defaultProps","MapCircle","Component","setNativeProps","props","circle","render","AIRMapCircle","getAirComponent","ref","componentType","providers","google","ios","android"],"mappings":";;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAMA,OAAOC,oBAAP,IACEC,2BADF,EAEEC,SAFF;AAMA,IAAMC,aAAa,GAAGC,aAAa,IAAIC,IAAI,CAACC,SAA5C;;AAEA,IAAMA,SAAS,mCACVH,aADU;AAMbI,EAAAA,MAAM,EAAET,SAAS,CAACU,KAAV,CAAgB;AAItBC,IAAAA,QAAQ,EAAEX,SAAS,CAACY,MAAV,CAAiBC,UAJL;AAKtBC,IAAAA,SAAS,EAAEd,SAAS,CAACY,MAAV,CAAiBC;AALN,GAAhB,EAMLA,UAZU;AAiBbE,EAAAA,MAAM,EAAEf,SAAS,CAACY,MAAV,CAAiBC,UAjBZ;AAsBbG,EAAAA,OAAO,EAAEhB,SAAS,CAACiB,IAtBN;AA2BbC,EAAAA,WAAW,EAAElB,SAAS,CAACY,MA3BV;AAgCbO,EAAAA,WAAW,EAAEC,aAhCA;AAqCbC,EAAAA,SAAS,EAAED,aArCE;AA8CbE,EAAAA,MAAM,EAAEtB,SAAS,CAACY,MA9CL;AAsDbW,EAAAA,OAAO,EAAEvB,SAAS,CAACwB,KAAV,CAAgB,CACvB,MADuB,EAEvB,OAFuB,EAGvB,QAHuB,CAAhB,CAtDI;AAkEbC,EAAAA,QAAQ,EAAEzB,SAAS,CAACwB,KAAV,CAAgB,CACxB,OADwB,EAExB,OAFwB,EAGxB,OAHwB,CAAhB,CAlEG;AAkFbE,EAAAA,UAAU,EAAE1B,SAAS,CAACY,MAlFT;AA+Fbe,EAAAA,aAAa,EAAE3B,SAAS,CAACY,MA/FZ;AA6GbgB,EAAAA,eAAe,EAAE5B,SAAS,CAAC6B,OAAV,CAAkB7B,SAAS,CAACY,MAA5B;AA7GJ,EAAf;;AAgHA,IAAMkB,YAAY,GAAG;AACnBX,EAAAA,WAAW,EAAE,MADM;AAEnBD,EAAAA,WAAW,EAAE;AAFM,CAArB;;AAKA,MAAMa,SAAN,SAAwB9B,KAAK,CAAC+B,SAA9B,CAAwC;AACtCC,EAAAA,cAAc,CAACC,KAAD,EAAQ;AACpB,SAAKC,MAAL,CAAYF,cAAZ,CAA2BC,KAA3B;AACD;;AAEDE,EAAAA,MAAM,GAAG;AACP,QAAMC,YAAY,GAAG,KAAKC,eAAL,EAArB;AACA,WACE,oBAAC,YAAD,eAAkB,KAAKJ,KAAvB;AAA8B,MAAA,GAAG,EAAEK,IAAG,IAAI;AAAE,aAAKJ,MAAL,GAAcI,IAAd;AAAoB,OAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF;AAGD;;AAVqC;;AAaxCR,SAAS,CAACvB,SAAV,GAAsBA,SAAtB;AACAuB,SAAS,CAACD,YAAV,GAAyBA,YAAzB;AAEA,eAAe5B,oBAAoB,CAAC6B,SAAD,EAAY;AAC7CS,EAAAA,aAAa,EAAE,QAD8B;AAE7CC,EAAAA,SAAS,EAAE;AACTC,IAAAA,MAAM,EAAE;AACNC,MAAAA,GAAG,EAAEvC,SADC;AAENwC,MAAAA,OAAO,EAAEzC;AAFH;AADC;AAFkC,CAAZ,CAAnC","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {\r\n  ColorPropType,\r\n  ViewPropTypes,\r\n  View,\r\n} from 'react-native';\r\nimport decorateMapComponent, {\r\n  USES_DEFAULT_IMPLEMENTATION,\r\n  SUPPORTED,\r\n} from './decorateMapComponent';\r\n\r\n// if ViewPropTypes is not defined fall back to View.propType (to support RN < 0.44)\r\nconst viewPropTypes = ViewPropTypes || View.propTypes;\r\n\r\nconst propTypes = {\r\n  ...viewPropTypes,\r\n\r\n  /**\r\n   * The coordinate of the center of the circle\r\n   */\r\n  center: PropTypes.shape({\r\n    /**\r\n     * Coordinates for the center of the circle.\r\n     */\r\n    latitude: PropTypes.number.isRequired,\r\n    longitude: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n\r\n  /**\r\n   * The radius of the circle to be drawn (in meters)\r\n   */\r\n  radius: PropTypes.number.isRequired,\r\n\r\n  /**\r\n   * Callback that is called when the user presses on the circle\r\n   */\r\n  onPress: PropTypes.func,\r\n\r\n  /**\r\n   * The stroke width to use for the path.\r\n   */\r\n  strokeWidth: PropTypes.number,\r\n\r\n  /**\r\n   * The stroke color to use for the path.\r\n   */\r\n  strokeColor: ColorPropType,\r\n\r\n  /**\r\n   * The fill color to use for the path.\r\n   */\r\n  fillColor: ColorPropType,\r\n\r\n  /**\r\n   * The order in which this tile overlay is drawn with respect to other overlays. An overlay\r\n   * with a larger z-index is drawn over overlays with smaller z-indices. The order of overlays\r\n   * with the same z-index is arbitrary. The default zIndex is 0.\r\n   *\r\n   * @platform android\r\n   */\r\n  zIndex: PropTypes.number,\r\n\r\n  /**\r\n   * The line cap style to apply to the open ends of the path.\r\n   * The default style is `round`.\r\n   *\r\n   * @platform ios\r\n   */\r\n  lineCap: PropTypes.oneOf([\r\n    'butt',\r\n    'round',\r\n    'square',\r\n  ]),\r\n\r\n  /**\r\n   * The line join style to apply to corners of the path.\r\n   * The default style is `round`.\r\n   *\r\n   * @platform ios\r\n   */\r\n  lineJoin: PropTypes.oneOf([\r\n    'miter',\r\n    'round',\r\n    'bevel',\r\n  ]),\r\n\r\n  /**\r\n   * The limiting value that helps avoid spikes at junctions between connected line segments.\r\n   * The miter limit helps you avoid spikes in paths that use the `miter` `lineJoin` style. If\r\n   * the ratio of the miter length—that is, the diagonal length of the miter join—to the line\r\n   * thickness exceeds the miter limit, the joint is converted to a bevel join. The default\r\n   * miter limit is 10, which results in the conversion of miters whose angle at the joint\r\n   * is less than 11 degrees.\r\n   *\r\n   * @platform ios\r\n   */\r\n  miterLimit: PropTypes.number,\r\n\r\n  /**\r\n   * The offset (in points) at which to start drawing the dash pattern.\r\n   *\r\n   * Use this property to start drawing a dashed line partway through a segment or gap. For\r\n   * example, a phase value of 6 for the patter 5-2-3-2 would cause drawing to begin in the\r\n   * middle of the first gap.\r\n   *\r\n   * The default value of this property is 0.\r\n   *\r\n   * @platform ios\r\n   */\r\n  lineDashPhase: PropTypes.number,\r\n\r\n  /**\r\n   * An array of numbers specifying the dash pattern to use for the path.\r\n   *\r\n   * The array contains one or more numbers that indicate the lengths (measured in points) of the\r\n   * line segments and gaps in the pattern. The values in the array alternate, starting with the\r\n   * first line segment length, followed by the first gap length, followed by the second line\r\n   * segment length, and so on.\r\n   *\r\n   * This property is set to `null` by default, which indicates no line dash pattern.\r\n   *\r\n   * @platform ios\r\n   */\r\n  lineDashPattern: PropTypes.arrayOf(PropTypes.number),\r\n};\r\n\r\nconst defaultProps = {\r\n  strokeColor: '#000',\r\n  strokeWidth: 1,\r\n};\r\n\r\nclass MapCircle extends React.Component {\r\n  setNativeProps(props) {\r\n    this.circle.setNativeProps(props);\r\n  }\r\n\r\n  render() {\r\n    const AIRMapCircle = this.getAirComponent();\r\n    return (\r\n      <AIRMapCircle {...this.props} ref={ref => { this.circle = ref; }} />\r\n    );\r\n  }\r\n}\r\n\r\nMapCircle.propTypes = propTypes;\r\nMapCircle.defaultProps = defaultProps;\r\n\r\nexport default decorateMapComponent(MapCircle, {\r\n  componentType: 'Circle',\r\n  providers: {\r\n    google: {\r\n      ios: SUPPORTED,\r\n      android: USES_DEFAULT_IMPLEMENTATION,\r\n    },\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}