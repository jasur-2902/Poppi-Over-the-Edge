{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Constants from 'expo-constants';\nimport qs from 'qs';\nimport Linking from \"./LinkingModule\";\nvar {\n  manifest\n} = Constants;\nvar USES_CUSTOM_SCHEME = Constants.appOwnership === 'standalone' && manifest.scheme;\nvar HOST_URI = manifest.hostUri;\n\nif (!HOST_URI && !USES_CUSTOM_SCHEME) {\n  HOST_URI = _removeScheme(Constants.linkingUri).replace(/\\/--($|\\/.*$)/, '');\n}\n\nvar IS_EXPO_HOSTED = HOST_URI && (/^(.*\\.)?(expo\\.io|exp\\.host|exp\\.direct|expo\\.test)(:.*)?(\\/.*)?$/.test(HOST_URI) || manifest.developer);\n\nfunction _removeScheme(url) {\n  return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n}\n\nfunction _removePort(url) {\n  return url.replace(/(?=([a-zA-Z0-9+.-]+:\\/\\/)?[^/]):\\d+/, '');\n}\n\nfunction _removeLeadingSlash(url) {\n  return url.replace(/^\\//, '');\n}\n\nfunction _removeTrailingSlash(url) {\n  return url.replace(/\\/$/, '');\n}\n\nfunction _removeTrailingSlashAndQueryString(url) {\n  return url.replace(/\\/?\\?.*$/, '');\n}\n\nfunction makeUrl() {\n  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var scheme = 'exp';\n\n  if (Constants.appOwnership === 'standalone') {\n    scheme = manifest.scheme || manifest.detach && manifest.detach.scheme;\n  }\n\n  if (!scheme) {\n    throw new Error('Cannot make a deep link into a standalone app with no custom scheme defined');\n  }\n\n  var hostUri = HOST_URI || '';\n\n  if (USES_CUSTOM_SCHEME && IS_EXPO_HOSTED) {\n    hostUri = '';\n  }\n\n  if (path) {\n    if (IS_EXPO_HOSTED && hostUri) {\n      path = \"/--/\".concat(_removeLeadingSlash(path));\n    }\n\n    if (!path.startsWith('/') && hostUri) {\n      path = \"/\".concat(path);\n    } else if (path.startsWith('/') && !hostUri) {\n      path = path.substr(1);\n    }\n  } else {\n    path = '';\n  }\n\n  var queryString = '';\n  var queryStringMatchResult = hostUri.match(/(.*)\\?(.+)/);\n\n  if (queryStringMatchResult) {\n    hostUri = queryStringMatchResult[1];\n    queryString = queryStringMatchResult[2];\n    var paramsFromHostUri = {};\n\n    try {\n      var parsedParams = qs.parse(queryString);\n\n      if (typeof parsedParams === 'object') {\n        paramsFromHostUri = parsedParams;\n      }\n    } catch (e) {}\n\n    queryParams = _objectSpread({}, queryParams, {}, paramsFromHostUri);\n  }\n\n  queryString = qs.stringify(queryParams);\n\n  if (queryString) {\n    queryString = \"?\".concat(queryString);\n  }\n\n  hostUri = _removeTrailingSlash(hostUri);\n  return encodeURI(\"\".concat(scheme, \"://\").concat(hostUri).concat(path).concat(queryString));\n}\n\nfunction parse(url) {\n  if (!url) {\n    throw new Error('parse cannot be called with a null value');\n  }\n\n  var decodedUrl = _removePort(decodeURI(url));\n\n  var path;\n  var queryParams = {};\n  var queryStringMatchResult = decodedUrl.match(/(.*)\\?(.+)/);\n\n  if (queryStringMatchResult) {\n    decodedUrl = queryStringMatchResult[1];\n    queryParams = qs.parse(queryStringMatchResult[2]);\n  }\n\n  var hostUri = HOST_URI || '';\n\n  var hostUriStripped = _removePort(_removeTrailingSlashAndQueryString(hostUri));\n\n  if (hostUriStripped && decodedUrl.indexOf(hostUriStripped) > -1) {\n    path = decodedUrl.substr(decodedUrl.indexOf(hostUriStripped) + hostUriStripped.length);\n  } else {\n    path = _removeScheme(decodedUrl);\n  }\n\n  path = _removeLeadingSlash(path);\n\n  if (IS_EXPO_HOSTED && !USES_CUSTOM_SCHEME && path.startsWith('--/')) {\n    path = path.substr(3);\n  } else if (path.indexOf('+') > -1) {\n    path = path.substr(path.indexOf('+') + 1);\n  }\n\n  return {\n    path,\n    queryParams\n  };\n}\n\nfunction parseInitialURLAsync() {\n  return _parseInitialURLAsync.apply(this, arguments);\n}\n\nfunction _parseInitialURLAsync() {\n  _parseInitialURLAsync = _asyncToGenerator(function* () {\n    var initialUrl = yield Linking.getInitialURL();\n\n    if (!initialUrl) {\n      return {\n        path: null,\n        queryParams: null\n      };\n    }\n\n    return parse(initialUrl);\n  });\n  return _parseInitialURLAsync.apply(this, arguments);\n}\n\nvar newLinking = new Linking.constructor();\nnewLinking.makeUrl = makeUrl;\nnewLinking.parse = parse;\nnewLinking.parseInitialURLAsync = parseInitialURLAsync;\nexport default newLinking;","map":{"version":3,"sources":["../../src/Linking/Linking.ts"],"names":[],"mappings":"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","sourcesContent":["import Constants from 'expo-constants';\nimport qs from 'qs';\n\nimport { ParsedURL } from './Linking.types';\nimport Linking from './LinkingModule';\n\nconst { manifest } = Constants;\n\nconst USES_CUSTOM_SCHEME = Constants.appOwnership === 'standalone' && manifest.scheme;\n\nlet HOST_URI = manifest.hostUri;\nif (!HOST_URI && !USES_CUSTOM_SCHEME) {\n  // we're probably not using up-to-date xdl, so just fake it for now\n  // we have to remove the /--/ on the end since this will be inserted again later\n  HOST_URI = _removeScheme(Constants.linkingUri).replace(/\\/--($|\\/.*$)/, '');\n}\nconst IS_EXPO_HOSTED =\n  HOST_URI &&\n  (/^(.*\\.)?(expo\\.io|exp\\.host|exp\\.direct|expo\\.test)(:.*)?(\\/.*)?$/.test(HOST_URI) ||\n    manifest.developer);\n\nfunction _removeScheme(url) {\n  return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n}\n\nfunction _removePort(url) {\n  return url.replace(/(?=([a-zA-Z0-9+.-]+:\\/\\/)?[^/]):\\d+/, '');\n}\n\nfunction _removeLeadingSlash(url) {\n  return url.replace(/^\\//, '');\n}\n\nfunction _removeTrailingSlash(url) {\n  return url.replace(/\\/$/, '');\n}\n\nfunction _removeTrailingSlashAndQueryString(url) {\n  return url.replace(/\\/?\\?.*$/, '');\n}\n\nfunction makeUrl(path: string = '', queryParams: Object = {}): string {\n  let scheme = 'exp';\n  if (Constants.appOwnership === 'standalone') {\n    scheme = manifest.scheme || (manifest.detach && manifest.detach.scheme);\n  }\n  if (!scheme) {\n    throw new Error('Cannot make a deep link into a standalone app with no custom scheme defined');\n  }\n\n  let hostUri = HOST_URI || '';\n  if (USES_CUSTOM_SCHEME && IS_EXPO_HOSTED) {\n    hostUri = '';\n  }\n\n  if (path) {\n    if (IS_EXPO_HOSTED && hostUri) {\n      path = `/--/${_removeLeadingSlash(path)}`;\n    }\n\n    if (!path.startsWith('/') && hostUri) {\n      path = `/${path}`;\n    } else if (path.startsWith('/') && !hostUri) {\n      path = path.substr(1);\n    }\n  } else {\n    path = '';\n  }\n\n  // merge user-provided query params with any that were already in the hostUri\n  // e.g. release-channel\n  let queryString = '';\n  let queryStringMatchResult = hostUri.match(/(.*)\\?(.+)/);\n  if (queryStringMatchResult) {\n    hostUri = queryStringMatchResult[1];\n    queryString = queryStringMatchResult[2];\n    let paramsFromHostUri = {};\n    try {\n      let parsedParams = qs.parse(queryString);\n      if (typeof parsedParams === 'object') {\n        paramsFromHostUri = parsedParams;\n      }\n    } catch (e) {}\n    queryParams = {\n      ...queryParams,\n      ...paramsFromHostUri,\n    };\n  }\n  queryString = qs.stringify(queryParams);\n  if (queryString) {\n    queryString = `?${queryString}`;\n  }\n\n  hostUri = _removeTrailingSlash(hostUri);\n\n  return encodeURI(`${scheme}://${hostUri}${path}${queryString}`);\n}\n\nfunction parse(url: string): ParsedURL {\n  if (!url) {\n    throw new Error('parse cannot be called with a null value');\n  }\n  // iOS client sometimes strips out the port from the initial URL\n  // even when it's included in the hostUri.\n  // This function should be able to handle both cases, so we strip off the port\n  // both here and from the hostUri.\n  let decodedUrl = _removePort(decodeURI(url));\n  let path: string;\n  let queryParams = {};\n\n  let queryStringMatchResult = decodedUrl.match(/(.*)\\?(.+)/);\n  if (queryStringMatchResult) {\n    decodedUrl = queryStringMatchResult[1];\n    queryParams = qs.parse(queryStringMatchResult[2]);\n  }\n\n  // strip off the hostUri from the host and path\n  let hostUri = HOST_URI || '';\n  let hostUriStripped = _removePort(_removeTrailingSlashAndQueryString(hostUri));\n  if (hostUriStripped && decodedUrl.indexOf(hostUriStripped) > -1) {\n    path = decodedUrl.substr(decodedUrl.indexOf(hostUriStripped) + hostUriStripped.length);\n  } else {\n    path = _removeScheme(decodedUrl);\n  }\n\n  path = _removeLeadingSlash(path);\n\n  if (IS_EXPO_HOSTED && !USES_CUSTOM_SCHEME && path.startsWith('--/')) {\n    path = path.substr(3);\n  } else if (path.indexOf('+') > -1) {\n    path = path.substr(path.indexOf('+') + 1);\n  }\n\n  return { path, queryParams };\n}\n\nasync function parseInitialURLAsync(): Promise<ParsedURL> {\n  const initialUrl = await Linking.getInitialURL();\n  if (!initialUrl) {\n    return {\n      path: null,\n      queryParams: null,\n    };\n  }\n\n  return parse(initialUrl);\n}\n\n// @ts-ignore fix this...\nlet newLinking = new Linking.constructor();\n\nnewLinking.makeUrl = makeUrl;\nnewLinking.parse = parse;\nnewLinking.parseInitialURLAsync = parseInitialURLAsync;\n\nexport default newLinking;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}