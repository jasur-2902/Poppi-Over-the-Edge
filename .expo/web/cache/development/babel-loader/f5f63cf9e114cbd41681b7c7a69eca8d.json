{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport color from 'color';\nimport renderNode from \"./renderNode\";\nimport getIconType from \"./getIconType\";\nimport normalizeText from \"./normalizeText\";\nimport nodeType from \"./nodeType\";\nimport { ImageSourceType } from \"./types\";\nvar Screen = Dimensions.get('window');\nvar ScreenWidth = Screen.width;\nvar ScreenHeight = Screen.height;\nvar isIOS = Platform.OS === 'ios';\n\nvar conditionalStyle = (condition, style) => condition ? style : {};\n\nexport var patchWebProps = (_ref) => {\n  var {\n    updateTheme,\n    replaceTheme,\n    onClear\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"updateTheme\", \"replaceTheme\", \"onClear\"]);\n\n  return rest;\n};\nexport { renderNode, getIconType, normalizeText, nodeType, ScreenWidth, ScreenHeight, isIOS, conditionalStyle, color, ImageSourceType };","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/react-native-elements/src/helpers/index.js"],"names":["color","renderNode","getIconType","normalizeText","nodeType","ImageSourceType","Screen","Dimensions","get","ScreenWidth","width","ScreenHeight","height","isIOS","Platform","OS","conditionalStyle","condition","style","patchWebProps","updateTheme","replaceTheme","onClear","rest"],"mappings":";;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP;AACA,OAAOC,WAAP;AACA,OAAOC,aAAP;AACA,OAAOC,QAAP;AACA,SAASC,eAAT;AAEA,IAAMC,MAAM,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,CAAf;AACA,IAAMC,WAAW,GAAGH,MAAM,CAACI,KAA3B;AACA,IAAMC,YAAY,GAAGL,MAAM,CAACM,MAA5B;AACA,IAAMC,KAAK,GAAGC,QAAQ,CAACC,EAAT,KAAgB,KAA9B;;AAEA,IAAMC,gBAAgB,GAAG,CAACC,SAAD,EAAYC,KAAZ,KAAuBD,SAAS,GAAGC,KAAH,GAAW,EAApE;;AAEA,OAAO,IAAMC,aAAa,GAAG,UAKvB;AAAA,MALwB;AAC5BC,IAAAA,WAD4B;AAE5BC,IAAAA,YAF4B;AAG5BC,IAAAA;AAH4B,GAKxB;AAAA,MADDC,IACC;;AACJ,SAAOA,IAAP;AACD,CAPM;AASP,SACEtB,UADF,EAEEC,WAFF,EAGEC,aAHF,EAIEC,QAJF,EAKEK,WALF,EAMEE,YANF,EAOEE,KAPF,EAQEG,gBARF,EASEhB,KATF,EAUEK,eAVF","sourcesContent":["import { Platform, Dimensions } from 'react-native';\nimport color from 'color';\nimport renderNode from './renderNode';\nimport getIconType from './getIconType';\nimport normalizeText from './normalizeText';\nimport nodeType from './nodeType';\nimport { ImageSourceType } from './types';\n\nconst Screen = Dimensions.get('window');\nconst ScreenWidth = Screen.width;\nconst ScreenHeight = Screen.height;\nconst isIOS = Platform.OS === 'ios';\n\nconst conditionalStyle = (condition, style) => (condition ? style : {});\n\nexport const patchWebProps = ({\n  updateTheme,\n  replaceTheme,\n  onClear,\n  ...rest\n}) => {\n  return rest;\n};\n\nexport {\n  renderNode,\n  getIconType,\n  normalizeText,\n  nodeType,\n  ScreenWidth,\n  ScreenHeight,\n  isIOS,\n  conditionalStyle,\n  color,\n  ImageSourceType,\n};\n"]},"metadata":{},"sourceType":"module"}