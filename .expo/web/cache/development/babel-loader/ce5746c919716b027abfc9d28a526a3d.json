{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport ExponentAV from \"./ExponentAV\";\nexport * from \"./Audio/Recording\";\nexport * from \"./Audio/Sound\";\nexport { setIsEnabledAsync } from \"./Audio/AudioAvailability\";\nexport { PitchCorrectionQuality } from \"./AV\";\nexport var INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS = 0;\nexport var INTERRUPTION_MODE_IOS_DO_NOT_MIX = 1;\nexport var INTERRUPTION_MODE_IOS_DUCK_OTHERS = 2;\nexport var INTERRUPTION_MODE_ANDROID_DO_NOT_MIX = 1;\nexport var INTERRUPTION_MODE_ANDROID_DUCK_OTHERS = 2;\n\nvar _isValueValid = (value, validValues) => {\n  return validValues.filter(validValue => validValue === value).length > 0;\n};\n\nvar _findMissingKeys = (object, requiredKeys) => {\n  return requiredKeys.filter(requiredKey => !(requiredKey in object));\n};\n\nexport function setAudioModeAsync(_x) {\n  return _setAudioModeAsync.apply(this, arguments);\n}\n\nfunction _setAudioModeAsync() {\n  _setAudioModeAsync = _asyncToGenerator(function* (mode) {\n    var missingKeys = _findMissingKeys(mode, ['allowsRecordingIOS', 'interruptionModeIOS', 'playsInSilentModeIOS', 'staysActiveInBackground', 'interruptionModeAndroid', 'shouldDuckAndroid', 'playThroughEarpieceAndroid']);\n\n    if (missingKeys.length > 0) {\n      throw new Error(\"Audio mode attempted to be set without the required keys: \".concat(JSON.stringify(missingKeys)));\n    }\n\n    if (!_isValueValid(mode.interruptionModeIOS, [INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS, INTERRUPTION_MODE_IOS_DO_NOT_MIX, INTERRUPTION_MODE_IOS_DUCK_OTHERS])) {\n      throw new Error(\"\\\"interruptionModeIOS\\\" was set to an invalid value.\");\n    }\n\n    if (!_isValueValid(mode.interruptionModeAndroid, [INTERRUPTION_MODE_ANDROID_DO_NOT_MIX, INTERRUPTION_MODE_ANDROID_DUCK_OTHERS])) {\n      throw new Error(\"\\\"interruptionModeAndroid\\\" was set to an invalid value.\");\n    }\n\n    if (typeof mode.allowsRecordingIOS !== 'boolean' || typeof mode.playsInSilentModeIOS !== 'boolean' || typeof mode.staysActiveInBackground !== 'boolean' || typeof mode.shouldDuckAndroid !== 'boolean' || typeof mode.playThroughEarpieceAndroid !== 'boolean') {\n      throw new Error('\"allowsRecordingIOS\", \"playsInSilentModeIOS\", \"playThroughEarpieceAndroid\", \"staysActiveInBackground\" and \"shouldDuckAndroid\" must be booleans.');\n    }\n\n    return yield ExponentAV.setAudioMode(mode);\n  });\n  return _setAudioModeAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/Audio.ts"],"names":[],"mappings":";;;;AAAA,OAAO,UAAP;AAEA;AACA;AACA,SAAS,iBAAT;AACA,SAAS,sBAAT;AAYA,OAAO,IAAM,qCAAqC,GAAG,CAA9C;AACP,OAAO,IAAM,gCAAgC,GAAG,CAAzC;AACP,OAAO,IAAM,iCAAiC,GAAG,CAA1C;AAEP,OAAO,IAAM,oCAAoC,GAAG,CAA7C;AACP,OAAO,IAAM,qCAAqC,GAAG,CAA9C;;AAGP,IAAM,aAAa,GAAG,CAAC,KAAD,EAAa,WAAb,KAA4C;AAChE,SAAO,WAAW,CAAC,MAAZ,CAAmB,UAAU,IAAI,UAAU,KAAK,KAAhD,EAAuD,MAAvD,GAAgE,CAAvE;AACD,CAFD;;AAKA,IAAM,gBAAgB,GAAG,CAAC,MAAD,EAAiB,YAAjB,KAA+C;AACtE,SAAO,YAAY,CAAC,MAAb,CAAoB,WAAW,IAAI,EAAE,WAAW,IAAI,MAAjB,CAAnC,CAAP;AACD,CAFD;;AAIA,gBAAsB,iBAAtB;AAAA;AAAA;;;yCAAO,WAAiC,IAAjC,EAAgD;AACrD,QAAM,WAAW,GAAG,gBAAgB,CAAC,IAAD,EAAO,CACzC,oBADyC,EAEzC,qBAFyC,EAGzC,sBAHyC,EAIzC,yBAJyC,EAKzC,yBALyC,EAMzC,mBANyC,EAOzC,4BAPyC,CAAP,CAApC;;AASA,QAAI,WAAW,CAAC,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,YAAM,IAAI,KAAJ,qEACyD,IAAI,CAAC,SAAL,CAAe,WAAf,CADzD,EAAN;AAGD;;AACD,QACE,CAAC,aAAa,CAAC,IAAI,CAAC,mBAAN,EAA2B,CACvC,qCADuC,EAEvC,gCAFuC,EAGvC,iCAHuC,CAA3B,CADhB,EAME;AACA,YAAM,IAAI,KAAJ,wDAAN;AACD;;AACD,QACE,CAAC,aAAa,CAAC,IAAI,CAAC,uBAAN,EAA+B,CAC3C,oCAD2C,EAE3C,qCAF2C,CAA/B,CADhB,EAKE;AACA,YAAM,IAAI,KAAJ,4DAAN;AACD;;AACD,QACE,OAAO,IAAI,CAAC,kBAAZ,KAAmC,SAAnC,IACA,OAAO,IAAI,CAAC,oBAAZ,KAAqC,SADrC,IAEA,OAAO,IAAI,CAAC,uBAAZ,KAAwC,SAFxC,IAGA,OAAO,IAAI,CAAC,iBAAZ,KAAkC,SAHlC,IAIA,OAAO,IAAI,CAAC,0BAAZ,KAA2C,SAL7C,EAME;AACA,YAAM,IAAI,KAAJ,CACJ,iJADI,CAAN;AAGD;;AACD,iBAAa,UAAU,CAAC,YAAX,CAAwB,IAAxB,CAAb;AACD,G","sourcesContent":["import ExponentAV from './ExponentAV';\n\nexport * from './Audio/Recording';\nexport * from './Audio/Sound';\nexport { setIsEnabledAsync } from './Audio/AudioAvailability';\nexport { PitchCorrectionQuality } from './AV';\n\nexport type AudioMode = {\n  allowsRecordingIOS: boolean;\n  interruptionModeIOS: number;\n  playsInSilentModeIOS: boolean;\n  staysActiveInBackground: boolean;\n  interruptionModeAndroid: number;\n  shouldDuckAndroid: boolean;\n  playThroughEarpieceAndroid: boolean;\n};\n\nexport const INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS = 0;\nexport const INTERRUPTION_MODE_IOS_DO_NOT_MIX = 1;\nexport const INTERRUPTION_MODE_IOS_DUCK_OTHERS = 2;\n\nexport const INTERRUPTION_MODE_ANDROID_DO_NOT_MIX = 1;\nexport const INTERRUPTION_MODE_ANDROID_DUCK_OTHERS = 2;\n\n// Returns true if value is in validValues, and false if not.\nconst _isValueValid = (value: any, validValues: any[]): boolean => {\n  return validValues.filter(validValue => validValue === value).length > 0;\n};\n\n// Returns array of missing keys in object. Returns an empty array if no missing keys are found.\nconst _findMissingKeys = (object: Object, requiredKeys: any[]): any[] => {\n  return requiredKeys.filter(requiredKey => !(requiredKey in object));\n};\n\nexport async function setAudioModeAsync(mode: AudioMode): Promise<void> {\n  const missingKeys = _findMissingKeys(mode, [\n    'allowsRecordingIOS',\n    'interruptionModeIOS',\n    'playsInSilentModeIOS',\n    'staysActiveInBackground',\n    'interruptionModeAndroid',\n    'shouldDuckAndroid',\n    'playThroughEarpieceAndroid',\n  ]);\n  if (missingKeys.length > 0) {\n    throw new Error(\n      `Audio mode attempted to be set without the required keys: ${JSON.stringify(missingKeys)}`\n    );\n  }\n  if (\n    !_isValueValid(mode.interruptionModeIOS, [\n      INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS,\n      INTERRUPTION_MODE_IOS_DO_NOT_MIX,\n      INTERRUPTION_MODE_IOS_DUCK_OTHERS,\n    ])\n  ) {\n    throw new Error(`\"interruptionModeIOS\" was set to an invalid value.`);\n  }\n  if (\n    !_isValueValid(mode.interruptionModeAndroid, [\n      INTERRUPTION_MODE_ANDROID_DO_NOT_MIX,\n      INTERRUPTION_MODE_ANDROID_DUCK_OTHERS,\n    ])\n  ) {\n    throw new Error(`\"interruptionModeAndroid\" was set to an invalid value.`);\n  }\n  if (\n    typeof mode.allowsRecordingIOS !== 'boolean' ||\n    typeof mode.playsInSilentModeIOS !== 'boolean' ||\n    typeof mode.staysActiveInBackground !== 'boolean' ||\n    typeof mode.shouldDuckAndroid !== 'boolean' ||\n    typeof mode.playThroughEarpieceAndroid !== 'boolean'\n  ) {\n    throw new Error(\n      '\"allowsRecordingIOS\", \"playsInSilentModeIOS\", \"playThroughEarpieceAndroid\", \"staysActiveInBackground\" and \"shouldDuckAndroid\" must be booleans.'\n    );\n  }\n  return await ExponentAV.setAudioMode(mode);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}