{"ast":null,"code":"import AnimatedValue from \"../core/AnimatedValue\";\nimport Animation from \"./Animation\";\nimport SpringConfig from \"../SpringConfig\";\nimport spring from \"./spring\";\nimport { block, clockRunning, startClock, stopClock, cond } from \"../base\";\nimport Clock from \"../core/AnimatedClock\";\nimport invariant from 'fbjs/lib/invariant';\n\nfunction withDefault(value, defaultValue) {\n  if (value === undefined || value === null) {\n    return defaultValue;\n  }\n\n  return value;\n}\n\nexport default class SpringAnimation extends Animation {\n  constructor(config) {\n    super();\n    this._overshootClamping = withDefault(config.overshootClamping, false);\n    this._restDisplacementThreshold = withDefault(config.restDisplacementThreshold, 0.001);\n    this._restSpeedThreshold = withDefault(config.restSpeedThreshold, 0.001);\n    this._initialVelocity = withDefault(config.velocity, 0);\n    this._lastVelocity = withDefault(config.velocity, 0);\n    this._toValue = config.toValue;\n    this._delay = withDefault(config.delay, 0);\n\n    if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {\n      invariant(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      this._stiffness = withDefault(config.stiffness, 100);\n      this._damping = withDefault(config.damping, 10);\n      this._mass = withDefault(config.mass, 1);\n    } else if (config.bounciness !== undefined || config.speed !== undefined) {\n      invariant(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      var springConfig = SpringConfig.fromBouncinessAndSpeed(withDefault(config.bounciness, 8), withDefault(config.speed, 12));\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    } else {\n      var _springConfig = SpringConfig.fromOrigamiTensionAndFriction(withDefault(config.tension, 40), withDefault(config.friction, 7));\n\n      this._stiffness = _springConfig.stiffness;\n      this._damping = _springConfig.damping;\n      this._mass = 1;\n    }\n\n    invariant(this._stiffness > 0, 'Stiffness value must be greater than 0');\n    invariant(this._damping > 0, 'Damping value must be greater than 0');\n    invariant(this._mass > 0, 'Mass value must be greater than 0');\n  }\n\n  start(value) {\n    this._clock = new Clock();\n    var state = {\n      finished: new AnimatedValue(0),\n      velocity: new AnimatedValue(this._initialVelocity),\n      position: value,\n      time: new AnimatedValue(0)\n    };\n    var config = {\n      damping: this._damping,\n      mass: this._mass,\n      stiffness: this._stiffness,\n      toValue: this._toValue,\n      overshootClamping: this._overshootClamping,\n      restSpeedThreshold: this._restSpeedThreshold,\n      restDisplacementThreshold: this._restDisplacementThreshold\n    };\n    return block([cond(clockRunning(this._clock), 0, [startClock(this._clock)]), spring(this._clock, state, config), cond(state.finished, stopClock(this._clock))]);\n  }\n\n  stop() {}\n\n  static getDefaultState() {\n    return {\n      position: new AnimatedValue(0),\n      finished: new AnimatedValue(0),\n      velocity: new AnimatedValue(0),\n      time: new AnimatedValue(0)\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/react-native-reanimated/src/animations/SpringAnimation.js"],"names":["AnimatedValue","Animation","SpringConfig","spring","block","clockRunning","startClock","stopClock","cond","Clock","invariant","withDefault","value","defaultValue","undefined","SpringAnimation","constructor","config","_overshootClamping","overshootClamping","_restDisplacementThreshold","restDisplacementThreshold","_restSpeedThreshold","restSpeedThreshold","_initialVelocity","velocity","_lastVelocity","_toValue","toValue","_delay","delay","stiffness","damping","mass","bounciness","speed","tension","friction","_stiffness","_damping","_mass","springConfig","fromBouncinessAndSpeed","fromOrigamiTensionAndFriction","start","_clock","state","finished","position","time","stop","getDefaultState"],"mappings":"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","sourcesContent":["import AnimatedValue from '../core/AnimatedValue';\nimport Animation from './Animation';\nimport SpringConfig from '../SpringConfig';\nimport spring from './spring';\n\nimport { block, clockRunning, startClock, stopClock, cond } from '../base';\nimport Clock from '../core/AnimatedClock';\n\nimport invariant from 'fbjs/lib/invariant';\n\nfunction withDefault(value, defaultValue) {\n  if (value === undefined || value === null) {\n    return defaultValue;\n  }\n  return value;\n}\n\nexport default class SpringAnimation extends Animation {\n  constructor(config) {\n    super();\n\n    this._overshootClamping = withDefault(config.overshootClamping, false);\n    this._restDisplacementThreshold = withDefault(\n      config.restDisplacementThreshold,\n      0.001\n    );\n    this._restSpeedThreshold = withDefault(config.restSpeedThreshold, 0.001);\n    this._initialVelocity = withDefault(config.velocity, 0);\n    this._lastVelocity = withDefault(config.velocity, 0);\n    this._toValue = config.toValue;\n    this._delay = withDefault(config.delay, 0);\n\n    if (\n      config.stiffness !== undefined ||\n      config.damping !== undefined ||\n      config.mass !== undefined\n    ) {\n      invariant(\n        config.bounciness === undefined &&\n          config.speed === undefined &&\n          config.tension === undefined &&\n          config.friction === undefined,\n        'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one'\n      );\n      this._stiffness = withDefault(config.stiffness, 100);\n      this._damping = withDefault(config.damping, 10);\n      this._mass = withDefault(config.mass, 1);\n    } else if (config.bounciness !== undefined || config.speed !== undefined) {\n      // Convert the origami bounciness/speed values to stiffness/damping\n      // We assume mass is 1.\n      invariant(\n        config.tension === undefined &&\n          config.friction === undefined &&\n          config.stiffness === undefined &&\n          config.damping === undefined &&\n          config.mass === undefined,\n        'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one'\n      );\n      const springConfig = SpringConfig.fromBouncinessAndSpeed(\n        withDefault(config.bounciness, 8),\n        withDefault(config.speed, 12)\n      );\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    } else {\n      // Convert the origami tension/friction values to stiffness/damping\n      // We assume mass is 1.\n      const springConfig = SpringConfig.fromOrigamiTensionAndFriction(\n        withDefault(config.tension, 40),\n        withDefault(config.friction, 7)\n      );\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    }\n\n    invariant(this._stiffness > 0, 'Stiffness value must be greater than 0');\n    invariant(this._damping > 0, 'Damping value must be greater than 0');\n    invariant(this._mass > 0, 'Mass value must be greater than 0');\n  }\n\n  start(value) {\n    this._clock = new Clock();\n    const state = {\n      finished: new AnimatedValue(0),\n      velocity: new AnimatedValue(this._initialVelocity),\n      position: value,\n      time: new AnimatedValue(0),\n    };\n\n    const config = {\n      damping: this._damping,\n      mass: this._mass,\n      stiffness: this._stiffness,\n      toValue: this._toValue,\n      overshootClamping: this._overshootClamping,\n      restSpeedThreshold: this._restSpeedThreshold,\n      restDisplacementThreshold: this._restDisplacementThreshold,\n    };\n\n    return block([\n      cond(clockRunning(this._clock), 0, [startClock(this._clock)]),\n      spring(this._clock, state, config),\n      cond(state.finished, stopClock(this._clock)),\n    ]);\n  }\n\n  stop() {\n    // this._finished && this._finished.setValue(1);\n  }\n  static getDefaultState() {\n    return {\n      position: new AnimatedValue(0),\n      finished: new AnimatedValue(0),\n      velocity: new AnimatedValue(0),\n      time: new AnimatedValue(0),\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}