{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport invariant from 'invariant';\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nvar PedometerEventEmitter = new NativeEventEmitter(NativeModules.ExponentPedometer);\nvar _listenerCount = 0;\nexport function watchStepCount(callback) {\n  if (_listenerCount === 0) {\n    NativeModules.ExponentPedometer.watchStepCount();\n  }\n\n  _listenerCount++;\n  var listener = PedometerEventEmitter.addListener('Exponent.pedometerUpdate', callback);\n  return {\n    remove() {\n      listener.remove();\n      _listenerCount--;\n\n      if (_listenerCount === 0) {\n        NativeModules.ExponentPedometer.stopWatchingStepCount();\n      }\n    }\n\n  };\n}\nexport function getStepCountAsync(_x, _x2) {\n  return _getStepCountAsync.apply(this, arguments);\n}\n\nfunction _getStepCountAsync() {\n  _getStepCountAsync = _asyncToGenerator(function* (start, end) {\n    invariant(start <= end, 'Pedometer: The start date must precede the end date.');\n    return yield NativeModules.ExponentPedometer.getStepCountAsync(start.getTime(), end.getTime());\n  });\n  return _getStepCountAsync.apply(this, arguments);\n}\n\nexport function isAvailableAsync() {\n  return _isAvailableAsync.apply(this, arguments);\n}\n\nfunction _isAvailableAsync() {\n  _isAvailableAsync = _asyncToGenerator(function* () {\n    return yield NativeModules.ExponentPedometer.isAvailableAsync();\n  });\n  return _isAvailableAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/Pedometer.ts"],"names":[],"mappings":";;;;AAAA,OAAO,SAAP,MAAsB,WAAtB;;;AAGA,IAAM,qBAAqB,GAAG,IAAI,kBAAJ,CAAuB,aAAa,CAAC,iBAArC,CAA9B;AAMA,IAAI,cAAc,GAAG,CAArB;AAEA,OAAM,SAAU,cAAV,CAAyB,QAAzB,EAA0D;AAC9D,MAAI,cAAc,KAAK,CAAvB,EAA0B;AACxB,IAAA,aAAa,CAAC,iBAAd,CAAgC,cAAhC;AACD;;AACD,EAAA,cAAc;AAEd,MAAM,QAAQ,GAAG,qBAAqB,CAAC,WAAtB,CAAkC,0BAAlC,EAA8D,QAA9D,CAAjB;AAEA,SAAO;AACL,IAAA,MAAM,GAAA;AACJ,MAAA,QAAQ,CAAC,MAAT;AACA,MAAA,cAAc;;AACd,UAAI,cAAc,KAAK,CAAvB,EAA0B;AACxB,QAAA,aAAa,CAAC,iBAAd,CAAgC,qBAAhC;AACD;AACF;;AAPI,GAAP;AASD;AAED,gBAAsB,iBAAtB;AAAA;AAAA;;;yCAAO,WAAiC,KAAjC,EAA8C,GAA9C,EAAuD;AAC5D,IAAA,SAAS,CAAC,KAAK,IAAI,GAAV,EAAe,sDAAf,CAAT;AACA,iBAAa,aAAa,CAAC,iBAAd,CAAgC,iBAAhC,CAAkD,KAAK,CAAC,OAAN,EAAlD,EAAmE,GAAG,CAAC,OAAJ,EAAnE,CAAb;AACD,G;;;;AAED,gBAAsB,gBAAtB;AAAA;AAAA;;;wCAAO,aAA+B;AACpC,iBAAa,aAAa,CAAC,iBAAd,CAAgC,gBAAhC,EAAb;AACD,G","sourcesContent":["import invariant from 'invariant';\nimport { NativeEventEmitter, NativeModules } from 'react-native';\n\nconst PedometerEventEmitter = new NativeEventEmitter(NativeModules.ExponentPedometer);\n\ntype PedometerResult = { steps: number };\ntype PedometerUpdateCallback = (result: PedometerResult) => void;\ntype PedometerListener = { remove: () => void };\n\nlet _listenerCount = 0;\n\nexport function watchStepCount(callback: PedometerUpdateCallback): PedometerListener {\n  if (_listenerCount === 0) {\n    NativeModules.ExponentPedometer.watchStepCount();\n  }\n  _listenerCount++;\n\n  const listener = PedometerEventEmitter.addListener('Exponent.pedometerUpdate', callback);\n\n  return {\n    remove() {\n      listener.remove();\n      _listenerCount--;\n      if (_listenerCount === 0) {\n        NativeModules.ExponentPedometer.stopWatchingStepCount();\n      }\n    },\n  };\n}\n\nexport async function getStepCountAsync(start: Date, end: Date): Promise<PedometerResult> {\n  invariant(start <= end, 'Pedometer: The start date must precede the end date.');\n  return await NativeModules.ExponentPedometer.getStepCountAsync(start.getTime(), end.getTime());\n}\n\nexport async function isAvailableAsync(): Promise<boolean> {\n  return await NativeModules.ExponentPedometer.isAvailableAsync();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}