{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jshukurov\\\\Desktop\\\\Poppi Over The Edge\\\\Poppi-Over-the-Edge-master\\\\node_modules\\\\react-native-elements\\\\src\\\\slider\\\\Slider.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport { withTheme } from \"../config\";\nvar TRACK_SIZE = 4;\nvar THUMB_SIZE = 20;\nvar DEFAULT_ANIMATION_CONFIGS = {\n  spring: {\n    friction: 7,\n    tension: 100\n  },\n  timing: {\n    duration: 150,\n    easing: Easing.inOut(Easing.ease),\n    delay: 0\n  }\n};\n\nvar getBoundedValue = (_ref) => {\n  var {\n    value,\n    maximumValue,\n    minimumValue\n  } = _ref;\n  return value > maximumValue ? maximumValue : value < minimumValue ? minimumValue : value;\n};\n\nclass Rect {\n  constructor(x, y, width, height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  containsPoint(x, y) {\n    return x >= this.x && y >= this.y && x <= this.x + this.width && y <= this.y + this.height;\n  }\n\n}\n\nclass Slider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.measureContainer = x => {\n      this.handleMeasure('containerSize', x);\n    };\n\n    this.measureTrack = x => {\n      this.handleMeasure('trackSize', x);\n    };\n\n    this.measureThumb = x => {\n      this.handleMeasure('thumbSize', x);\n    };\n\n    this.state = {\n      containerSize: {\n        width: 0,\n        height: 0\n      },\n      trackSize: {\n        width: 0,\n        height: 0\n      },\n      thumbSize: {\n        width: 0,\n        height: 0\n      },\n      allMeasured: false,\n      value: new Animated.Value(getBoundedValue(props))\n    };\n    this.panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: this.handleStartShouldSetPanResponder.bind(this),\n      onMoveShouldSetPanResponder: this.handleMoveShouldSetPanResponder.bind(this),\n      onPanResponderGrant: this.handlePanResponderGrant.bind(this),\n      onPanResponderMove: this.handlePanResponderMove.bind(this),\n      onPanResponderRelease: this.handlePanResponderEnd.bind(this),\n      onPanResponderTerminationRequest: this.handlePanResponderRequestEnd.bind(this),\n      onPanResponderTerminate: this.handlePanResponderEnd.bind(this)\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    var newValue = getBoundedValue(this.props);\n\n    if (prevProps.value !== newValue) {\n      if (this.props.animateTransitions) {\n        this.setCurrentValueAnimated(newValue);\n      } else {\n        this.setCurrentValue(newValue);\n      }\n    }\n  }\n\n  setCurrentValue(value) {\n    this.state.value.setValue(value);\n  }\n\n  setCurrentValueAnimated(value) {\n    var {\n      animationType\n    } = this.props;\n\n    var animationConfig = _extends({}, DEFAULT_ANIMATION_CONFIGS[animationType], this.props.animationConfig, {\n      toValue: value\n    });\n\n    Animated[animationType](this.state.value, animationConfig).start();\n  }\n\n  handleMoveShouldSetPanResponder() {\n    return false;\n  }\n\n  handlePanResponderGrant() {\n    this._previousLeft = this.getThumbLeft(this.getCurrentValue());\n    this.fireChangeEvent('onSlidingStart');\n  }\n\n  handlePanResponderMove(_, gestureState) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.setCurrentValue(this.getValue(gestureState));\n    this.fireChangeEvent('onValueChange');\n  }\n\n  handlePanResponderRequestEnd() {\n    return false;\n  }\n\n  handlePanResponderEnd(_, gestureState) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.setCurrentValue(this.getValue(gestureState));\n    this.fireChangeEvent('onSlidingComplete');\n  }\n\n  thumbHitTest(_ref2) {\n    var {\n      nativeEvent\n    } = _ref2;\n    var thumbTouchRect = this.getThumbTouchRect();\n    return thumbTouchRect.containsPoint(nativeEvent.locationX, nativeEvent.locationY);\n  }\n\n  handleStartShouldSetPanResponder(e) {\n    return this.thumbHitTest(e);\n  }\n\n  fireChangeEvent(event) {\n    if (this.props[event]) {\n      this.props[event](this.getCurrentValue());\n    }\n  }\n\n  getTouchOverflowSize() {\n    var {\n      thumbSize,\n      allMeasured,\n      containerSize\n    } = this.state;\n    var {\n      thumbTouchSize\n    } = this.props;\n    var size = {};\n\n    if (allMeasured === true) {\n      size.width = Math.max(0, thumbTouchSize.width - thumbSize.width);\n      size.height = Math.max(0, thumbTouchSize.height - containerSize.height);\n    }\n\n    return size;\n  }\n\n  getTouchOverflowStyle() {\n    var {\n      width,\n      height\n    } = this.getTouchOverflowSize();\n    var touchOverflowStyle = {};\n\n    if (width !== undefined && height !== undefined) {\n      var verticalMargin = -height / 2;\n      touchOverflowStyle.marginTop = verticalMargin;\n      touchOverflowStyle.marginBottom = verticalMargin;\n      var horizontalMargin = -width / 2;\n      touchOverflowStyle.marginLeft = horizontalMargin;\n      touchOverflowStyle.marginRight = horizontalMargin;\n    }\n\n    if (this.props.debugTouchArea === true) {\n      touchOverflowStyle.backgroundColor = 'orange';\n      touchOverflowStyle.opacity = 0.5;\n    }\n\n    return touchOverflowStyle;\n  }\n\n  handleMeasure(name, x) {\n    var {\n      width: layoutWidth,\n      height: layoutHeight\n    } = x.nativeEvent.layout;\n    var width = this.props.orientation === 'vertical' ? layoutHeight : layoutWidth;\n    var height = this.props.orientation === 'vertical' ? layoutWidth : layoutHeight;\n    var size = {\n      width,\n      height\n    };\n    var storeName = \"_\".concat(name);\n    var currentSize = this[storeName];\n\n    if (currentSize && width === currentSize.width && height === currentSize.height) {\n      return;\n    }\n\n    this[storeName] = size;\n\n    if (this._containerSize && this._trackSize && this._thumbSize) {\n      this.setState({\n        containerSize: this._containerSize,\n        trackSize: this._trackSize,\n        thumbSize: this._thumbSize,\n        allMeasured: true\n      });\n    }\n  }\n\n  getValue(gestureState) {\n    var length = this.state.containerSize.width - this.state.thumbSize.width;\n    var thumbLeft = this._previousLeft + (this.props.orientation === 'vertical' ? gestureState.dy : gestureState.dx);\n    var ratio = thumbLeft / length;\n\n    if (this.props.step) {\n      return Math.max(this.props.minimumValue, Math.min(this.props.maximumValue, this.props.minimumValue + Math.round(ratio * (this.props.maximumValue - this.props.minimumValue) / this.props.step) * this.props.step));\n    }\n\n    return Math.max(this.props.minimumValue, Math.min(this.props.maximumValue, ratio * (this.props.maximumValue - this.props.minimumValue) + this.props.minimumValue));\n  }\n\n  getCurrentValue() {\n    return this.state.value.__getValue();\n  }\n\n  getRatio(value) {\n    return (value - this.props.minimumValue) / (this.props.maximumValue - this.props.minimumValue);\n  }\n\n  getThumbLeft(value) {\n    var ratio = this.getRatio(value);\n    return ratio * (this.state.containerSize.width - this.state.thumbSize.width);\n  }\n\n  getThumbTouchRect() {\n    var {\n      thumbSize,\n      containerSize\n    } = this.state;\n    var {\n      thumbTouchSize\n    } = this.props;\n    var touchOverflowSize = this.getTouchOverflowSize();\n\n    if (this.props.orientation === 'vertical') {\n      return new Rect(touchOverflowSize.height / 2 + (containerSize.height - thumbTouchSize.height) / 2, touchOverflowSize.width / 2 + this.getThumbLeft(this.getCurrentValue()) + (thumbSize.width - thumbTouchSize.width) / 2, thumbTouchSize.width, thumbTouchSize.height);\n    }\n\n    return new Rect(touchOverflowSize.width / 2 + this.getThumbLeft(this.getCurrentValue()) + (thumbSize.width - thumbTouchSize.width) / 2, touchOverflowSize.height / 2 + (containerSize.height - thumbTouchSize.height) / 2, thumbTouchSize.width, thumbTouchSize.height);\n  }\n\n  renderDebugThumbTouchRect(thumbLeft) {\n    var thumbTouchRect = this.getThumbTouchRect();\n    var positionStyle = {\n      left: thumbLeft,\n      top: thumbTouchRect.y,\n      width: thumbTouchRect.width,\n      height: thumbTouchRect.height\n    };\n    return React.createElement(Animated.View, {\n      style: positionStyle,\n      pointerEvents: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 12\n      }\n    });\n  }\n\n  getMinimumTrackStyles(thumbStart) {\n    var {\n      thumbSize,\n      trackSize\n    } = this.state;\n    var minimumTrackStyle = {\n      position: 'absolute'\n    };\n\n    if (this.props.orientation === 'vertical') {\n      minimumTrackStyle.height = Animated.add(thumbStart, thumbSize.height / 2);\n      minimumTrackStyle.marginLeft = -trackSize.width;\n    } else {\n      minimumTrackStyle.width = Animated.add(thumbStart, thumbSize.width / 2);\n      minimumTrackStyle.marginTop = -trackSize.height;\n    }\n\n    return minimumTrackStyle;\n  }\n\n  getThumbPositionStyles(thumbStart) {\n    if (this.props.orientation === 'vertical') {\n      return [{\n        translateX: -(this.state.trackSize.height + this.state.thumbSize.height) / 2\n      }, {\n        translateY: thumbStart\n      }];\n    }\n\n    return [{\n      translateX: thumbStart\n    }, {\n      translateY: -(this.state.trackSize.height + this.state.thumbSize.height) / 2\n    }];\n  }\n\n  render() {\n    var _this$props = this.props,\n        {\n      minimumValue,\n      maximumValue,\n      minimumTrackTintColor,\n      maximumTrackTintColor,\n      thumbTintColor,\n      containerStyle,\n      style,\n      trackStyle,\n      thumbStyle,\n      debugTouchArea,\n      orientation\n    } = _this$props,\n        other = _objectWithoutProperties(_this$props, [\"minimumValue\", \"maximumValue\", \"minimumTrackTintColor\", \"maximumTrackTintColor\", \"thumbTintColor\", \"containerStyle\", \"style\", \"trackStyle\", \"thumbStyle\", \"debugTouchArea\", \"orientation\"]);\n\n    var {\n      value,\n      containerSize,\n      thumbSize,\n      allMeasured\n    } = this.state;\n    var mainStyles = containerStyle || styles;\n    var thumbStart = value.interpolate({\n      inputRange: [minimumValue, maximumValue],\n      outputRange: [0, containerSize.width - thumbSize.width]\n    });\n    var valueVisibleStyle = {};\n\n    if (!allMeasured) {\n      valueVisibleStyle.height = 0;\n      valueVisibleStyle.width = 0;\n    }\n\n    var minimumTrackStyle = _objectSpread(_objectSpread({}, this.getMinimumTrackStyles(thumbStart)), {}, {\n      backgroundColor: minimumTrackTintColor\n    }, valueVisibleStyle);\n\n    var thumbStyleTransform = thumbStyle && thumbStyle.transform || [];\n    var touchOverflowStyle = this.getTouchOverflowStyle();\n    return React.createElement(View, _extends({}, other, {\n      style: StyleSheet.flatten([orientation === 'vertical' ? mainStyles.containerVertical : mainStyles.containerHorizontal, style]),\n      onLayout: this.measureContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 7\n      }\n    }), React.createElement(View, {\n      style: StyleSheet.flatten([mainStyles.track, orientation === 'vertical' ? mainStyles.trackVertical : mainStyles.trackHorizontal, trackStyle, {\n        backgroundColor: maximumTrackTintColor\n      }]),\n      onLayout: this.measureTrack,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 9\n      }\n    }), React.createElement(Animated.View, {\n      style: StyleSheet.flatten([mainStyles.track, orientation === 'vertical' ? mainStyles.trackVertical : mainStyles.trackHorizontal, trackStyle, minimumTrackStyle]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 9\n      }\n    }), React.createElement(Animated.View, {\n      testID: \"sliderThumb\",\n      onLayout: this.measureThumb,\n      style: StyleSheet.flatten([{\n        backgroundColor: thumbTintColor\n      }, mainStyles.thumb, orientation === 'vertical' ? mainStyles.thumbVertical(trackStyle && trackStyle.width) : mainStyles.thumbHorizontal(trackStyle && trackStyle.height), thumbStyle, _objectSpread({\n        transform: [...this.getThumbPositionStyles(thumbStart), ...thumbStyleTransform]\n      }, valueVisibleStyle)]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 9\n      }\n    }), React.createElement(View, _extends({\n      style: StyleSheet.flatten([styles.touchArea, touchOverflowStyle])\n    }, this.panResponder.panHandlers, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }\n    }), debugTouchArea === true && this.renderDebugThumbTouchRect(thumbStart)));\n  }\n\n}\n\nSlider.propTypes = {\n  value: PropTypes.number,\n  disabled: PropTypes.bool,\n  minimumValue: PropTypes.number,\n  maximumValue: PropTypes.number,\n  step: PropTypes.number,\n  minimumTrackTintColor: PropTypes.string,\n  maximumTrackTintColor: PropTypes.string,\n  thumbTintColor: PropTypes.string,\n  thumbTouchSize: PropTypes.shape({\n    width: PropTypes.number,\n    height: PropTypes.number\n  }),\n  onValueChange: PropTypes.func,\n  onSlidingStart: PropTypes.func,\n  onSlidingComplete: PropTypes.func,\n  style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  trackStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  thumbStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  debugTouchArea: PropTypes.bool,\n  animateTransitions: PropTypes.bool,\n  animationType: PropTypes.oneOf(['spring', 'timing']),\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  animationConfig: PropTypes.object,\n  containerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array])\n};\nSlider.defaultProps = {\n  value: 0,\n  minimumValue: 0,\n  maximumValue: 1,\n  step: 0,\n  minimumTrackTintColor: '#3f3f3f',\n  maximumTrackTintColor: '#b3b3b3',\n  thumbTintColor: 'red',\n  thumbTouchSize: {\n    width: 40,\n    height: 40\n  },\n  debugTouchArea: false,\n  animationType: 'timing',\n  orientation: 'horizontal'\n};\nvar styles = StyleSheet.create({\n  containerHorizontal: {\n    height: 40,\n    justifyContent: 'center'\n  },\n  containerVertical: {\n    width: 40,\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  track: {\n    borderRadius: TRACK_SIZE / 2\n  },\n  trackHorizontal: {\n    height: TRACK_SIZE\n  },\n  trackVertical: {\n    flex: 1,\n    width: TRACK_SIZE\n  },\n  thumb: {\n    position: 'absolute',\n    width: THUMB_SIZE,\n    height: THUMB_SIZE,\n    borderRadius: THUMB_SIZE / 2\n  },\n  thumbHorizontal: height => ({\n    top: 22 + (height ? (height - 4) / 2 : 0)\n  }),\n  thumbVertical: width => ({\n    left: 22 + (width ? (width - 4) / 2 : 0)\n  }),\n  touchArea: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  },\n  debugThumbTouchArea: {\n    position: 'absolute',\n    backgroundColor: 'green',\n    opacity: 0.5\n  }\n});\nexport { Slider };\nexport default withTheme(Slider, 'Slider');","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/react-native-elements/src/slider/Slider.js"],"names":["React","Component","PropTypes","withTheme","TRACK_SIZE","THUMB_SIZE","DEFAULT_ANIMATION_CONFIGS","spring","friction","tension","timing","duration","easing","Easing","inOut","ease","delay","getBoundedValue","value","maximumValue","minimumValue","Rect","constructor","x","y","width","height","containsPoint","Slider","props","measureContainer","handleMeasure","measureTrack","measureThumb","state","containerSize","trackSize","thumbSize","allMeasured","Animated","Value","panResponder","PanResponder","create","onStartShouldSetPanResponder","handleStartShouldSetPanResponder","bind","onMoveShouldSetPanResponder","handleMoveShouldSetPanResponder","onPanResponderGrant","handlePanResponderGrant","onPanResponderMove","handlePanResponderMove","onPanResponderRelease","handlePanResponderEnd","onPanResponderTerminationRequest","handlePanResponderRequestEnd","onPanResponderTerminate","componentDidUpdate","prevProps","newValue","animateTransitions","setCurrentValueAnimated","setCurrentValue","setValue","animationType","animationConfig","toValue","start","_previousLeft","getThumbLeft","getCurrentValue","fireChangeEvent","_","gestureState","disabled","getValue","thumbHitTest","nativeEvent","thumbTouchRect","getThumbTouchRect","locationX","locationY","e","event","getTouchOverflowSize","thumbTouchSize","size","Math","max","getTouchOverflowStyle","touchOverflowStyle","undefined","verticalMargin","marginTop","marginBottom","horizontalMargin","marginLeft","marginRight","debugTouchArea","backgroundColor","opacity","name","layoutWidth","layoutHeight","layout","orientation","storeName","currentSize","_containerSize","_trackSize","_thumbSize","setState","length","thumbLeft","dy","dx","ratio","step","min","round","__getValue","getRatio","touchOverflowSize","renderDebugThumbTouchRect","positionStyle","left","top","getMinimumTrackStyles","thumbStart","minimumTrackStyle","position","add","getThumbPositionStyles","translateX","translateY","render","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","containerStyle","style","trackStyle","thumbStyle","other","mainStyles","styles","interpolate","inputRange","outputRange","valueVisibleStyle","thumbStyleTransform","transform","StyleSheet","flatten","containerVertical","containerHorizontal","track","trackVertical","trackHorizontal","thumb","thumbVertical","thumbHorizontal","touchArea","panHandlers","propTypes","number","bool","string","shape","onValueChange","func","onSlidingStart","onSlidingComplete","oneOfType","object","array","oneOf","defaultProps","justifyContent","flexDirection","alignItems","borderRadius","flex","right","bottom","debugThumbTouchArea"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, StyleSheet, Animated, Easing, PanResponder } from 'react-native';\n\nimport { withTheme } from '../config';\n\nconst TRACK_SIZE = 4;\nconst THUMB_SIZE = 20;\n\nconst DEFAULT_ANIMATION_CONFIGS = {\n  spring: {\n    friction: 7,\n    tension: 100,\n  },\n  timing: {\n    duration: 150,\n    easing: Easing.inOut(Easing.ease),\n    delay: 0,\n  },\n};\n\nconst getBoundedValue = ({ value, maximumValue, minimumValue }) =>\n  value > maximumValue\n    ? maximumValue\n    : value < minimumValue\n    ? minimumValue\n    : value;\n\nclass Rect {\n  constructor(x, y, width, height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  containsPoint(x, y) {\n    return (\n      x >= this.x &&\n      y >= this.y &&\n      x <= this.x + this.width &&\n      y <= this.y + this.height\n    );\n  }\n}\n\nclass Slider extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      containerSize: { width: 0, height: 0 },\n      trackSize: { width: 0, height: 0 },\n      thumbSize: { width: 0, height: 0 },\n      allMeasured: false,\n      value: new Animated.Value(getBoundedValue(props)),\n    };\n\n    this.panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: this.handleStartShouldSetPanResponder.bind(\n        this\n      ),\n      onMoveShouldSetPanResponder: this.handleMoveShouldSetPanResponder.bind(\n        this\n      ),\n      onPanResponderGrant: this.handlePanResponderGrant.bind(this),\n      onPanResponderMove: this.handlePanResponderMove.bind(this),\n      onPanResponderRelease: this.handlePanResponderEnd.bind(this),\n      onPanResponderTerminationRequest: this.handlePanResponderRequestEnd.bind(\n        this\n      ),\n      onPanResponderTerminate: this.handlePanResponderEnd.bind(this),\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const newValue = getBoundedValue(this.props);\n\n    if (prevProps.value !== newValue) {\n      if (this.props.animateTransitions) {\n        this.setCurrentValueAnimated(newValue);\n      } else {\n        this.setCurrentValue(newValue);\n      }\n    }\n  }\n\n  setCurrentValue(value) {\n    this.state.value.setValue(value);\n  }\n\n  setCurrentValueAnimated(value) {\n    const { animationType } = this.props;\n    const animationConfig = Object.assign(\n      {},\n      DEFAULT_ANIMATION_CONFIGS[animationType],\n      this.props.animationConfig,\n      {\n        toValue: value,\n      }\n    );\n\n    Animated[animationType](this.state.value, animationConfig).start();\n  }\n\n  handleMoveShouldSetPanResponder(/* e: Object, gestureState: Object */) {\n    // Should we become active when the user moves a touch over the thumb?\n    return false;\n  }\n\n  handlePanResponderGrant(/* e: Object, gestureState: Object */) {\n    this._previousLeft = this.getThumbLeft(this.getCurrentValue());\n    this.fireChangeEvent('onSlidingStart');\n  }\n\n  handlePanResponderMove(_, gestureState) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.setCurrentValue(this.getValue(gestureState));\n    this.fireChangeEvent('onValueChange');\n  }\n\n  handlePanResponderRequestEnd() {\n    // Should we allow another component to take over this pan?\n    return false;\n  }\n\n  handlePanResponderEnd(_, gestureState) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.setCurrentValue(this.getValue(gestureState));\n    this.fireChangeEvent('onSlidingComplete');\n  }\n\n  thumbHitTest({ nativeEvent }) {\n    const thumbTouchRect = this.getThumbTouchRect();\n    return thumbTouchRect.containsPoint(\n      nativeEvent.locationX,\n      nativeEvent.locationY\n    );\n  }\n\n  handleStartShouldSetPanResponder(e /* gestureState: Object */) {\n    // Should we become active when the user presses down on the thumb?\n    return this.thumbHitTest(e);\n  }\n\n  fireChangeEvent(event) {\n    if (this.props[event]) {\n      this.props[event](this.getCurrentValue());\n    }\n  }\n\n  getTouchOverflowSize() {\n    const { thumbSize, allMeasured, containerSize } = this.state;\n    const { thumbTouchSize } = this.props;\n\n    const size = {};\n    if (allMeasured === true) {\n      size.width = Math.max(0, thumbTouchSize.width - thumbSize.width);\n      size.height = Math.max(0, thumbTouchSize.height - containerSize.height);\n    }\n\n    return size;\n  }\n\n  getTouchOverflowStyle() {\n    const { width, height } = this.getTouchOverflowSize();\n\n    const touchOverflowStyle = {};\n    if (width !== undefined && height !== undefined) {\n      const verticalMargin = -height / 2;\n      touchOverflowStyle.marginTop = verticalMargin;\n      touchOverflowStyle.marginBottom = verticalMargin;\n\n      const horizontalMargin = -width / 2;\n      touchOverflowStyle.marginLeft = horizontalMargin;\n      touchOverflowStyle.marginRight = horizontalMargin;\n    }\n\n    if (this.props.debugTouchArea === true) {\n      touchOverflowStyle.backgroundColor = 'orange';\n      touchOverflowStyle.opacity = 0.5;\n    }\n\n    return touchOverflowStyle;\n  }\n\n  handleMeasure(name, x) {\n    const { width: layoutWidth, height: layoutHeight } = x.nativeEvent.layout;\n    const width =\n      this.props.orientation === 'vertical' ? layoutHeight : layoutWidth;\n    const height =\n      this.props.orientation === 'vertical' ? layoutWidth : layoutHeight;\n    const size = { width, height };\n    const storeName = `_${name}`;\n    const currentSize = this[storeName];\n    if (\n      currentSize &&\n      width === currentSize.width &&\n      height === currentSize.height\n    ) {\n      return;\n    }\n    this[storeName] = size;\n\n    if (this._containerSize && this._trackSize && this._thumbSize) {\n      this.setState({\n        containerSize: this._containerSize,\n        trackSize: this._trackSize,\n        thumbSize: this._thumbSize,\n        allMeasured: true,\n      });\n    }\n  }\n\n  measureContainer = x => {\n    this.handleMeasure('containerSize', x);\n  };\n\n  measureTrack = x => {\n    this.handleMeasure('trackSize', x);\n  };\n\n  measureThumb = x => {\n    this.handleMeasure('thumbSize', x);\n  };\n\n  getValue(gestureState) {\n    const length = this.state.containerSize.width - this.state.thumbSize.width;\n    const thumbLeft =\n      this._previousLeft +\n      (this.props.orientation === 'vertical'\n        ? gestureState.dy\n        : gestureState.dx);\n\n    const ratio = thumbLeft / length;\n\n    if (this.props.step) {\n      return Math.max(\n        this.props.minimumValue,\n        Math.min(\n          this.props.maximumValue,\n          this.props.minimumValue +\n            Math.round(\n              (ratio * (this.props.maximumValue - this.props.minimumValue)) /\n                this.props.step\n            ) *\n              this.props.step\n        )\n      );\n    }\n    return Math.max(\n      this.props.minimumValue,\n      Math.min(\n        this.props.maximumValue,\n        ratio * (this.props.maximumValue - this.props.minimumValue) +\n          this.props.minimumValue\n      )\n    );\n  }\n\n  getCurrentValue() {\n    return this.state.value.__getValue();\n  }\n\n  getRatio(value) {\n    return (\n      (value - this.props.minimumValue) /\n      (this.props.maximumValue - this.props.minimumValue)\n    );\n  }\n\n  getThumbLeft(value) {\n    const ratio = this.getRatio(value);\n    return (\n      ratio * (this.state.containerSize.width - this.state.thumbSize.width)\n    );\n  }\n\n  getThumbTouchRect() {\n    const { thumbSize, containerSize } = this.state;\n    const { thumbTouchSize } = this.props;\n    const touchOverflowSize = this.getTouchOverflowSize();\n\n    if (this.props.orientation === 'vertical') {\n      return new Rect(\n        touchOverflowSize.height / 2 +\n          (containerSize.height - thumbTouchSize.height) / 2,\n        touchOverflowSize.width / 2 +\n          this.getThumbLeft(this.getCurrentValue()) +\n          (thumbSize.width - thumbTouchSize.width) / 2,\n        thumbTouchSize.width,\n        thumbTouchSize.height\n      );\n    }\n    return new Rect(\n      touchOverflowSize.width / 2 +\n        this.getThumbLeft(this.getCurrentValue()) +\n        (thumbSize.width - thumbTouchSize.width) / 2,\n      touchOverflowSize.height / 2 +\n        (containerSize.height - thumbTouchSize.height) / 2,\n      thumbTouchSize.width,\n      thumbTouchSize.height\n    );\n  }\n\n  renderDebugThumbTouchRect(thumbLeft) {\n    const thumbTouchRect = this.getThumbTouchRect();\n    const positionStyle = {\n      left: thumbLeft,\n      top: thumbTouchRect.y,\n      width: thumbTouchRect.width,\n      height: thumbTouchRect.height,\n    };\n    return <Animated.View style={positionStyle} pointerEvents=\"none\" />;\n  }\n\n  getMinimumTrackStyles(thumbStart) {\n    const { thumbSize, trackSize } = this.state;\n    const minimumTrackStyle = {\n      position: 'absolute',\n    };\n\n    if (this.props.orientation === 'vertical') {\n      minimumTrackStyle.height = Animated.add(thumbStart, thumbSize.height / 2);\n      minimumTrackStyle.marginLeft = -trackSize.width;\n    } else {\n      minimumTrackStyle.width = Animated.add(thumbStart, thumbSize.width / 2);\n      minimumTrackStyle.marginTop = -trackSize.height;\n    }\n    return minimumTrackStyle;\n  }\n\n  getThumbPositionStyles(thumbStart) {\n    if (this.props.orientation === 'vertical') {\n      return [\n        {\n          translateX:\n            -(this.state.trackSize.height + this.state.thumbSize.height) / 2,\n        },\n        { translateY: thumbStart },\n      ];\n    }\n    return [\n      { translateX: thumbStart },\n      {\n        translateY:\n          -(this.state.trackSize.height + this.state.thumbSize.height) / 2,\n      },\n    ];\n  }\n\n  render() {\n    const {\n      minimumValue,\n      maximumValue,\n      minimumTrackTintColor,\n      maximumTrackTintColor,\n      thumbTintColor,\n      containerStyle,\n      style,\n      trackStyle,\n      thumbStyle,\n      debugTouchArea,\n      orientation,\n      ...other\n    } = this.props;\n\n    const { value, containerSize, thumbSize, allMeasured } = this.state;\n\n    const mainStyles = containerStyle || styles;\n    const thumbStart = value.interpolate({\n      inputRange: [minimumValue, maximumValue],\n      outputRange: [0, containerSize.width - thumbSize.width],\n      // extrapolate: 'clamp',\n    });\n\n    const valueVisibleStyle = {};\n    if (!allMeasured) {\n      valueVisibleStyle.height = 0;\n      valueVisibleStyle.width = 0;\n    }\n\n    const minimumTrackStyle = {\n      ...this.getMinimumTrackStyles(thumbStart),\n      backgroundColor: minimumTrackTintColor,\n      ...valueVisibleStyle,\n    };\n\n    const thumbStyleTransform = (thumbStyle && thumbStyle.transform) || [];\n    const touchOverflowStyle = this.getTouchOverflowStyle();\n    return (\n      <View\n        {...other}\n        style={StyleSheet.flatten([\n          orientation === 'vertical'\n            ? mainStyles.containerVertical\n            : mainStyles.containerHorizontal,\n          style,\n        ])}\n        onLayout={this.measureContainer}\n      >\n        <View\n          style={StyleSheet.flatten([\n            mainStyles.track,\n            orientation === 'vertical'\n              ? mainStyles.trackVertical\n              : mainStyles.trackHorizontal,\n            trackStyle,\n            { backgroundColor: maximumTrackTintColor },\n          ])}\n          onLayout={this.measureTrack}\n        />\n        <Animated.View\n          style={StyleSheet.flatten([\n            mainStyles.track,\n            orientation === 'vertical'\n              ? mainStyles.trackVertical\n              : mainStyles.trackHorizontal,\n            trackStyle,\n            minimumTrackStyle,\n          ])}\n        />\n        <Animated.View\n          testID=\"sliderThumb\"\n          onLayout={this.measureThumb}\n          style={StyleSheet.flatten([\n            { backgroundColor: thumbTintColor },\n            mainStyles.thumb,\n            orientation === 'vertical'\n              ? mainStyles.thumbVertical(trackStyle && trackStyle.width)\n              : mainStyles.thumbHorizontal(trackStyle && trackStyle.height),\n            thumbStyle,\n            {\n              transform: [\n                ...this.getThumbPositionStyles(thumbStart),\n                ...thumbStyleTransform,\n              ],\n              ...valueVisibleStyle,\n            },\n          ])}\n        />\n        <View\n          style={StyleSheet.flatten([styles.touchArea, touchOverflowStyle])}\n          {...this.panResponder.panHandlers}\n        >\n          {debugTouchArea === true &&\n            this.renderDebugThumbTouchRect(thumbStart)}\n        </View>\n      </View>\n    );\n  }\n}\n\nSlider.propTypes = {\n  /**\n   * Initial value of the slider. The value should be between minimumValue\n   * and maximumValue, which default to 0 and 1 respectively.\n   * Default value is 0.\n   *\n   * *This is not a controlled component*, e.g. if you don't update\n   * the value, the component won't be reset to its inital value.\n   */\n  value: PropTypes.number,\n\n  /**\n   * If true the user won't be able to move the slider.\n   * Default value is false.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Initial minimum value of the slider. Default value is 0.\n   */\n  minimumValue: PropTypes.number,\n\n  /**\n   * Initial maximum value of the slider. Default value is 1.\n   */\n  maximumValue: PropTypes.number,\n\n  /**\n   * Step value of the slider. The value should be between 0 and\n   * (maximumValue - minimumValue). Default value is 0.\n   */\n  step: PropTypes.number,\n\n  /**\n   * The color used for the track to the left of the button. Overrides the\n   * default blue gradient image.\n   */\n  minimumTrackTintColor: PropTypes.string,\n\n  /**\n   * The color used for the track to the right of the button. Overrides the\n   * default blue gradient image.\n   */\n  maximumTrackTintColor: PropTypes.string,\n\n  /**\n   * The color used for the thumb.\n   */\n  thumbTintColor: PropTypes.string,\n\n  /**\n   * The size of the touch area that allows moving the thumb.\n   * The touch area has the same center has the visible thumb.\n   * This allows to have a visually small thumb while still allowing the user\n   * to move it easily.\n   * The default is {width: 40, height: 40}.\n   */\n  thumbTouchSize: PropTypes.shape({\n    width: PropTypes.number,\n    height: PropTypes.number,\n  }),\n\n  /**\n   * Callback continuously called while the user is dragging the slider.\n   */\n  onValueChange: PropTypes.func,\n\n  /**\n   * Callback called when the user starts changing the value (e.g. when\n   * the slider is pressed).\n   */\n  onSlidingStart: PropTypes.func,\n\n  /**\n   * Callback called when the user finishes changing the value (e.g. when\n   * the slider is released).\n   */\n  onSlidingComplete: PropTypes.func,\n\n  /**\n   * The style applied to the slider container.\n   */\n  style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n\n  /**\n   * The style applied to the track.\n   */\n  trackStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n\n  /**\n   * The style applied to the thumb.\n   */\n  thumbStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n\n  /**\n   * Set this to true to visually see the thumb touch rect in green.\n   */\n  debugTouchArea: PropTypes.bool,\n\n  /**\n   * Set to true to animate values with default 'timing' animation type\n   */\n  animateTransitions: PropTypes.bool,\n\n  /**\n   * Custom Animation type. 'spring' or 'timing'.\n   */\n  animationType: PropTypes.oneOf(['spring', 'timing']),\n\n  /**\n   * Choose the orientation. 'horizontal' or 'vertical'.\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * Used to configure the animation parameters.  These are the same parameters in the Animated library.\n   */\n  animationConfig: PropTypes.object,\n  containerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n};\n\nSlider.defaultProps = {\n  value: 0,\n  minimumValue: 0,\n  maximumValue: 1,\n  step: 0,\n  minimumTrackTintColor: '#3f3f3f',\n  maximumTrackTintColor: '#b3b3b3',\n  thumbTintColor: 'red',\n  thumbTouchSize: { width: 40, height: 40 },\n  debugTouchArea: false,\n  animationType: 'timing',\n  orientation: 'horizontal',\n};\n\nconst styles = StyleSheet.create({\n  containerHorizontal: {\n    height: 40,\n    justifyContent: 'center',\n  },\n  containerVertical: {\n    width: 40,\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  track: {\n    borderRadius: TRACK_SIZE / 2,\n  },\n  trackHorizontal: {\n    height: TRACK_SIZE,\n  },\n  trackVertical: {\n    flex: 1,\n    width: TRACK_SIZE,\n  },\n  thumb: {\n    position: 'absolute',\n    width: THUMB_SIZE,\n    height: THUMB_SIZE,\n    borderRadius: THUMB_SIZE / 2,\n  },\n  thumbHorizontal: height => ({\n    top: 22 + (height ? (height - 4) / 2 : 0),\n  }),\n  thumbVertical: width => ({\n    left: 22 + (width ? (width - 4) / 2 : 0),\n  }),\n  touchArea: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  debugThumbTouchArea: {\n    position: 'absolute',\n    backgroundColor: 'green',\n    opacity: 0.5,\n  },\n});\n\nexport { Slider };\nexport default withTheme(Slider, 'Slider');\n"]},"metadata":{},"sourceType":"module"}