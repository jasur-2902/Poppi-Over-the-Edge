{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { CodedError } from '@unimodules/core';\nimport { FlipType } from \"./ImageManipulator.types\";\n\nfunction resampleSingle(canvas, width, height) {\n  var resizeCanvas = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var widthSource = canvas.width;\n  var heightSource = canvas.height;\n  width = Math.round(width);\n  height = Math.round(height);\n  var wRatio = widthSource / width;\n  var hRatio = heightSource / height;\n  var wRatioHalf = Math.ceil(wRatio / 2);\n  var hRatioHalf = Math.ceil(hRatio / 2);\n  var ctx = getContext(canvas);\n  var img = ctx.getImageData(0, 0, widthSource, heightSource);\n  var img2 = ctx.createImageData(width, height);\n  var data = img.data;\n  var data2 = img2.data;\n\n  for (var j = 0; j < height; j++) {\n    for (var i = 0; i < width; i++) {\n      var x2 = (i + j * width) * 4;\n      var weight = 0;\n      var weights = 0;\n      var weightsAlpha = 0;\n      var gx_r = 0;\n      var gx_g = 0;\n      var gx_b = 0;\n      var gx_a = 0;\n      var yCenter = (j + 0.5) * hRatio;\n      var yy_start = Math.floor(j * hRatio);\n      var yy_stop = Math.ceil((j + 1) * hRatio);\n\n      for (var yy = yy_start; yy < yy_stop; yy++) {\n        var dy = Math.abs(yCenter - (yy + 0.5)) / hRatioHalf;\n        var center_x = (i + 0.5) * wRatio;\n        var w0 = dy * dy;\n        var xx_start = Math.floor(i * wRatio);\n        var xx_stop = Math.ceil((i + 1) * wRatio);\n\n        for (var xx = xx_start; xx < xx_stop; xx++) {\n          var dx = Math.abs(center_x - (xx + 0.5)) / wRatioHalf;\n          var w = Math.sqrt(w0 + dx * dx);\n\n          if (w >= 1) {\n            continue;\n          }\n\n          weight = 2 * w * w * w - 3 * w * w + 1;\n          var xPosition = 4 * (xx + yy * widthSource);\n          gx_a += weight * data[xPosition + 3];\n          weightsAlpha += weight;\n\n          if (data[xPosition + 3] < 255) {\n            weight = weight * data[xPosition + 3] / 250;\n          }\n\n          gx_r += weight * data[xPosition];\n          gx_g += weight * data[xPosition + 1];\n          gx_b += weight * data[xPosition + 2];\n          weights += weight;\n        }\n      }\n\n      data2[x2] = gx_r / weights;\n      data2[x2 + 1] = gx_g / weights;\n      data2[x2 + 2] = gx_b / weights;\n      data2[x2 + 3] = gx_a / weightsAlpha;\n    }\n  }\n\n  if (resizeCanvas) {\n    canvas.width = width;\n    canvas.height = height;\n  } else {\n    ctx.clearRect(0, 0, widthSource, heightSource);\n  }\n\n  ctx.putImageData(img2, 0, 0);\n}\n\nfunction sizeFromAngle(width, height, angle) {\n  var radians = angle * Math.PI / 180;\n  var c = Math.cos(radians);\n  var s = Math.sin(radians);\n\n  if (s < 0) {\n    s = -s;\n  }\n\n  if (c < 0) {\n    c = -c;\n  }\n\n  return {\n    width: height * s + width * c,\n    height: height * c + width * s\n  };\n}\n\nfunction cropImage(canvas, image) {\n  var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var width = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  var height = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n  var context = getContext(canvas);\n  context.save();\n  context.drawImage(image, x, y, width, height, 0, 0, width, height);\n}\n\nfunction drawImage(canvas, img) {\n  var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var angle = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  var xFlip = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  var yFlip = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n  var width = arguments.length > 7 ? arguments[7] : undefined;\n  var height = arguments.length > 8 ? arguments[8] : undefined;\n  var context = getContext(canvas);\n  context.save();\n\n  if (width == null) {\n    width = img.naturalWidth;\n  }\n\n  if (height == null) {\n    height = img.naturalHeight;\n  }\n\n  context.translate(x + canvas.width / 2, y + canvas.height / 2);\n  var radians = 2 * Math.PI - angle * Math.PI / 180;\n  context.rotate(radians);\n  var xScale = xFlip ? -1 : 1;\n  var yScale = yFlip ? -1 : 1;\n  context.scale(xScale, yScale);\n  context.drawImage(img, -img.naturalWidth / 2, -img.naturalHeight / 2, img.naturalWidth, img.naturalHeight);\n  context.restore();\n  return context;\n}\n\nfunction getContext(canvas) {\n  var ctx = canvas.getContext('2d');\n\n  if (!ctx) {\n    throw new CodedError('ERR_IMAGE_MANIPULATOR', 'Failed to create canvas context');\n  }\n\n  return ctx;\n}\n\nfunction getResults(canvas, options) {\n  var base64;\n\n  if (options) {\n    var {\n      format = 'png'\n    } = options;\n\n    if (options.format === 'png' && options.compress !== undefined) {\n      console.warn('compress is not supported with png format.');\n    }\n\n    var quality = Math.min(1, Math.max(0, options.compress || 1));\n    base64 = canvas.toDataURL('image/' + format, quality);\n  } else {\n    base64 = canvas.toDataURL();\n  }\n\n  return {\n    uri: base64,\n    width: canvas.width,\n    height: canvas.height,\n    base64\n  };\n}\n\nfunction loadImageAsync(uri) {\n  return new Promise((resolve, reject) => {\n    var imageSource = new Image();\n\n    imageSource.onload = () => resolve(imageSource);\n\n    imageSource.onerror = () => reject(imageSource);\n\n    imageSource.src = uri;\n  });\n}\n\nfunction manipulateWithActionAsync(_x, _x2, _x3) {\n  return _manipulateWithActionAsync.apply(this, arguments);\n}\n\nfunction _manipulateWithActionAsync() {\n  _manipulateWithActionAsync = _asyncToGenerator(function* (uri, action, options) {\n    var canvas = document.createElement('canvas');\n    var imageSource = yield loadImageAsync(uri);\n    canvas.width = imageSource.naturalWidth;\n    canvas.height = imageSource.naturalHeight;\n\n    if (action.crop) {\n      var {\n        crop\n      } = action;\n      var {\n        originX = 0,\n        originY = 0,\n        width = 0,\n        height = 0\n      } = crop;\n\n      var clamp = (value, max) => Math.max(0, Math.min(max, value));\n\n      width = clamp(width, canvas.width);\n      height = clamp(height, canvas.height);\n      originX = clamp(originX, canvas.width);\n      originY = clamp(originY, canvas.height);\n      width = Math.min(originX + width, canvas.width);\n      height = Math.min(originY + height, canvas.height);\n\n      if (originX - width === 0 || originY - height === 0) {\n        throw new CodedError('ERR_IMAGE_MANIPULATOR_CROP', 'Crop size must be greater than 0: ' + JSON.stringify(crop, null, 2));\n      }\n\n      canvas.width = width;\n      canvas.height = height;\n      cropImage(canvas, imageSource, originX, originY, width, height);\n    } else if (action.resize) {\n      var {\n        resize\n      } = action;\n      var {\n        width: _width,\n        height: _height\n      } = resize;\n      var imageRatio = imageSource.naturalWidth / imageSource.naturalHeight;\n      var requestedWidth = 0;\n      var requestedHeight = 0;\n\n      if (_width !== undefined) {\n        requestedWidth = _width;\n        requestedHeight = requestedWidth / imageRatio;\n      }\n\n      if (_height !== undefined) {\n        requestedHeight = _height;\n\n        if (requestedWidth === 0) {\n          requestedWidth = requestedHeight * imageRatio;\n        }\n      }\n\n      var context = getContext(canvas);\n      context.save();\n      context.drawImage(imageSource, 0, 0, imageSource.naturalWidth, imageSource.naturalHeight);\n      resampleSingle(canvas, requestedWidth, requestedHeight, true);\n    } else if (action.flip !== undefined) {\n      var {\n        flip\n      } = action;\n      var xFlip = flip === FlipType.Horizontal;\n      var yFlip = flip === FlipType.Vertical;\n      drawImage(canvas, imageSource, 0, 0, 0, xFlip, yFlip);\n    } else if (action.rotate !== undefined) {\n      var {\n        rotate\n      } = action;\n      var {\n        width: _width2,\n        height: _height2\n      } = sizeFromAngle(imageSource.naturalWidth, imageSource.naturalHeight, rotate);\n      canvas.width = _width2;\n      canvas.height = _height2;\n      drawImage(canvas, imageSource, 0, 0, rotate, false, false, _width2, _height2);\n    } else {\n      var _context = getContext(canvas);\n\n      _context.save();\n\n      _context.drawImage(imageSource, 0, 0, imageSource.naturalWidth, imageSource.naturalHeight);\n    }\n\n    return getResults(canvas, options);\n  });\n  return _manipulateWithActionAsync.apply(this, arguments);\n}\n\nexport default {\n  get name() {\n    return 'ExpoImageManipulator';\n  },\n\n  manipulateAsync(uri) {\n    var _arguments = arguments;\n    return _asyncToGenerator(function* () {\n      var actions = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : [];\n      var options = _arguments.length > 2 ? _arguments[2] : undefined;\n\n      if (!actions.length) {\n        var canvas = document.createElement('canvas');\n        var imageSource = yield loadImageAsync(uri);\n        canvas.width = imageSource.naturalWidth;\n        canvas.height = imageSource.naturalHeight;\n        var ctx = getContext(canvas);\n        ctx.drawImage(imageSource, 0, 0, imageSource.naturalWidth, imageSource.naturalHeight);\n        return getResults(canvas, options);\n      } else {\n        var output;\n\n        for (var i = 0; i < actions.length; i++) {\n          var action = actions[i];\n\n          var _options = void 0;\n\n          if (i === actions.length - 1) {\n            _options = options;\n          }\n\n          output = yield manipulateWithActionAsync(uri || output.uri, action, _options);\n        }\n\n        return output;\n      }\n    })();\n  }\n\n};","map":{"version":3,"sources":["../src/ExpoImageManipulator.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError } from '@unimodules/core';\nimport {\n  ImageResult,\n  SaveOptions,\n  Action,\n  ActionCrop,\n  ActionResize,\n  ActionFlip,\n  ActionRotate,\n  FlipType,\n} from './ImageManipulator.types';\n\n/**\n * Hermite resize - fast image resize/resample using Hermite filter. 1 cpu version!\n * https://stackoverflow.com/a/18320662/4047926\n *\n * @param {HtmlElement} canvas\n * @param {int} width\n * @param {int} height\n * @param {boolean} resizeCanvas if true, canvas will be resized. Optional.\n */\nfunction resampleSingle(\n  canvas: HTMLCanvasElement,\n  width: number,\n  height: number,\n  resizeCanvas: boolean = false\n): void {\n  const widthSource = canvas.width;\n  const heightSource = canvas.height;\n  width = Math.round(width);\n  height = Math.round(height);\n\n  const wRatio = widthSource / width;\n  const hRatio = heightSource / height;\n  const wRatioHalf = Math.ceil(wRatio / 2);\n  const hRatioHalf = Math.ceil(hRatio / 2);\n\n  let ctx = getContext(canvas);\n\n  let img = ctx.getImageData(0, 0, widthSource, heightSource);\n  let img2 = ctx.createImageData(width, height);\n  let data = img.data;\n  let data2 = img2.data;\n\n  for (let j = 0; j < height; j++) {\n    for (let i = 0; i < width; i++) {\n      let x2 = (i + j * width) * 4;\n      let weight = 0;\n      let weights = 0;\n      let weightsAlpha = 0;\n      let gx_r = 0;\n      let gx_g = 0;\n      let gx_b = 0;\n      let gx_a = 0;\n      let yCenter = (j + 0.5) * hRatio;\n      let yy_start = Math.floor(j * hRatio);\n      let yy_stop = Math.ceil((j + 1) * hRatio);\n      for (let yy = yy_start; yy < yy_stop; yy++) {\n        let dy = Math.abs(yCenter - (yy + 0.5)) / hRatioHalf;\n        let center_x = (i + 0.5) * wRatio;\n        let w0 = dy * dy; //pre-calc part of w\n        let xx_start = Math.floor(i * wRatio);\n        let xx_stop = Math.ceil((i + 1) * wRatio);\n        for (let xx = xx_start; xx < xx_stop; xx++) {\n          let dx = Math.abs(center_x - (xx + 0.5)) / wRatioHalf;\n          let w = Math.sqrt(w0 + dx * dx);\n          if (w >= 1) {\n            //pixel too far\n            continue;\n          }\n          //hermite filter\n          weight = 2 * w * w * w - 3 * w * w + 1;\n          let xPosition = 4 * (xx + yy * widthSource);\n          //alpha\n          gx_a += weight * data[xPosition + 3];\n          weightsAlpha += weight;\n          //colors\n          if (data[xPosition + 3] < 255) {\n            weight = (weight * data[xPosition + 3]) / 250;\n          }\n          gx_r += weight * data[xPosition];\n          gx_g += weight * data[xPosition + 1];\n          gx_b += weight * data[xPosition + 2];\n          weights += weight;\n        }\n      }\n      data2[x2] = gx_r / weights;\n      data2[x2 + 1] = gx_g / weights;\n      data2[x2 + 2] = gx_b / weights;\n      data2[x2 + 3] = gx_a / weightsAlpha;\n    }\n  }\n  //clear and resize canvas\n  if (resizeCanvas) {\n    canvas.width = width;\n    canvas.height = height;\n  } else {\n    ctx.clearRect(0, 0, widthSource, heightSource);\n  }\n\n  //draw\n  ctx.putImageData(img2, 0, 0);\n}\n\nfunction sizeFromAngle(\n  width: number,\n  height: number,\n  angle: number\n): { width: number; height: number } {\n  const radians = (angle * Math.PI) / 180;\n  let c = Math.cos(radians);\n  let s = Math.sin(radians);\n  if (s < 0) {\n    s = -s;\n  }\n  if (c < 0) {\n    c = -c;\n  }\n  return { width: height * s + width * c, height: height * c + width * s };\n}\n\nfunction cropImage(\n  canvas: HTMLCanvasElement,\n  image: HTMLImageElement,\n  x: number = 0,\n  y: number = 0,\n  width: number = 0,\n  height: number = 0\n): void {\n  const context = getContext(canvas);\n  context.save();\n  context.drawImage(image, x, y, width, height, 0, 0, width, height);\n}\n\nfunction drawImage(\n  canvas: HTMLCanvasElement,\n  img: HTMLImageElement,\n  x: number = 0,\n  y: number = 0,\n  angle: number = 0,\n  xFlip: boolean = false,\n  yFlip: boolean = false,\n  width?: number,\n  height?: number\n): CanvasRenderingContext2D {\n  const context = getContext(canvas);\n  context.save();\n\n  if (width == null) {\n    width = img.naturalWidth as number;\n  }\n  if (height == null) {\n    height = img.naturalHeight as number;\n  }\n\n  // Set the origin to the center of the image\n  context.translate(x + canvas.width / 2, y + canvas.height / 2);\n\n  // Rotate the canvas around the origin\n  const radians = 2 * Math.PI - (angle * Math.PI) / 180;\n  context.rotate(radians);\n\n  // Flip/flop the canvas\n  const xScale = xFlip ? -1 : 1;\n  const yScale = yFlip ? -1 : 1;\n\n  context.scale(xScale, yScale);\n\n  // Draw the image\n  context.drawImage(\n    img,\n    -img.naturalWidth / 2,\n    -img.naturalHeight / 2,\n    img.naturalWidth,\n    img.naturalHeight\n  );\n\n  context.restore();\n  return context;\n}\n\nfunction getContext(canvas: HTMLCanvasElement): CanvasRenderingContext2D {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    throw new CodedError('ERR_IMAGE_MANIPULATOR', 'Failed to create canvas context');\n  }\n  return ctx;\n}\n\nfunction getResults(canvas: HTMLCanvasElement, options?: SaveOptions): ImageResult {\n  let base64;\n  if (options) {\n    const { format = 'png' } = options;\n    if (options.format === 'png' && options.compress !== undefined) {\n      console.warn('compress is not supported with png format.');\n    }\n    const quality = Math.min(1, Math.max(0, options.compress || 1));\n    base64 = canvas.toDataURL('image/' + format, quality);\n  } else {\n    // defaults to PNG with no loss\n    base64 = canvas.toDataURL();\n  }\n  return {\n    uri: base64,\n    width: canvas.width,\n    height: canvas.height,\n    base64,\n  };\n}\n\nfunction loadImageAsync(uri: string): Promise<HTMLImageElement> {\n  return new Promise((resolve, reject) => {\n    const imageSource = new Image();\n    imageSource.onload = () => resolve(imageSource);\n    imageSource.onerror = () => reject(imageSource);\n    imageSource.src = uri;\n  });\n}\n\nasync function manipulateWithActionAsync(\n  uri: string,\n  action: Action,\n  options: SaveOptions\n): Promise<ImageResult> {\n  let canvas = document.createElement('canvas');\n  const imageSource = await loadImageAsync(uri);\n  canvas.width = imageSource.naturalWidth;\n  canvas.height = imageSource.naturalHeight;\n\n  if ((action as ActionCrop).crop) {\n    const { crop } = action as ActionCrop;\n    // ensure values are defined.\n    let { originX = 0, originY = 0, width = 0, height = 0 } = crop;\n    const clamp = (value, max) => Math.max(0, Math.min(max, value));\n    // lock within bounds.\n    width = clamp(width, canvas.width);\n    height = clamp(height, canvas.height);\n    originX = clamp(originX, canvas.width);\n    originY = clamp(originY, canvas.height);\n\n    // lock sum of crop.\n    width = Math.min(originX + width, canvas.width);\n    height = Math.min(originY + height, canvas.height);\n\n    if (originX - width === 0 || originY - height === 0) {\n      throw new CodedError(\n        'ERR_IMAGE_MANIPULATOR_CROP',\n        'Crop size must be greater than 0: ' + JSON.stringify(crop, null, 2)\n      );\n    }\n\n    // change size of canvas.\n    canvas.width = width;\n    canvas.height = height;\n\n    cropImage(canvas, imageSource, originX, originY, width, height);\n  } else if ((action as ActionResize).resize) {\n    const { resize } = action as ActionResize;\n    const { width, height } = resize;\n\n    const imageRatio = imageSource.naturalWidth / imageSource.naturalHeight;\n\n    let requestedWidth: number = 0;\n    let requestedHeight: number = 0;\n    if (width !== undefined) {\n      requestedWidth = width;\n      requestedHeight = requestedWidth / imageRatio;\n    }\n    if (height !== undefined) {\n      requestedHeight = height;\n      if (requestedWidth === 0) {\n        requestedWidth = requestedHeight * imageRatio;\n      }\n    }\n\n    const context = getContext(canvas);\n    context.save();\n    context.drawImage(imageSource, 0, 0, imageSource.naturalWidth, imageSource.naturalHeight);\n\n    resampleSingle(canvas, requestedWidth, requestedHeight, true);\n  } else if ((action as ActionFlip).flip !== undefined) {\n    const { flip } = action as ActionFlip;\n    const xFlip = flip === FlipType.Horizontal;\n    const yFlip = flip === FlipType.Vertical;\n    drawImage(canvas, imageSource, 0, 0, 0, xFlip, yFlip);\n  } else if ((action as ActionRotate).rotate !== undefined) {\n    const { rotate } = action as ActionRotate;\n    const { width, height } = sizeFromAngle(\n      imageSource.naturalWidth,\n      imageSource.naturalHeight,\n      rotate\n    );\n    canvas.width = width;\n    canvas.height = height;\n    drawImage(canvas, imageSource, 0, 0, rotate, false, false, width, height);\n  } else {\n    const context = getContext(canvas);\n    context.save();\n    context.drawImage(imageSource, 0, 0, imageSource.naturalWidth, imageSource.naturalHeight);\n  }\n  return getResults(canvas, options);\n}\n\nexport default {\n  get name(): string {\n    return 'ExpoImageManipulator';\n  },\n  async manipulateAsync(\n    uri: string,\n    actions: Action[] = [],\n    options: SaveOptions\n  ): Promise<ImageResult> {\n    if (!actions.length) {\n      let canvas = document.createElement('canvas');\n      const imageSource = await loadImageAsync(uri);\n      canvas.width = imageSource.naturalWidth;\n      canvas.height = imageSource.naturalHeight;\n      const ctx = getContext(canvas);\n      ctx.drawImage(imageSource, 0, 0, imageSource.naturalWidth, imageSource.naturalHeight);\n      return getResults(canvas, options);\n    } else {\n      let output: ImageResult;\n      for (let i = 0; i < actions.length; i++) {\n        const action = actions[i];\n        let _options;\n        if (i === actions.length - 1) {\n          _options = options;\n        }\n        output = await manipulateWithActionAsync(uri || output!.uri, action, _options);\n      }\n      return output!;\n    }\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}