{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport Share from \"react-native-web/dist/exports/Share\";\nimport { Platform } from 'expo-core';\nimport UUID from 'uuid-js';\nimport ExpoContacts from \"./ExpoContacts\";\nimport { UnavailabilityError } from 'expo-errors';\nvar isIOS = Platform.OS === 'ios';\nexport function shareContactAsync(_x, _x2) {\n  return _shareContactAsync.apply(this, arguments);\n}\n\nfunction _shareContactAsync() {\n  _shareContactAsync = _asyncToGenerator(function* (contactId, message) {\n    var shareOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (!ExpoContacts.shareContactAsync) {\n      throw new UnavailabilityError('Contacts', 'shareContactAsync');\n    }\n\n    if (isIOS) {\n      var url = yield writeContactToFileAsync({\n        id: contactId\n      });\n      Share.share({\n        url,\n        message\n      }, shareOptions);\n    } else {\n      return yield ExpoContacts.shareContactAsync(contactId, message);\n    }\n  });\n  return _shareContactAsync.apply(this, arguments);\n}\n\nexport function getContactsAsync() {\n  return _getContactsAsync.apply(this, arguments);\n}\n\nfunction _getContactsAsync() {\n  _getContactsAsync = _asyncToGenerator(function* () {\n    var contactQuery = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!ExpoContacts.getContactsAsync) {\n      throw new UnavailabilityError('Contacts', 'getContactsAsync');\n    }\n\n    return yield ExpoContacts.getContactsAsync(contactQuery);\n  });\n  return _getContactsAsync.apply(this, arguments);\n}\n\nexport function getPagedContactsAsync() {\n  return _getPagedContactsAsync.apply(this, arguments);\n}\n\nfunction _getPagedContactsAsync() {\n  _getPagedContactsAsync = _asyncToGenerator(function* () {\n    var contactQuery = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var {\n      pageSize\n    } = contactQuery,\n        nOptions = _objectWithoutProperties(contactQuery, [\"pageSize\"]);\n\n    if (pageSize && pageSize <= 0) {\n      throw new Error('Error: Contacts.getPagedContactsAsync: `pageSize` must be greater than 0');\n    }\n\n    return yield getContactsAsync(_objectSpread(_objectSpread({}, nOptions), {}, {\n      pageSize\n    }));\n  });\n  return _getPagedContactsAsync.apply(this, arguments);\n}\n\nexport function getContactByIdAsync(_x3, _x4) {\n  return _getContactByIdAsync.apply(this, arguments);\n}\n\nfunction _getContactByIdAsync() {\n  _getContactByIdAsync = _asyncToGenerator(function* (id, fields) {\n    if (!ExpoContacts.getContactsAsync) {\n      throw new UnavailabilityError('Contacts', 'getContactsAsync');\n    }\n\n    if (id == null) {\n      throw new Error('Error: Contacts.getContactByIdAsync: Please pass an ID as a parameter');\n    } else {\n      var results = yield ExpoContacts.getContactsAsync({\n        pageSize: 1,\n        pageOffset: 0,\n        fields,\n        id\n      });\n\n      if (results && results.data && results.data.length > 0) {\n        return results.data[0];\n      }\n\n      return null;\n    }\n  });\n  return _getContactByIdAsync.apply(this, arguments);\n}\n\nexport function addContactAsync(_x5, _x6) {\n  return _addContactAsync.apply(this, arguments);\n}\n\nfunction _addContactAsync() {\n  _addContactAsync = _asyncToGenerator(function* (contact, containerId) {\n    if (!ExpoContacts.addContactAsync) {\n      throw new UnavailabilityError('Contacts', 'addContactAsync');\n    }\n\n    return yield ExpoContacts.addContactAsync(contact, containerId);\n  });\n  return _addContactAsync.apply(this, arguments);\n}\n\nexport function updateContactAsync(_x7) {\n  return _updateContactAsync.apply(this, arguments);\n}\n\nfunction _updateContactAsync() {\n  _updateContactAsync = _asyncToGenerator(function* (contact) {\n    if (!ExpoContacts.updateContactAsync) {\n      throw new UnavailabilityError('Contacts', 'updateContactAsync');\n    }\n\n    return yield ExpoContacts.updateContactAsync(contact);\n  });\n  return _updateContactAsync.apply(this, arguments);\n}\n\nexport function removeContactAsync(_x8) {\n  return _removeContactAsync.apply(this, arguments);\n}\n\nfunction _removeContactAsync() {\n  _removeContactAsync = _asyncToGenerator(function* (contactId) {\n    if (!ExpoContacts.removeContactAsync) {\n      throw new UnavailabilityError('Contacts', 'removeContactAsync');\n    }\n\n    return yield ExpoContacts.removeContactAsync(contactId);\n  });\n  return _removeContactAsync.apply(this, arguments);\n}\n\nexport function writeContactToFileAsync() {\n  return _writeContactToFileAsync.apply(this, arguments);\n}\n\nfunction _writeContactToFileAsync() {\n  _writeContactToFileAsync = _asyncToGenerator(function* () {\n    var contactQuery = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!ExpoContacts.writeContactToFileAsync) {\n      throw new UnavailabilityError('Contacts', 'writeContactToFileAsync');\n    }\n\n    return yield ExpoContacts.writeContactToFileAsync(contactQuery);\n  });\n  return _writeContactToFileAsync.apply(this, arguments);\n}\n\nexport function presentFormAsync(_x9, _x10) {\n  return _presentFormAsync.apply(this, arguments);\n}\n\nfunction _presentFormAsync() {\n  _presentFormAsync = _asyncToGenerator(function* (contactId, contact) {\n    var formOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (!ExpoContacts.presentFormAsync) {\n      throw new UnavailabilityError('Contacts', 'presentFormAsync');\n    }\n\n    if (isIOS) {\n      var adjustedOptions = formOptions;\n\n      if (contactId) {\n        if (contact) {\n          contact = null;\n          console.log('Expo.Contacts.presentFormAsync: You should define either a `contact` or a `contactId` but not both.');\n        }\n\n        if (adjustedOptions.isNew !== undefined) {\n          console.log('Expo.Contacts.presentFormAsync: formOptions.isNew is not supported with `contactId`');\n        }\n      }\n\n      return yield ExpoContacts.presentFormAsync(contactId, contact, adjustedOptions);\n    } else {\n      return yield ExpoContacts.presentFormAsync(contactId, contact, formOptions);\n    }\n  });\n  return _presentFormAsync.apply(this, arguments);\n}\n\nexport function addExistingGroupToContainerAsync(_x11, _x12) {\n  return _addExistingGroupToContainerAsync.apply(this, arguments);\n}\n\nfunction _addExistingGroupToContainerAsync() {\n  _addExistingGroupToContainerAsync = _asyncToGenerator(function* (groupId, containerId) {\n    if (!ExpoContacts.addExistingGroupToContainerAsync) {\n      throw new UnavailabilityError('Contacts', 'addExistingGroupToContainerAsync');\n    }\n\n    return yield ExpoContacts.addExistingGroupToContainerAsync(groupId, containerId);\n  });\n  return _addExistingGroupToContainerAsync.apply(this, arguments);\n}\n\nexport function createGroupAsync(_x13, _x14) {\n  return _createGroupAsync.apply(this, arguments);\n}\n\nfunction _createGroupAsync() {\n  _createGroupAsync = _asyncToGenerator(function* (name, containerId) {\n    if (!ExpoContacts.createGroupAsync) {\n      throw new UnavailabilityError('Contacts', 'createGroupAsync');\n    }\n\n    name = name || UUID.create().toString();\n    if (!containerId) containerId = yield getDefaultContainerIdAsync();\n    return yield ExpoContacts.createGroupAsync(name, containerId);\n  });\n  return _createGroupAsync.apply(this, arguments);\n}\n\nexport function updateGroupNameAsync(_x15, _x16) {\n  return _updateGroupNameAsync.apply(this, arguments);\n}\n\nfunction _updateGroupNameAsync() {\n  _updateGroupNameAsync = _asyncToGenerator(function* (groupName, groupId) {\n    if (!ExpoContacts.updateGroupNameAsync) {\n      throw new UnavailabilityError('Contacts', 'updateGroupNameAsync');\n    }\n\n    return yield ExpoContacts.updateGroupNameAsync(groupName, groupId);\n  });\n  return _updateGroupNameAsync.apply(this, arguments);\n}\n\nexport function removeGroupAsync(_x17) {\n  return _removeGroupAsync.apply(this, arguments);\n}\n\nfunction _removeGroupAsync() {\n  _removeGroupAsync = _asyncToGenerator(function* (groupId) {\n    if (!ExpoContacts.removeGroupAsync) {\n      throw new UnavailabilityError('Contacts', 'removeGroupAsync');\n    }\n\n    return yield ExpoContacts.removeGroupAsync(groupId);\n  });\n  return _removeGroupAsync.apply(this, arguments);\n}\n\nexport function addExistingContactToGroupAsync(_x18, _x19) {\n  return _addExistingContactToGroupAsync.apply(this, arguments);\n}\n\nfunction _addExistingContactToGroupAsync() {\n  _addExistingContactToGroupAsync = _asyncToGenerator(function* (contactId, groupId) {\n    if (!ExpoContacts.addExistingContactToGroupAsync) {\n      throw new UnavailabilityError('Contacts', 'addExistingContactToGroupAsync');\n    }\n\n    return yield ExpoContacts.addExistingContactToGroupAsync(contactId, groupId);\n  });\n  return _addExistingContactToGroupAsync.apply(this, arguments);\n}\n\nexport function removeContactFromGroupAsync(_x20, _x21) {\n  return _removeContactFromGroupAsync.apply(this, arguments);\n}\n\nfunction _removeContactFromGroupAsync() {\n  _removeContactFromGroupAsync = _asyncToGenerator(function* (contactId, groupId) {\n    if (!ExpoContacts.removeContactFromGroupAsync) {\n      throw new UnavailabilityError('Contacts', 'removeContactFromGroupAsync');\n    }\n\n    return yield ExpoContacts.removeContactFromGroupAsync(contactId, groupId);\n  });\n  return _removeContactFromGroupAsync.apply(this, arguments);\n}\n\nexport function getGroupsAsync(_x22) {\n  return _getGroupsAsync.apply(this, arguments);\n}\n\nfunction _getGroupsAsync() {\n  _getGroupsAsync = _asyncToGenerator(function* (groupQuery) {\n    if (!ExpoContacts.getGroupsAsync) {\n      throw new UnavailabilityError('Contacts', 'getGroupsAsync');\n    }\n\n    return yield ExpoContacts.getGroupsAsync(groupQuery);\n  });\n  return _getGroupsAsync.apply(this, arguments);\n}\n\nexport function getDefaultContainerIdAsync() {\n  return _getDefaultContainerIdAsync.apply(this, arguments);\n}\n\nfunction _getDefaultContainerIdAsync() {\n  _getDefaultContainerIdAsync = _asyncToGenerator(function* () {\n    if (!ExpoContacts.getDefaultContainerIdentifierAsync) {\n      throw new UnavailabilityError('Contacts', 'getDefaultContainerIdentifierAsync');\n    }\n\n    return yield ExpoContacts.getDefaultContainerIdentifierAsync();\n  });\n  return _getDefaultContainerIdAsync.apply(this, arguments);\n}\n\nexport function getContainersAsync(_x23) {\n  return _getContainersAsync.apply(this, arguments);\n}\n\nfunction _getContainersAsync() {\n  _getContainersAsync = _asyncToGenerator(function* (containerQuery) {\n    if (!ExpoContacts.getContainersAsync) {\n      throw new UnavailabilityError('Contacts', 'getContainersAsync');\n    }\n\n    return yield ExpoContacts.getContainersAsync(containerQuery);\n  });\n  return _getContainersAsync.apply(this, arguments);\n}\n\nexport var PHONE_NUMBERS = 'phoneNumbers';\nexport var EMAILS = 'emails';\nexport var ADDRESSES = 'addresses';\nexport var IMAGE = 'image';\nexport var RAW_IMAGE = 'rawImage';\nexport var NOTE = 'note';\nexport var BIRTHDAY = 'birthday';\nexport var NON_GREGORIAN_BIRTHDAY = 'nonGregorianBirthday';\nexport var NAME_PREFIX = 'namePrefix';\nexport var NAME_SUFFIX = 'nameSuffix';\nexport var PHONETIC_FIRST_NAME = 'phoneticFirstName';\nexport var PHONETIC_MIDDLE_NAME = 'phoneticMiddleName';\nexport var PHONETIC_LAST_NAME = 'phoneticLastName';\nexport var SOCIAL_PROFILES = 'socialProfiles';\nexport var IM_ADDRESSES = 'instantMessageAddresses';\nexport var URLS = 'urlAddresses';\nexport var DATES = 'dates';\nexport var RELATIONSHIPS = 'relationships';\nexport var Fields = {\n  ID: 'id',\n  ContactType: 'contactType',\n  Name: 'name',\n  FirstName: 'firstName',\n  MiddleName: 'middleName',\n  LastName: 'lastName',\n  MaidenName: 'maidenName',\n  NamePrefix: 'namePrefix',\n  NameSuffix: 'nameSuffix',\n  Nickname: 'nickname',\n  PhoneticFirstName: 'phoneticFirstName',\n  PhoneticMiddleName: 'phoneticMiddleName',\n  PhoneticLastName: 'phoneticLastName',\n  Birthday: 'birthday',\n  NonGregorianBirthday: 'nonGregorianBirthday',\n  Emails: 'emails',\n  PhoneNumbers: 'phoneNumbers',\n  Addresses: 'addresses',\n  SocialProfiles: 'socialProfiles',\n  InstantMessageAddresses: 'instantMessageAddresses',\n  UrlAddresses: 'urlAddresses',\n  Company: 'company',\n  JobTitle: 'jobTitle',\n  Department: 'department',\n  ImageAvailable: 'imageAvailable',\n  Image: 'image',\n  RawImage: 'rawImage',\n  ExtraNames: 'extraNames',\n  Note: 'note',\n  Dates: 'dates',\n  Relationships: 'relationships'\n};\nexport var CalendarFormats = {\n  Gregorian: 'gregorian',\n  Buddhist: 'buddhist',\n  Chinese: 'chinese',\n  Coptic: 'coptic',\n  EthiopicAmeteMihret: 'ethiopicAmeteMihret',\n  EthiopicAmeteAlem: 'ethiopicAmeteAlem',\n  Hebrew: 'hebrew',\n  ISO8601: 'iso8601',\n  Indian: 'indian',\n  Islamic: 'islamic',\n  IslamicCivil: 'islamicCivil',\n  Japanese: 'japanese',\n  Persian: 'persian',\n  RepublicOfChina: 'republicOfChina',\n  IslamicTabular: 'islamicTabular',\n  IslamicUmmAlQura: 'islamicUmmAlQura'\n};\nexport var ContainerTypes = {\n  Local: 'local',\n  Exchange: 'exchange',\n  CardDAV: 'cardDAV',\n  Unassigned: 'unassigned'\n};\nexport var SortTypes = {\n  UserDefault: 'userDefault',\n  FirstName: 'firstName',\n  LastName: 'lastName',\n  None: 'none'\n};\nexport var ContactTypes = {\n  Person: 'person',\n  Company: 'company'\n};","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/expo-contacts/src/Contacts.js"],"names":["Platform","UUID","ExpoContacts","UnavailabilityError","isIOS","OS","shareContactAsync","contactId","message","shareOptions","url","writeContactToFileAsync","id","Share","share","getContactsAsync","contactQuery","getPagedContactsAsync","pageSize","nOptions","Error","getContactByIdAsync","fields","results","pageOffset","data","length","addContactAsync","contact","containerId","updateContactAsync","removeContactAsync","presentFormAsync","formOptions","adjustedOptions","console","log","isNew","undefined","addExistingGroupToContainerAsync","groupId","createGroupAsync","name","create","toString","getDefaultContainerIdAsync","updateGroupNameAsync","groupName","removeGroupAsync","addExistingContactToGroupAsync","removeContactFromGroupAsync","getGroupsAsync","groupQuery","getDefaultContainerIdentifierAsync","getContainersAsync","containerQuery","PHONE_NUMBERS","EMAILS","ADDRESSES","IMAGE","RAW_IMAGE","NOTE","BIRTHDAY","NON_GREGORIAN_BIRTHDAY","NAME_PREFIX","NAME_SUFFIX","PHONETIC_FIRST_NAME","PHONETIC_MIDDLE_NAME","PHONETIC_LAST_NAME","SOCIAL_PROFILES","IM_ADDRESSES","URLS","DATES","RELATIONSHIPS","Fields","ID","ContactType","Name","FirstName","MiddleName","LastName","MaidenName","NamePrefix","NameSuffix","Nickname","PhoneticFirstName","PhoneticMiddleName","PhoneticLastName","Birthday","NonGregorianBirthday","Emails","PhoneNumbers","Addresses","SocialProfiles","InstantMessageAddresses","UrlAddresses","Company","JobTitle","Department","ImageAvailable","Image","RawImage","ExtraNames","Note","Dates","Relationships","CalendarFormats","Gregorian","Buddhist","Chinese","Coptic","EthiopicAmeteMihret","EthiopicAmeteAlem","Hebrew","ISO8601","Indian","Islamic","IslamicCivil","Japanese","Persian","RepublicOfChina","IslamicTabular","IslamicUmmAlQura","ContainerTypes","Local","Exchange","CardDAV","Unassigned","SortTypes","UserDefault","None","ContactTypes","Person"],"mappings":"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","sourcesContent":["// @flow\n\n// TODO: Bacon: No React Native\nimport { Share } from 'react-native';\nimport { Platform } from 'expo-core';\nimport UUID from 'uuid-js';\nimport ExpoContacts from './ExpoContacts';\nimport { UnavailabilityError } from 'expo-errors';\n\ntype CalendarFormatType =\n  | typeof CalendarFormats.Gregorian\n  | typeof CalendarFormats.Buddhist\n  | typeof CalendarFormats.Chinese\n  | typeof CalendarFormats.Coptic\n  | typeof CalendarFormats.EthiopicAmeteMihret\n  | typeof CalendarFormats.EthiopicAmeteAlem\n  | typeof CalendarFormats.Hebrew\n  | typeof CalendarFormats.ISO8601\n  | typeof CalendarFormats.Indian\n  | typeof CalendarFormats.Islamic\n  | typeof CalendarFormats.IslamicCivil\n  | typeof CalendarFormats.Japanese\n  | typeof CalendarFormats.Persian\n  | typeof CalendarFormats.RepublicOfChina\n  | typeof CalendarFormats.IslamicTabular\n  | typeof CalendarFormats.IslamicUmmAlQura;\n\ntype ContainerType =\n  | typeof ContainerTypes.Local\n  | typeof ContainerTypes.Exchange\n  | typeof ContainerTypes.CardDAV\n  | typeof ContainerTypes.Unassigned;\n\ntype ContactType = typeof ContactTypes.Person | typeof ContactTypes.Company;\n\ntype FieldType =\n  | typeof Fields.ID\n  | typeof Fields.ContactType\n  | typeof Fields.Name\n  | typeof Fields.FirstName\n  | typeof Fields.MiddleName\n  | typeof Fields.LastName\n  | typeof Fields.MaidenName\n  | typeof Fields.NamePrefix\n  | typeof Fields.NameSuffix\n  | typeof Fields.Nickname\n  | typeof Fields.PhoneticFirstName\n  | typeof Fields.PhoneticMiddleName\n  | typeof Fields.PhoneticLastName\n  | typeof Fields.Birthday\n  | typeof Fields.NonGregorianBirthday\n  | typeof Fields.Emails\n  | typeof Fields.PhoneNumbers\n  | typeof Fields.Addresses\n  | typeof Fields.SocialProfiles\n  | typeof Fields.InstantMessageAddresses\n  | typeof Fields.UrlAddresses\n  | typeof Fields.Company\n  | typeof Fields.JobTitle\n  | typeof Fields.Department\n  | typeof Fields.ImageAvailable\n  | typeof Fields.Image\n  | typeof Fields.RawImage\n  | typeof Fields.ExtraNames\n  | typeof Fields.Note\n  | typeof Fields.Dates\n  | typeof Fields.Relationships;\n\ntype Date = {\n  day?: number,\n  month?: number,\n  year?: number,\n  id: string,\n  label: string,\n  format?: CalendarFormatType,\n};\n\ntype Relationship = {\n  label: string,\n  name?: string,\n  id: string,\n};\n\ntype Email = {\n  email?: string,\n  isPrimary?: boolean,\n  label: string,\n  id: string,\n};\n\ntype PhoneNumber = {\n  number?: string,\n  isPrimary?: boolean,\n  digits?: string,\n  countryCode?: string,\n  label: string,\n  id: string,\n};\n\ntype Address = {\n  street?: string,\n  city?: string,\n  country?: string,\n  region?: string,\n  neighborhood?: string,\n  postalCode?: string,\n  poBox?: string,\n  isoCountryCode?: string,\n  label: string,\n  id: string,\n};\n\ntype SocialProfile = {\n  service?: string,\n  localizedProfile?: string,\n  url?: string,\n  username?: string,\n  userId?: string,\n  label: string,\n  id: string,\n};\n\ntype InstantMessageAddress = {\n  service?: string,\n  username?: string,\n  localizedService?: string,\n  label: string,\n  id: string,\n};\n\ntype UrlAddress = {\n  label: string,\n  url?: string,\n  id: string,\n};\n\ntype Image = {\n  uri?: string,\n  width?: number,\n  height?: number,\n  base64?: string,\n};\n\ntype Contact = {\n  id: string,\n  contactType: ContactType,\n  name: string,\n  firstName?: string,\n  middleName?: string,\n  lastName?: string,\n  maidenName?: string,\n  namePrefix?: string,\n  nameSuffix?: string,\n  nickname?: string,\n  phoneticFirstName?: string,\n  phoneticMiddleName?: string,\n  phoneticLastName?: string,\n  company?: string,\n  jobTitle?: string,\n  department?: string,\n  note?: string,\n  imageAvailable?: boolean,\n  image?: Image,\n  rawImage?: Image,\n  birthday?: Date,\n  dates?: Date[],\n  relationships?: Relationship[],\n  emails?: Email[],\n  phoneNumbers?: PhoneNumber[],\n  addresses?: Address[],\n  instantMessageAddresses?: InstantMessageAddress[],\n  urlAddresses?: UrlAddress[],\n\n  nonGregorianBirthday?: Date,\n  socialProfiles?: SocialProfile[],\n};\n\ntype ContactResponse = {\n  data: Contact[],\n  hasNextPage: boolean,\n  hasPreviousPage: boolean,\n};\n\ntype ContactSort =\n  | typeof SortTypes.UserDefault\n  | typeof SortTypes.FirstName\n  | typeof SortTypes.LastName\n  | typeof SortTypes.None;\n\ntype ContactQuery = {\n  pageSize?: number,\n  pageOffset?: number,\n  fields?: FieldType[],\n  sort?: ContactSort,\n  name?: string,\n  id?: string | string[],\n  groupId?: string,\n  containerId?: string,\n  rawContacts?: boolean,\n};\n\ntype FormOptions = {\n  displayedPropertyKeys?: FieldType[],\n  message?: string,\n  alternateName?: string,\n  allowsEditing?: boolean,\n  allowsActions?: boolean,\n  shouldShowLinkedContacts?: boolean,\n  isNew?: boolean,\n  cancelButtonTitle?: string,\n  preventAnimation?: boolean,\n  groupId?: string,\n};\n\ntype GroupQuery = {\n  groupId?: string,\n  groupName?: string,\n  containerId?: string,\n};\n\ntype Group = {\n  name?: string,\n  id?: string,\n};\n\ntype ContainerQuery = {\n  contactId?: string,\n  groupId?: string,\n  containerId?: string | string[],\n};\n\ntype Container = {\n  name: string,\n  id: string,\n  type: ContainerType,\n};\n\nconst isIOS = Platform.OS === 'ios';\n\nexport async function shareContactAsync(\n  contactId: string,\n  message: string,\n  shareOptions: Object = {}\n): Promise<any> {\n  if (!ExpoContacts.shareContactAsync) {\n    throw new UnavailabilityError('Contacts', 'shareContactAsync');\n  }\n  if (isIOS) {\n    const url = await writeContactToFileAsync({\n      id: contactId,\n    });\n    Share.share(\n      {\n        url,\n        message,\n      },\n      shareOptions\n    );\n  } else {\n    return await ExpoContacts.shareContactAsync(contactId, message);\n  }\n}\n\nexport async function getContactsAsync(contactQuery: ContactQuery = {}): Promise<ContactResponse> {\n  if (!ExpoContacts.getContactsAsync) {\n    throw new UnavailabilityError('Contacts', 'getContactsAsync');\n  }\n  return await ExpoContacts.getContactsAsync(contactQuery);\n}\n\nexport async function getPagedContactsAsync(\n  contactQuery: ContactQuery = {}\n): Promise<ContactResponse> {\n  const { pageSize, ...nOptions } = contactQuery;\n\n  if (pageSize && pageSize <= 0) {\n    throw new Error('Error: Contacts.getPagedContactsAsync: `pageSize` must be greater than 0');\n  }\n\n  return await getContactsAsync({\n    ...nOptions,\n    pageSize,\n  });\n}\n\nexport async function getContactByIdAsync(id: string, fields?: FieldType): Promise<?Contact> {\n  if (!ExpoContacts.getContactsAsync) {\n    throw new UnavailabilityError('Contacts', 'getContactsAsync');\n  }\n\n  if (id == null) {\n    throw new Error('Error: Contacts.getContactByIdAsync: Please pass an ID as a parameter');\n  } else {\n    const results = await ExpoContacts.getContactsAsync({\n      pageSize: 1,\n      pageOffset: 0,\n      fields,\n      id,\n    });\n    if (results && results.data && results.data.length > 0) {\n      return results.data[0];\n    }\n    return null;\n  }\n}\n\nexport async function addContactAsync(contact: Contact, containerId: string): Promise<string> {\n  if (!ExpoContacts.addContactAsync) {\n    throw new UnavailabilityError('Contacts', 'addContactAsync');\n  }\n  return await ExpoContacts.addContactAsync(contact, containerId);\n}\n\nexport async function updateContactAsync(contact: Contact): Promise<string> {\n  if (!ExpoContacts.updateContactAsync) {\n    throw new UnavailabilityError('Contacts', 'updateContactAsync');\n  }\n  return await ExpoContacts.updateContactAsync(contact);\n}\n\nexport async function removeContactAsync(contactId: string): Promise<any> {\n  if (!ExpoContacts.removeContactAsync) {\n    throw new UnavailabilityError('Contacts', 'removeContactAsync');\n  }\n  return await ExpoContacts.removeContactAsync(contactId);\n}\n\nexport async function writeContactToFileAsync(contactQuery: ContactQuery = {}): Promise<?string> {\n  if (!ExpoContacts.writeContactToFileAsync) {\n    throw new UnavailabilityError('Contacts', 'writeContactToFileAsync');\n  }\n  return await ExpoContacts.writeContactToFileAsync(contactQuery);\n}\n\n// TODO: Evan: Test\nexport async function presentFormAsync(\n  contactId: ?string,\n  contact: ?Contact,\n  formOptions: FormOptions = {}\n): Promise<any> {\n  if (!ExpoContacts.presentFormAsync) {\n    throw new UnavailabilityError('Contacts', 'presentFormAsync');\n  }\n  if (isIOS) {\n    let adjustedOptions = formOptions;\n\n    if (contactId) {\n      if (contact) {\n        contact = null;\n        console.log(\n          'Expo.Contacts.presentFormAsync: You should define either a `contact` or a `contactId` but not both.'\n        );\n      }\n      if (adjustedOptions.isNew !== undefined) {\n        console.log(\n          'Expo.Contacts.presentFormAsync: formOptions.isNew is not supported with `contactId`'\n        );\n      }\n    }\n    return await ExpoContacts.presentFormAsync(contactId, contact, adjustedOptions);\n  } else {\n    return await ExpoContacts.presentFormAsync(contactId, contact, formOptions);\n  }\n}\n\n// iOS Only\n\nexport async function addExistingGroupToContainerAsync(\n  groupId: string,\n  containerId: string\n): Promise<any> {\n  if (!ExpoContacts.addExistingGroupToContainerAsync) {\n    throw new UnavailabilityError('Contacts', 'addExistingGroupToContainerAsync');\n  }\n\n  return await ExpoContacts.addExistingGroupToContainerAsync(groupId, containerId);\n}\n\nexport async function createGroupAsync(name: ?string, containerId: ?string): Promise<string> {\n  if (!ExpoContacts.createGroupAsync) {\n    throw new UnavailabilityError('Contacts', 'createGroupAsync');\n  }\n\n  name = name || UUID.create().toString();\n  if (!containerId) containerId = await getDefaultContainerIdAsync();\n\n  return await ExpoContacts.createGroupAsync(name, containerId);\n}\n\nexport async function updateGroupNameAsync(groupName: string, groupId: string): Promise<any> {\n  if (!ExpoContacts.updateGroupNameAsync) {\n    throw new UnavailabilityError('Contacts', 'updateGroupNameAsync');\n  }\n\n  return await ExpoContacts.updateGroupNameAsync(groupName, groupId);\n}\n\nexport async function removeGroupAsync(groupId: string): Promise<any> {\n  if (!ExpoContacts.removeGroupAsync) {\n    throw new UnavailabilityError('Contacts', 'removeGroupAsync');\n  }\n\n  return await ExpoContacts.removeGroupAsync(groupId);\n}\n\nexport async function addExistingContactToGroupAsync(\n  contactId: string,\n  groupId: string\n): Promise<any> {\n  if (!ExpoContacts.addExistingContactToGroupAsync) {\n    throw new UnavailabilityError('Contacts', 'addExistingContactToGroupAsync');\n  }\n\n  return await ExpoContacts.addExistingContactToGroupAsync(contactId, groupId);\n}\n\nexport async function removeContactFromGroupAsync(\n  contactId: string,\n  groupId: string\n): Promise<any> {\n  if (!ExpoContacts.removeContactFromGroupAsync) {\n    throw new UnavailabilityError('Contacts', 'removeContactFromGroupAsync');\n  }\n\n  return await ExpoContacts.removeContactFromGroupAsync(contactId, groupId);\n}\n\nexport async function getGroupsAsync(groupQuery: GroupQuery): Promise<Group[]> {\n  if (!ExpoContacts.getGroupsAsync) {\n    throw new UnavailabilityError('Contacts', 'getGroupsAsync');\n  }\n\n  return await ExpoContacts.getGroupsAsync(groupQuery);\n}\n\nexport async function getDefaultContainerIdAsync(): Promise<string> {\n  if (!ExpoContacts.getDefaultContainerIdentifierAsync) {\n    throw new UnavailabilityError('Contacts', 'getDefaultContainerIdentifierAsync');\n  }\n\n  return await ExpoContacts.getDefaultContainerIdentifierAsync();\n}\n\nexport async function getContainersAsync(containerQuery: ContainerQuery): Promise<Container[]> {\n  if (!ExpoContacts.getContainersAsync) {\n    throw new UnavailabilityError('Contacts', 'getContainersAsync');\n  }\n\n  return await ExpoContacts.getContainersAsync(containerQuery);\n}\n\n// Legacy\nexport const PHONE_NUMBERS = 'phoneNumbers';\nexport const EMAILS = 'emails';\nexport const ADDRESSES = 'addresses';\nexport const IMAGE = 'image';\nexport const RAW_IMAGE = 'rawImage';\nexport const NOTE = 'note';\nexport const BIRTHDAY = 'birthday';\nexport const NON_GREGORIAN_BIRTHDAY = 'nonGregorianBirthday';\nexport const NAME_PREFIX = 'namePrefix';\nexport const NAME_SUFFIX = 'nameSuffix';\nexport const PHONETIC_FIRST_NAME = 'phoneticFirstName';\nexport const PHONETIC_MIDDLE_NAME = 'phoneticMiddleName';\nexport const PHONETIC_LAST_NAME = 'phoneticLastName';\nexport const SOCIAL_PROFILES = 'socialProfiles';\nexport const IM_ADDRESSES = 'instantMessageAddresses';\nexport const URLS = 'urlAddresses';\nexport const DATES = 'dates';\nexport const RELATIONSHIPS = 'relationships';\n\nexport const Fields = {\n  ID: 'id',\n  ContactType: 'contactType',\n  Name: 'name',\n  FirstName: 'firstName',\n  MiddleName: 'middleName',\n  LastName: 'lastName',\n  MaidenName: 'maidenName',\n  NamePrefix: 'namePrefix',\n  NameSuffix: 'nameSuffix',\n  Nickname: 'nickname',\n  PhoneticFirstName: 'phoneticFirstName',\n  PhoneticMiddleName: 'phoneticMiddleName',\n  PhoneticLastName: 'phoneticLastName',\n  Birthday: 'birthday',\n  NonGregorianBirthday: 'nonGregorianBirthday',\n  Emails: 'emails',\n  PhoneNumbers: 'phoneNumbers',\n  Addresses: 'addresses',\n  SocialProfiles: 'socialProfiles',\n  InstantMessageAddresses: 'instantMessageAddresses',\n  UrlAddresses: 'urlAddresses',\n  Company: 'company',\n  JobTitle: 'jobTitle',\n  Department: 'department',\n  ImageAvailable: 'imageAvailable',\n  Image: 'image',\n  RawImage: 'rawImage',\n  ExtraNames: 'extraNames',\n  Note: 'note',\n  Dates: 'dates',\n  Relationships: 'relationships',\n};\n\nexport const CalendarFormats = {\n  Gregorian: 'gregorian',\n  Buddhist: 'buddhist',\n  Chinese: 'chinese',\n  Coptic: 'coptic',\n  EthiopicAmeteMihret: 'ethiopicAmeteMihret',\n  EthiopicAmeteAlem: 'ethiopicAmeteAlem',\n  Hebrew: 'hebrew',\n  ISO8601: 'iso8601',\n  Indian: 'indian',\n  Islamic: 'islamic',\n  IslamicCivil: 'islamicCivil',\n  Japanese: 'japanese',\n  Persian: 'persian',\n  RepublicOfChina: 'republicOfChina',\n  IslamicTabular: 'islamicTabular',\n  IslamicUmmAlQura: 'islamicUmmAlQura',\n};\n\nexport const ContainerTypes = {\n  Local: 'local',\n  Exchange: 'exchange',\n  CardDAV: 'cardDAV',\n  Unassigned: 'unassigned',\n};\n\nexport const SortTypes = {\n  UserDefault: 'userDefault',\n  FirstName: 'firstName',\n  LastName: 'lastName',\n  None: 'none',\n};\n\nexport const ContactTypes = {\n  Person: 'person',\n  Company: 'company',\n};\n"]},"metadata":{},"sourceType":"module"}