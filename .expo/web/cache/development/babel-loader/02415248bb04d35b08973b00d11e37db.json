{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { UnavailabilityError } from '@unimodules/core';\nimport Sharing from \"./ExpoSharing\";\nexport function isAvailableAsync() {\n  return _isAvailableAsync.apply(this, arguments);\n}\n\nfunction _isAvailableAsync() {\n  _isAvailableAsync = _asyncToGenerator(function* () {\n    if (Sharing) {\n      if (Sharing.isAvailableAsync) {\n        return yield Sharing.isAvailableAsync();\n      }\n\n      return true;\n    }\n\n    return false;\n  });\n  return _isAvailableAsync.apply(this, arguments);\n}\n\nexport function shareAsync(_x) {\n  return _shareAsync.apply(this, arguments);\n}\n\nfunction _shareAsync() {\n  _shareAsync = _asyncToGenerator(function* (url) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!Sharing || !Sharing.shareAsync) {\n      throw new UnavailabilityError('Sharing', 'shareAsync');\n    }\n\n    return yield Sharing.shareAsync(url, options);\n  });\n  return _shareAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/Sharing.ts"],"names":[],"mappings":";;;;AAAA,SAAS,mBAAT,QAAoC,kBAApC;AAEA,OAAO,OAAP;AAQA,gBAAsB,gBAAtB;AAAA;AAAA;;;wCAAO,aAA+B;AACpC,QAAI,OAAJ,EAAa;AACX,UAAI,OAAO,CAAC,gBAAZ,EAA8B;AAC5B,qBAAa,OAAO,CAAC,gBAAR,EAAb;AACD;;AACD,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD,G;;;;AAED,gBAAsB,UAAtB;AAAA;AAAA;;;kCAAO,WAA0B,GAA1B,EAAiE;AAAA,QAA1B,OAA0B,uEAAF,EAAE;;AACtE,QAAI,CAAC,OAAD,IAAY,CAAC,OAAO,CAAC,UAAzB,EAAqC;AACnC,YAAM,IAAI,mBAAJ,CAAwB,SAAxB,EAAmC,YAAnC,CAAN;AACD;;AACD,iBAAa,OAAO,CAAC,UAAR,CAAmB,GAAnB,EAAwB,OAAxB,CAAb;AACD,G","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\n\nimport Sharing from './ExpoSharing';\n\ntype ShareOptions = {\n  mimeType?: string;\n  UTI?: string;\n  dialogTitle?: string;\n};\n\nexport async function isAvailableAsync(): Promise<boolean> {\n  if (Sharing) {\n    if (Sharing.isAvailableAsync) {\n      return await Sharing.isAvailableAsync();\n    }\n    return true;\n  }\n\n  return false;\n}\n\nexport async function shareAsync(url: string, options: ShareOptions = {}): Promise<{}> {\n  if (!Sharing || !Sharing.shareAsync) {\n    throw new UnavailabilityError('Sharing', 'shareAsync');\n  }\n  return await Sharing.shareAsync(url, options);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}