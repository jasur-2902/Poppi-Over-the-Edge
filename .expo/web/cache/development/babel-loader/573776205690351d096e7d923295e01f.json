{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport uuidv4 from 'uuid/v4';\nexport default {\n  get name() {\n    return 'ExpoDocumentPicker';\n  },\n\n  getDocumentAsync(_ref) {\n    return _asyncToGenerator(function* () {\n      var {\n        type = '*/*',\n        multiple = false\n      } = _ref;\n      var input = document.createElement('input');\n      input.style.display = 'none';\n      input.setAttribute('type', 'file');\n      input.setAttribute('accept', type);\n      input.setAttribute('id', uuidv4());\n\n      if (multiple) {\n        input.setAttribute('multiple', 'multiple');\n      }\n\n      document.body.appendChild(input);\n      return new Promise((resolve, reject) => {\n        input.addEventListener('change', () => {\n          if (input.files) {\n            var targetFile = input.files[0];\n            var reader = new FileReader();\n\n            reader.onerror = () => {\n              reject('Failed to read the selected media because the operation failed.');\n            };\n\n            reader.onload = (_ref2) => {\n              var {\n                target\n              } = _ref2;\n              var uri = target.result;\n              resolve({\n                type: 'success',\n                uri,\n                name: targetFile.name,\n                file: targetFile,\n                lastModified: targetFile.lastModified,\n                size: targetFile.size,\n                output: input.files\n              });\n            };\n\n            reader.readAsDataURL(targetFile);\n          } else {\n            resolve({\n              type: 'cancel'\n            });\n          }\n\n          document.body.removeChild(input);\n        });\n        var event = new MouseEvent('click');\n        input.dispatchEvent(event);\n      });\n    })();\n  }\n\n};","map":{"version":3,"sources":["../src/ExpoDocumentPicker.web.ts"],"names":[],"mappings":";;;;AAAA,OAAO,MAAP,MAAmB,SAAnB;AAIA,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,oBAAP;AACD,GAHY;;AAKP,EAAA,gBAAN,OAGwB;AAAA;AAAA,UAHD;AACrB,QAAA,IAAI,GAAG,KADc;AAErB,QAAA,QAAQ,GAAG;AAFU,OAGC;AACtB,UAAM,KAAK,GAAG,QAAQ,CAAC,aAAT,CAAuB,OAAvB,CAAd;AACA,MAAA,KAAK,CAAC,KAAN,CAAY,OAAZ,GAAsB,MAAtB;AACA,MAAA,KAAK,CAAC,YAAN,CAAmB,MAAnB,EAA2B,MAA3B;AACA,MAAA,KAAK,CAAC,YAAN,CAAmB,QAAnB,EAA6B,IAA7B;AACA,MAAA,KAAK,CAAC,YAAN,CAAmB,IAAnB,EAAyB,MAAM,EAA/B;;AACA,UAAI,QAAJ,EAAc;AACZ,QAAA,KAAK,CAAC,YAAN,CAAmB,UAAnB,EAA+B,UAA/B;AACD;;AAED,MAAA,QAAQ,CAAC,IAAT,CAAc,WAAd,CAA0B,KAA1B;AAEA,aAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AACrC,QAAA,KAAK,CAAC,gBAAN,CAAuB,QAAvB,EAAiC,MAAK;AACpC,cAAI,KAAK,CAAC,KAAV,EAAiB;AACf,gBAAM,UAAU,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAnB;AACA,gBAAM,MAAM,GAAG,IAAI,UAAJ,EAAf;;AACA,YAAA,MAAM,CAAC,OAAP,GAAiB,MAAK;AACpB,cAAA,MAAM,CAAC,iEAAD,CAAN;AACD,aAFD;;AAGA,YAAA,MAAM,CAAC,MAAP,GAAgB,WAAe;AAAA,kBAAd;AAAE,gBAAA;AAAF,eAAc;AAC7B,kBAAM,GAAG,GAAI,MAAc,CAAC,MAA5B;AACA,cAAA,OAAO,CAAC;AACN,gBAAA,IAAI,EAAE,SADA;AAEN,gBAAA,GAFM;AAGN,gBAAA,IAAI,EAAE,UAAU,CAAC,IAHX;AAIN,gBAAA,IAAI,EAAE,UAJA;AAKN,gBAAA,YAAY,EAAE,UAAU,CAAC,YALnB;AAMN,gBAAA,IAAI,EAAE,UAAU,CAAC,IANX;AAON,gBAAA,MAAM,EAAE,KAAK,CAAC;AAPR,eAAD,CAAP;AASD,aAXD;;AAaA,YAAA,MAAM,CAAC,aAAP,CAAqB,UAArB;AACD,WApBD,MAoBO;AACL,YAAA,OAAO,CAAC;AAAE,cAAA,IAAI,EAAE;AAAR,aAAD,CAAP;AACD;;AAED,UAAA,QAAQ,CAAC,IAAT,CAAc,WAAd,CAA0B,KAA1B;AACD,SA1BD;AA4BA,YAAM,KAAK,GAAG,IAAI,UAAJ,CAAe,OAAf,CAAd;AACA,QAAA,KAAK,CAAC,aAAN,CAAoB,KAApB;AACD,OA/BM,CAAP;AAZsB;AA4CvB;;AApDY,CAAf","sourcesContent":["import uuidv4 from 'uuid/v4';\n\nimport { DocumentResult, DocumentPickerOptions } from './types';\n\nexport default {\n  get name(): string {\n    return 'ExpoDocumentPicker';\n  },\n\n  async getDocumentAsync({\n    type = '*/*',\n    multiple = false,\n  }: DocumentPickerOptions): Promise<DocumentResult> {\n    const input = document.createElement('input');\n    input.style.display = 'none';\n    input.setAttribute('type', 'file');\n    input.setAttribute('accept', type);\n    input.setAttribute('id', uuidv4());\n    if (multiple) {\n      input.setAttribute('multiple', 'multiple');\n    }\n\n    document.body.appendChild(input);\n\n    return new Promise((resolve, reject) => {\n      input.addEventListener('change', () => {\n        if (input.files) {\n          const targetFile = input.files[0];\n          const reader = new FileReader();\n          reader.onerror = () => {\n            reject('Failed to read the selected media because the operation failed.');\n          };\n          reader.onload = ({ target }) => {\n            const uri = (target as any).result;\n            resolve({\n              type: 'success',\n              uri,\n              name: targetFile.name,\n              file: targetFile,\n              lastModified: targetFile.lastModified,\n              size: targetFile.size,\n              output: input.files,\n            });\n          };\n          // Read in the image file as a binary string.\n          reader.readAsDataURL(targetFile);\n        } else {\n          resolve({ type: 'cancel' });\n        }\n\n        document.body.removeChild(input);\n      });\n\n      const event = new MouseEvent('click');\n      input.dispatchEvent(event);\n    });\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}