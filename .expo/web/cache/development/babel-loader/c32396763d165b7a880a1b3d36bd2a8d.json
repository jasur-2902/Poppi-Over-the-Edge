{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { UnavailabilityError } from 'expo-errors';\nimport ExponentWebBrowser from \"./ExponentWebBrowser\";\n\nfunction openBrowserAsync(_x) {\n  return _openBrowserAsync.apply(this, arguments);\n}\n\nfunction _openBrowserAsync() {\n  _openBrowserAsync = _asyncToGenerator(function* (url) {\n    if (!ExponentWebBrowser.openBrowserAsync) {\n      throw new UnavailabilityError('WebBrowser', 'openBrowserAsync');\n    }\n\n    return ExponentWebBrowser.openBrowserAsync(url);\n  });\n  return _openBrowserAsync.apply(this, arguments);\n}\n\nfunction dismissBrowser() {\n  if (!ExponentWebBrowser.dismissBrowser) {\n    throw new UnavailabilityError('WebBrowser', 'dismissBrowser');\n  }\n\n  ExponentWebBrowser.dismissBrowser();\n}\n\nfunction openAuthSessionAsync(_x2, _x3) {\n  return _openAuthSessionAsync.apply(this, arguments);\n}\n\nfunction _openAuthSessionAsync() {\n  _openAuthSessionAsync = _asyncToGenerator(function* (url, redirectUrl) {\n    if (_authSessionIsNativelySupported()) {\n      if (!ExponentWebBrowser.openAuthSessionAsync) {\n        throw new UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n      }\n\n      return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl);\n    } else {\n      return _openAuthSessionPolyfillAsync(url, redirectUrl);\n    }\n  });\n  return _openAuthSessionAsync.apply(this, arguments);\n}\n\nfunction dismissAuthSession() {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.dismissAuthSession) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    if (!ExponentWebBrowser.dismissBrowser) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\n\nfunction _authSessionIsNativelySupported() {\n  if (Platform.OS === 'android') {\n    return false;\n  }\n\n  var versionNumber = parseInt(String(Platform.Version), 10);\n  return versionNumber >= 11;\n}\n\nvar _redirectHandler = null;\n\nfunction _openAuthSessionPolyfillAsync(_x4, _x5) {\n  return _openAuthSessionPolyfillAsync2.apply(this, arguments);\n}\n\nfunction _openAuthSessionPolyfillAsync2() {\n  _openAuthSessionPolyfillAsync2 = _asyncToGenerator(function* (startUrl, returnUrl) {\n    if (_redirectHandler) {\n      throw new Error(\"The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be\");\n    }\n\n    try {\n      return yield Promise.race([openBrowserAsync(startUrl), _waitForRedirectAsync(returnUrl)]);\n    } finally {\n      dismissBrowser();\n\n      if (!_redirectHandler) {\n        throw new Error(\"The WebBrowser auth session is in an invalid state with no redirect handler when one should be set\");\n      }\n\n      Linking.removeEventListener('url', _redirectHandler);\n      _redirectHandler = null;\n    }\n  });\n  return _openAuthSessionPolyfillAsync2.apply(this, arguments);\n}\n\nfunction _waitForRedirectAsync(returnUrl) {\n  return new Promise(resolve => {\n    _redirectHandler = event => {\n      if (event.url.startsWith(returnUrl)) {\n        resolve({\n          url: event.url,\n          type: 'success'\n        });\n      }\n    };\n\n    Linking.addEventListener('url', _redirectHandler);\n  });\n}\n\nexport default {\n  openBrowserAsync,\n  openAuthSessionAsync,\n  dismissBrowser,\n  dismissAuthSession\n};","map":{"version":3,"sources":["../../src/WebBrowser/WebBrowser.ts"],"names":[],"mappings":"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","sourcesContent":["import { Linking, Platform } from 'react-native';\nimport { UnavailabilityError } from 'expo-errors';\nimport ExponentWebBrowser from './ExponentWebBrowser';\n\ntype RedirectEvent = {\n  url: string;\n};\n\ntype AuthSessionResult = RedirectResult | BrowserResult;\n\ntype BrowserResult = {\n  type: 'cancel' | 'dismiss';\n};\n\ntype RedirectResult = {\n  type: 'success';\n  url: string;\n};\n\nasync function openBrowserAsync(url: string): Promise<BrowserResult> {\n  if (!ExponentWebBrowser.openBrowserAsync) {\n    throw new UnavailabilityError('WebBrowser', 'openBrowserAsync');\n  }\n  return ExponentWebBrowser.openBrowserAsync(url);\n}\n\nfunction dismissBrowser(): void {\n  if (!ExponentWebBrowser.dismissBrowser) {\n    throw new UnavailabilityError('WebBrowser', 'dismissBrowser');\n  }\n  ExponentWebBrowser.dismissBrowser();\n}\n\nasync function openAuthSessionAsync(url: string, redirectUrl: string): Promise<AuthSessionResult> {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.openAuthSessionAsync) {\n      throw new UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n    }\n    return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl);\n  } else {\n    return _openAuthSessionPolyfillAsync(url, redirectUrl);\n  }\n}\n\nfunction dismissAuthSession(): void {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.dismissAuthSession) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    if (!ExponentWebBrowser.dismissBrowser) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\n\n/* iOS <= 10 and Android polyfill for SFAuthenticationSession flow */\n\nfunction _authSessionIsNativelySupported(): boolean {\n  if (Platform.OS === 'android') {\n    return false;\n  }\n\n  const versionNumber = parseInt(String(Platform.Version), 10);\n  return versionNumber >= 11;\n}\n\nlet _redirectHandler: ((event: RedirectEvent) => void) | null = null;\n\nasync function _openAuthSessionPolyfillAsync(\n  startUrl: string,\n  returnUrl: string\n): Promise<AuthSessionResult> {\n  if (_redirectHandler) {\n    throw new Error(\n      `The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be`\n    );\n  }\n\n  try {\n    return await Promise.race([openBrowserAsync(startUrl), _waitForRedirectAsync(returnUrl)]);\n  } finally {\n    dismissBrowser();\n    if (!_redirectHandler) {\n      throw new Error(\n        `The WebBrowser auth session is in an invalid state with no redirect handler when one should be set`\n      );\n    }\n    Linking.removeEventListener('url', _redirectHandler);\n    _redirectHandler = null;\n  }\n}\n\nfunction _waitForRedirectAsync(returnUrl: string): Promise<RedirectResult> {\n  return new Promise(resolve => {\n    _redirectHandler = (event: RedirectEvent) => {\n      if (event.url.startsWith(returnUrl)) {\n        resolve({ url: event.url, type: 'success' });\n      }\n    };\n\n    Linking.addEventListener('url', _redirectHandler);\n  });\n}\n\nexport default {\n  openBrowserAsync,\n  openAuthSessionAsync,\n  dismissBrowser,\n  dismissAuthSession,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}