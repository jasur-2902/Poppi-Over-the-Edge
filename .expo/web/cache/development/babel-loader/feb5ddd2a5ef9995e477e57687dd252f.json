{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jshukurov\\\\Desktop\\\\Poppi Over The Edge\\\\Poppi-Over-the-Edge-master\\\\node_modules\\\\react-native-elements\\\\src\\\\config\\\\ThemeProvider.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport deepmerge from 'deepmerge';\nimport colors from \"./colors\";\nexport var ThemeContext = React.createContext({\n  theme: {\n    colors\n  }\n});\nexport default class ThemeProvider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.updateTheme = updates => {\n      this.setState((_ref) => {\n        var {\n          theme\n        } = _ref;\n        return {\n          theme: deepmerge(theme, updates)\n        };\n      });\n    };\n\n    this.replaceTheme = theme => {\n      this.setState(() => ({\n        theme: deepmerge(this.defaultTheme, theme)\n      }));\n    };\n\n    this.getTheme = () => this.state.theme;\n\n    this.defaultTheme = deepmerge({\n      colors\n    }, props.theme);\n    this.state = {\n      theme: this.defaultTheme\n    };\n  }\n\n  render() {\n    return React.createElement(ThemeContext.Provider, {\n      value: {\n        theme: this.state.theme,\n        updateTheme: this.updateTheme,\n        replaceTheme: this.replaceTheme\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }, this.props.children);\n  }\n\n}\nThemeProvider.propTypes = {\n  theme: PropTypes.object,\n  children: PropTypes.node.isRequired\n};\nThemeProvider.defaultProps = {\n  theme: {}\n};\nexport var ThemeConsumer = ThemeContext.Consumer;","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/react-native-elements/src/config/ThemeProvider.js"],"names":["React","PropTypes","deepmerge","colors","ThemeContext","createContext","theme","ThemeProvider","Component","constructor","props","updateTheme","updates","setState","replaceTheme","defaultTheme","getTheme","state","render","children","propTypes","object","node","isRequired","defaultProps","ThemeConsumer","Consumer"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,OAAOC,MAAP;AAEA,OAAO,IAAMC,YAAY,GAAGJ,KAAK,CAACK,aAAN,CAAoB;AAC9CC,EAAAA,KAAK,EAAE;AACLH,IAAAA;AADK;AADuC,CAApB,CAArB;AAMP,eAAe,MAAMI,aAAN,SAA4BP,KAAK,CAACQ,SAAlC,CAA4C;AACzDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAcnBC,WAdmB,GAcLC,OAAO,IAAI;AACvB,WAAKC,QAAL,CAAc;AAAA,YAAC;AAAEP,UAAAA;AAAF,SAAD;AAAA,eAAgB;AAC5BA,UAAAA,KAAK,EAAEJ,SAAS,CAACI,KAAD,EAAQM,OAAR;AADY,SAAhB;AAAA,OAAd;AAGD,KAlBkB;;AAAA,SAoBnBE,YApBmB,GAoBJR,KAAK,IAAI;AACtB,WAAKO,QAAL,CAAc,OAAO;AACnBP,QAAAA,KAAK,EAAEJ,SAAS,CAAC,KAAKa,YAAN,EAAoBT,KAApB;AADG,OAAP,CAAd;AAGD,KAxBkB;;AAAA,SA0BnBU,QA1BmB,GA0BR,MAAM,KAAKC,KAAL,CAAWX,KA1BT;;AAGjB,SAAKS,YAAL,GAAoBb,SAAS,CAC3B;AACEC,MAAAA;AADF,KAD2B,EAI3BO,KAAK,CAACJ,KAJqB,CAA7B;AAMA,SAAKW,KAAL,GAAa;AACXX,MAAAA,KAAK,EAAE,KAAKS;AADD,KAAb;AAGD;;AAgBDG,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,YAAD,CAAc,QAAd;AACE,MAAA,KAAK,EAAE;AACLZ,QAAAA,KAAK,EAAE,KAAKW,KAAL,CAAWX,KADb;AAELK,QAAAA,WAAW,EAAE,KAAKA,WAFb;AAGLG,QAAAA,YAAY,EAAE,KAAKA;AAHd,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOG,KAAKJ,KAAL,CAAWS,QAPd,CADF;AAWD;;AAzCwD;AA4C3DZ,aAAa,CAACa,SAAd,GAA0B;AACxBd,EAAAA,KAAK,EAAEL,SAAS,CAACoB,MADO;AAExBF,EAAAA,QAAQ,EAAElB,SAAS,CAACqB,IAAV,CAAeC;AAFD,CAA1B;AAKAhB,aAAa,CAACiB,YAAd,GAA6B;AAC3BlB,EAAAA,KAAK,EAAE;AADoB,CAA7B;AAIA,OAAO,IAAMmB,aAAa,GAAGrB,YAAY,CAACsB,QAAnC","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport deepmerge from 'deepmerge';\n\nimport colors from './colors';\n\nexport const ThemeContext = React.createContext({\n  theme: {\n    colors,\n  },\n});\n\nexport default class ThemeProvider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.defaultTheme = deepmerge(\n      {\n        colors,\n      },\n      props.theme\n    );\n    this.state = {\n      theme: this.defaultTheme,\n    };\n  }\n\n  updateTheme = updates => {\n    this.setState(({ theme }) => ({\n      theme: deepmerge(theme, updates),\n    }));\n  };\n\n  replaceTheme = theme => {\n    this.setState(() => ({\n      theme: deepmerge(this.defaultTheme, theme),\n    }));\n  };\n\n  getTheme = () => this.state.theme;\n\n  render() {\n    return (\n      <ThemeContext.Provider\n        value={{\n          theme: this.state.theme,\n          updateTheme: this.updateTheme,\n          replaceTheme: this.replaceTheme,\n        }}\n      >\n        {this.props.children}\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nThemeProvider.propTypes = {\n  theme: PropTypes.object,\n  children: PropTypes.node.isRequired,\n};\n\nThemeProvider.defaultProps = {\n  theme: {},\n};\n\nexport const ThemeConsumer = ThemeContext.Consumer;\n"]},"metadata":{},"sourceType":"module"}