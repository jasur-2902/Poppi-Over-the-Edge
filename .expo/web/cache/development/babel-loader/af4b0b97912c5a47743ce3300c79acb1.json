{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { findDOMNode } from 'react-dom';\nimport * as Creator from \"./Creator.web\";\nexport default function captureRef(_x) {\n  return _captureRef.apply(this, arguments);\n}\n\nfunction _captureRef() {\n  _captureRef = _asyncToGenerator(function* (component) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var element = getElement(component || document.body);\n    var {\n      format = 'png'\n    } = options;\n    var finalFormat = format.toLowerCase();\n\n    switch (finalFormat) {\n      case 'jpg':\n        return Creator.createJPEGAsync(element, options);\n\n      case 'png':\n        return Creator.createPNGAsync(element, options);\n\n      case 'raw':\n        return Creator.createPixelDataAsync(element, options);\n\n      case 'svg':\n        return Creator.createSVGAsync(element, options);\n\n      case 'blob':\n        return Creator.createBlobAsync(element, options);\n\n      default:\n        throw new Error(\"takeSnapshotAsync: Unsupported format: \".concat(finalFormat));\n    }\n  });\n  return _captureRef.apply(this, arguments);\n}\n\nvar getElement = component => {\n  try {\n    return findDOMNode(component);\n  } catch (e) {\n    return component;\n  }\n};","map":{"version":3,"sources":["../../src/takeSnapshotAsync/captureRef.web.ts"],"names":[],"mappings":";;;;AAAA,SAAS,WAAT,QAA4B,WAA5B;AAGA,OAAO,KAAK,OAAZ;AAQA,wBAA8B,UAA9B;AAAA;AAAA;;;kCAAe,WACb,SADa,EAEe;AAAA,QAA5B,OAA4B,uEAAF,EAAE;AAE5B,QAAM,OAAO,GAAG,UAAU,CAAC,SAAS,IAAI,QAAQ,CAAC,IAAvB,CAA1B;AACA,QAAM;AAAE,MAAA,MAAM,GAAG;AAAX,QAAqB,OAA3B;AACA,QAAM,WAAW,GAAG,MAAM,CAAC,WAAP,EAApB;;AACA,YAAQ,WAAR;AACE,WAAK,KAAL;AACE,eAAO,OAAO,CAAC,eAAR,CAAwB,OAAxB,EAAiC,OAAjC,CAAP;;AACF,WAAK,KAAL;AACE,eAAO,OAAO,CAAC,cAAR,CAAuB,OAAvB,EAAgC,OAAhC,CAAP;;AACF,WAAK,KAAL;AACE,eAAO,OAAO,CAAC,oBAAR,CAA6B,OAA7B,EAAsC,OAAtC,CAAP;;AACF,WAAK,KAAL;AACE,eAAO,OAAO,CAAC,cAAR,CAAuB,OAAvB,EAAgC,OAAhC,CAAP;;AACF,WAAK,MAAL;AACE,eAAO,OAAO,CAAC,eAAR,CAAwB,OAAxB,EAAiC,OAAjC,CAAP;;AACF;AACE,cAAM,IAAI,KAAJ,kDAAoD,WAApD,EAAN;AAZJ;AAcD,G;;;;AAED,IAAM,UAAU,GAAG,SAAS,IAAG;AAC7B,MAAI;AACF,WAAO,WAAW,CAAC,SAAD,CAAlB;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV,WAAO,SAAP;AACD;AACF,CAND","sourcesContent":["import { findDOMNode } from 'react-dom';\nimport { CaptureOptions } from 'react-native-view-shot';\n\nimport * as Creator from './Creator.web';\n\ndeclare const document: Document;\n/**\n * Taking a snapshot of DOM is not part of native browser behavior. \n * This is a hack to best emulate mobile functionality. \n * This implementation is based on https://github.com/pbakaus/domvas by Paul Bakaus http://paulbakaus.com/\n */\nexport default async function captureRef(\n  component: Element,\n  options: CaptureOptions = {}\n): Promise<string | Uint8ClampedArray | Blob> {\n  const element = getElement(component || document.body);\n  const { format = 'png' } = options;\n  const finalFormat = format.toLowerCase();\n  switch (finalFormat) {\n    case 'jpg':\n      return Creator.createJPEGAsync(element, options);\n    case 'png':\n      return Creator.createPNGAsync(element, options);\n    case 'raw':\n      return Creator.createPixelDataAsync(element, options);\n    case 'svg':\n      return Creator.createSVGAsync(element, options);\n    case 'blob':\n      return Creator.createBlobAsync(element, options);\n    default:\n      throw new Error(`takeSnapshotAsync: Unsupported format: ${finalFormat}`);\n  }\n}\n\nconst getElement = component => {\n  try {\n    return findDOMNode(component);\n  } catch (e) {\n    return component;\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}