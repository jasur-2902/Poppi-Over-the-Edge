{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jshukurov\\\\Desktop\\\\Poppi Over The Edge\\\\Poppi-Over-the-Edge-master\\\\node_modules\\\\expo-pixi\\\\lib\\\\components\\\\Sketch.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { GLView } from 'expo-gl';\nimport React from 'react';\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport PIXI from \"../Pixi\";\nimport { takeSnapshotAsync } from \"../utils\";\nglobal.__ExpoSketchId = global.__ExpoSketchId || 0;\nvar scale = PixelRatio.get();\n\nfunction scaled(_ref) {\n  var {\n    locationX: x,\n    locationY: y\n  } = _ref;\n  return {\n    x: x * scale,\n    y: y * scale\n  };\n}\n\nexport default class Sketch extends React.Component {\n  constructor() {\n    var _this;\n\n    super(...arguments);\n    _this = this;\n    this.lines = [];\n    this.points = [];\n    this.ease = 0.3;\n    this.delay = 10;\n\n    this.setupPanResponder = () => {\n      var onEnd = event => {\n        this.drawLine(scaled(event), false);\n        setTimeout(() => this.props.onChange && this.props.onChange(this.renderer), 1);\n      };\n\n      this.panResponder = PanResponder.create({\n        onStartShouldSetResponder: () => true,\n        onStartShouldSetPanResponderCapture: () => true,\n        onMoveShouldSetPanResponder: (evt, gestureState) => true,\n        onPanResponderGrant: (_ref2) => {\n          var {\n            nativeEvent\n          } = _ref2;\n          var {\n            x,\n            y\n          } = scaled(nativeEvent);\n          var {\n            strokeColor: color,\n            strokeWidth: width,\n            strokeAlpha: alpha\n          } = this.props;\n          this.drawLine({\n            x,\n            y,\n            color,\n            width,\n            alpha\n          }, true);\n        },\n        onPanResponderMove: (_ref3) => {\n          var {\n            nativeEvent\n          } = _ref3;\n          var point = scaled(nativeEvent);\n          var time = Date.now();\n          var delta = time - this.lastTime;\n          if (delta < this.delay) return;\n          this.lastTime = time;\n          this.drawLine({\n            x: this.lastPoint.x + this.ease * (point.x - this.lastPoint.x),\n            y: this.lastPoint.y + this.ease * (point.y - this.lastPoint.y),\n            color: this.props.strokeColor,\n            width: this.props.strokeWidth,\n            alpha: this.props.strokeAlpha\n          }, false);\n        },\n        onPanResponderRelease: (_ref4) => {\n          var {\n            nativeEvent\n          } = _ref4;\n          return onEnd(nativeEvent);\n        },\n        onPanResponderTerminate: (_ref5) => {\n          var {\n            nativeEvent\n          } = _ref5;\n          return onEnd(nativeEvent);\n        }\n      });\n    };\n\n    this.shouldComponentUpdate = () => false;\n\n    this.persistStroke = () => {\n      if (this.graphics) {\n        this.graphics.points = this.points;\n        this.lines.push(this.graphics);\n      }\n\n      this.lastTime = 0;\n      this.points = [];\n    };\n\n    this.undo = () => {\n      if (!this.renderer) {\n        return null;\n      }\n\n      var {\n        children\n      } = this.stage;\n\n      if (children.length > 0) {\n        var child = children[children.length - 1];\n        this.stage.removeChild(child);\n\n        this.renderer._update();\n\n        setTimeout(() => this.props.onChange && this.props.onChange(this.renderer), 2);\n        return child;\n      } else if (this.points.length > 0) {\n        this.persistStroke();\n        return this.undo();\n      }\n    };\n\n    this.clear = () => {\n      this.provider.reset();\n\n      if (!this.renderer) {\n        return null;\n      }\n\n      if (this.stage.children.length > 0) {\n        this.stage.removeChildren();\n\n        this.renderer._update();\n      }\n\n      return null;\n    };\n\n    this.takeSnapshotAsync = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return takeSnapshotAsync(_this.glView, ...args);\n    };\n\n    this.onContextCreate = function () {\n      var _ref6 = _asyncToGenerator(function* (context) {\n        _this.context = context;\n        _this.stage = new PIXI.Container();\n\n        var getAttributes = context.getContextAttributes || (() => ({}));\n\n        context.getContextAttributes = () => {\n          var contextAttributes = getAttributes();\n          return _objectSpread({}, contextAttributes, {\n            stencil: true\n          });\n        };\n\n        _this.renderer = PIXI.autoDetectRenderer(context.drawingBufferWidth, context.drawingBufferHeight, {\n          context,\n          antialias: true,\n          backgroundColor: 'transparent',\n          transparent: true,\n          autoStart: false\n        });\n\n        _this.renderer._update = () => {\n          _this.renderer.render(_this.stage);\n\n          context.endFrameEXP();\n        };\n\n        _this.props.onReady && _this.props.onReady(context);\n        var {\n          initialLines\n        } = _this.props;\n\n        if (initialLines) {\n          for (var line of initialLines) {\n            _this.buildLine(line);\n          }\n\n          _this.lines = initialLines;\n        }\n      });\n\n      return function (_x) {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n\n    this.buildLine = (_ref7) => {\n      var {\n        points,\n        color,\n        alpha,\n        width\n      } = _ref7;\n\n      for (var i = 0; i < points.length; i++) {\n        this.drawLine(_objectSpread({\n          color,\n          alpha,\n          width\n        }, points[i]), i === 0);\n      }\n    };\n\n    this.onLayout = (_ref8) => {\n      var {\n        nativeEvent: {\n          layout: {\n            width,\n            height\n          }\n        }\n      } = _ref8;\n\n      if (this.renderer) {\n        var _scale = PixelRatio.get();\n\n        this.renderer.resize(width * _scale, height * _scale);\n\n        this.renderer._update();\n      }\n    };\n\n    this.setRef = ref => {\n      this.glView = ref;\n    };\n  }\n\n  componentWillMount() {\n    global.__ExpoSketchId++;\n    this.setupPanResponder();\n  }\n\n  drawLine(point, newLine) {\n    if (!this.renderer || !newLine && !this.graphics) {\n      return;\n    }\n\n    if (newLine) {\n      this.persistStroke();\n      this.graphics = new PIXI.Graphics();\n      this.stage.addChild(this.graphics);\n      this.lastPoint = point;\n      this.points = [point];\n      return;\n    }\n\n    this.lastPoint = point;\n    this.points.push(point);\n    this.graphics.clear();\n\n    for (var i = 0; i < this.points.length; i++) {\n      var {\n        x,\n        y,\n        color,\n        width,\n        alpha\n      } = this.points[i];\n\n      if (i === 0) {\n        this.graphics.lineStyle(width || this.props.strokeWidth || 10, color || this.props.strokeColor || 0x000000, alpha || this.props.strokeAlpha || 1);\n        this.graphics.moveTo(x, y);\n      } else {\n        this.graphics.lineTo(x, y);\n      }\n    }\n\n    this.graphics.currentPath.shape.closed = false;\n    this.graphics.endFill();\n\n    this.renderer._update();\n  }\n\n  render() {\n    return React.createElement(GLView, _extends({}, this.panResponder.panHandlers, {\n      onLayout: this.onLayout,\n      key: 'Expo.Sketch-' + global.__ExpoSketchId,\n      ref: this.setRef\n    }, this.props, {\n      onContextCreate: this.onContextCreate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/expo-pixi/lib/components/Sketch.js"],"names":["GLView","React","PIXI","takeSnapshotAsync","global","__ExpoSketchId","scale","PixelRatio","get","scaled","locationX","x","locationY","y","Sketch","Component","lines","points","ease","delay","setupPanResponder","onEnd","event","drawLine","setTimeout","props","onChange","renderer","panResponder","PanResponder","create","onStartShouldSetResponder","onStartShouldSetPanResponderCapture","onMoveShouldSetPanResponder","evt","gestureState","onPanResponderGrant","nativeEvent","strokeColor","color","strokeWidth","width","strokeAlpha","alpha","onPanResponderMove","point","time","Date","now","delta","lastTime","lastPoint","onPanResponderRelease","onPanResponderTerminate","shouldComponentUpdate","persistStroke","graphics","push","undo","children","stage","length","child","removeChild","_update","clear","provider","reset","removeChildren","args","glView","onContextCreate","context","Container","getAttributes","getContextAttributes","contextAttributes","stencil","autoDetectRenderer","drawingBufferWidth","drawingBufferHeight","antialias","backgroundColor","transparent","autoStart","render","endFrameEXP","onReady","initialLines","line","buildLine","i","onLayout","layout","height","resize","setRef","ref","componentWillMount","newLine","Graphics","addChild","lineStyle","moveTo","lineTo","currentPath","shape","closed","endFill","panHandlers"],"mappings":"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","sourcesContent":["//@flow\nimport { GLView } from 'expo-gl';\nimport React from 'react';\nimport { PanResponder, PixelRatio } from 'react-native';\n\nimport PIXI from '../Pixi';\nimport { takeSnapshotAsync } from '../utils';\n\nglobal.__ExpoSketchId = global.__ExpoSketchId || 0;\n\ntype Props = {\n  strokeColor: number | string,\n  strokeWidth: number,\n  strokeAlpha: number,\n  onChange: () => PIXI.Renderer,\n  onReady: () => WebGLRenderingContext,\n  initialLines?: Array<Point>,\n};\n\nconst scale = PixelRatio.get();\n\nfunction scaled({ locationX: x, locationY: y }) {\n  return { x: x * scale, y: y * scale };\n}\n\ntype Point = {\n  x: number,\n  y: number,\n  color: string | number,\n  width: number,\n  alpha: number,\n};\n\nexport default class Sketch extends React.Component<Props> {\n  lines = [];\n  stage: PIXI.Stage;\n  graphics;\n  points = [];\n  lastPoint: Point;\n  lastTime: number;\n  ease: number = 0.3; // only move 0.3 in the direction of the pointer, this smooths it out\n  delay: number = 10;\n  panResponder: PanResponder;\n  renderer: PIXI.Renderer;\n\n  componentWillMount() {\n    global.__ExpoSketchId++;\n    this.setupPanResponder();\n  }\n\n  setupPanResponder = () => {\n    const onEnd = event => {\n      this.drawLine(scaled(event), false);\n\n      setTimeout(() => this.props.onChange && this.props.onChange(this.renderer), 1);\n    };\n\n    this.panResponder = PanResponder.create({\n      onStartShouldSetResponder: () => true,\n      onStartShouldSetPanResponderCapture: () => true,\n      onMoveShouldSetPanResponder: (evt, gestureState) => true,\n      onPanResponderGrant: ({ nativeEvent }) => {\n        const { x, y } = scaled(nativeEvent);\n        const { strokeColor: color, strokeWidth: width, strokeAlpha: alpha } = this.props;\n        this.drawLine(\n          {\n            x,\n            y,\n            color,\n            width,\n            alpha,\n          },\n          true\n        );\n      },\n      onPanResponderMove: ({ nativeEvent }) => {\n        const point = scaled(nativeEvent);\n        // throttle updates: once for every 10ms\n        const time = Date.now();\n        const delta = time - this.lastTime;\n        if (delta < this.delay) return;\n        this.lastTime = time;\n\n        this.drawLine(\n          {\n            x: this.lastPoint.x + this.ease * (point.x - this.lastPoint.x),\n            y: this.lastPoint.y + this.ease * (point.y - this.lastPoint.y),\n            color: this.props.strokeColor,\n            width: this.props.strokeWidth,\n            alpha: this.props.strokeAlpha,\n          },\n          false\n        );\n      },\n      onPanResponderRelease: ({ nativeEvent }) => onEnd(nativeEvent),\n      onPanResponderTerminate: ({ nativeEvent }) => onEnd(nativeEvent),\n    });\n  };\n\n  shouldComponentUpdate = () => false;\n\n  persistStroke = () => {\n    if (this.graphics) {\n      this.graphics.points = this.points;\n      this.lines.push(this.graphics);\n    }\n    this.lastTime = 0;\n    this.points = [];\n  };\n  drawLine(point: Point, newLine: boolean) {\n    if (!this.renderer || (!newLine && !this.graphics)) {\n      return;\n    }\n\n    if (newLine) {\n      this.persistStroke();\n      this.graphics = new PIXI.Graphics();\n      this.stage.addChild(this.graphics);\n      this.lastPoint = point;\n      this.points = [point];\n      return;\n    }\n    this.lastPoint = point;\n    this.points.push(point);\n\n    this.graphics.clear();\n    for (let i = 0; i < this.points.length; i++) {\n      const { x, y, color, width, alpha } = this.points[i];\n      if (i === 0) {\n        this.graphics.lineStyle(\n          width || this.props.strokeWidth || 10,\n          color || this.props.strokeColor || 0x000000,\n          alpha || this.props.strokeAlpha || 1\n        );\n        this.graphics.moveTo(x, y);\n      } else {\n        this.graphics.lineTo(x, y);\n      }\n    }\n    this.graphics.currentPath.shape.closed = false;\n    this.graphics.endFill(); /// TODO: this may be wrong: need stroke\n    this.renderer._update();\n  }\n\n  undo = () => {\n    if (!this.renderer) {\n      return null;\n    }\n\n    const { children } = this.stage;\n    if (children.length > 0) {\n      const child = children[children.length - 1];\n      this.stage.removeChild(child);\n      this.renderer._update();\n      // TODO: This doesn't really work :/\n      setTimeout(() => this.props.onChange && this.props.onChange(this.renderer), 2);\n      return child;\n    } else if (this.points.length > 0) {\n      this.persistStroke();\n      return this.undo();\n    }\n  };\n\n  clear = () => {\n    this.provider.reset();\n    if (!this.renderer) {\n      return null;\n    }\n\n    if (this.stage.children.length > 0) {\n      this.stage.removeChildren();\n      this.renderer._update();\n    }\n\n    return null;\n  };\n\n  takeSnapshotAsync = (...args) => {\n    return takeSnapshotAsync(this.glView, ...args);\n  };\n\n  onContextCreate = async (context: WebGLRenderingContext) => {\n    this.context = context;\n    this.stage = new PIXI.Container();\n\n    const getAttributes = context.getContextAttributes || (() => ({}));\n    context.getContextAttributes = () => {\n      const contextAttributes = getAttributes();\n      return {\n        ...contextAttributes,\n        stencil: true,\n      };\n    };\n\n    this.renderer = PIXI.autoDetectRenderer(\n      context.drawingBufferWidth,\n      context.drawingBufferHeight,\n      {\n        context,\n        antialias: true,\n        backgroundColor: 'transparent',\n        transparent: true,\n        autoStart: false,\n      }\n    );\n    this.renderer._update = () => {\n      this.renderer.render(this.stage);\n      context.endFrameEXP();\n    };\n    this.props.onReady && this.props.onReady(context);\n\n    const { initialLines } = this.props;\n    if (initialLines) {\n      for (let line of initialLines) {\n        this.buildLine(line);\n      }\n      this.lines = initialLines;\n    }\n  };\n\n  buildLine = ({ points, color, alpha, width }) => {\n    for (let i = 0; i < points.length; i++) {\n      this.drawLine({ color, alpha, width, ...points[i] }, i === 0);\n    }\n  };\n\n  onLayout = ({\n    nativeEvent: {\n      layout: { width, height },\n    },\n  }) => {\n    if (this.renderer) {\n      const scale = PixelRatio.get();\n      this.renderer.resize(width * scale, height * scale);\n      this.renderer._update();\n    }\n  };\n\n  setRef = ref => {\n    this.glView = ref;\n  };\n\n  render() {\n    return (\n      <GLView\n        {...this.panResponder.panHandlers}\n        onLayout={this.onLayout}\n        key={'Expo.Sketch-' + global.__ExpoSketchId}\n        ref={this.setRef}\n        {...this.props}\n        onContextCreate={this.onContextCreate}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}