{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport ExponentAV from \"../ExponentAV\";\nvar _enabled = true;\nexport function isAudioEnabled() {\n  return _enabled;\n}\nexport function throwIfAudioIsDisabled() {\n  if (!_enabled) {\n    throw new Error('Cannot complete operation because audio is not enabled.');\n  }\n}\nexport function setIsEnabledAsync(_x) {\n  return _setIsEnabledAsync.apply(this, arguments);\n}\n\nfunction _setIsEnabledAsync() {\n  _setIsEnabledAsync = _asyncToGenerator(function* (value) {\n    _enabled = value;\n    yield ExponentAV.setAudioIsEnabled(value);\n  });\n  return _setIsEnabledAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../../src/Audio/AudioAvailability.ts"],"names":[],"mappings":";;;;AAAA,OAAO,UAAP;AAEA,IAAI,QAAQ,GAAG,IAAf;AAEA,OAAM,SAAU,cAAV,GAAwB;AAC5B,SAAO,QAAP;AACD;AAED,OAAM,SAAU,sBAAV,GAAgC;AACpC,MAAI,CAAC,QAAL,EAAe;AACb,UAAM,IAAI,KAAJ,CAAU,yDAAV,CAAN;AACD;AACF;AAED,gBAAsB,iBAAtB;AAAA;AAAA;;;yCAAO,WAAiC,KAAjC,EAA+C;AACpD,IAAA,QAAQ,GAAG,KAAX;AACA,UAAM,UAAU,CAAC,iBAAX,CAA6B,KAA7B,CAAN;AAKD,G","sourcesContent":["import ExponentAV from '../ExponentAV';\n\nlet _enabled = true;\n\nexport function isAudioEnabled(): boolean {\n  return _enabled;\n}\n\nexport function throwIfAudioIsDisabled(): void {\n  if (!_enabled) {\n    throw new Error('Cannot complete operation because audio is not enabled.');\n  }\n}\n\nexport async function setIsEnabledAsync(value: boolean): Promise<void> {\n  _enabled = value;\n  await ExponentAV.setAudioIsEnabled(value);\n  // TODO : We immediately pause all players when disabled, but we do not resume all shouldPlay\n  // players when enabled. Perhaps for completeness we should allow this; the design of the\n  // enabling API is for people to enable / disable this audio library, but I think that it should\n  // intuitively also double as a global pause/resume.\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}