{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nvar NativeProxy = NativeModules.ExpoNativeModuleProxy;\nvar modulesConstantsKey = 'modulesConstants';\nvar exportedMethodsKey = 'exportedMethods';\nvar NativeModulesProxy = {};\n\nif (NativeProxy) {\n  Object.keys(NativeProxy[exportedMethodsKey]).forEach(moduleName => {\n    NativeModulesProxy[moduleName] = NativeProxy[modulesConstantsKey][moduleName] || {};\n    NativeProxy[exportedMethodsKey][moduleName].forEach(methodInfo => {\n      NativeModulesProxy[moduleName][methodInfo.name] = _asyncToGenerator(function* () {\n        var {\n          key,\n          argumentsCount\n        } = methodInfo;\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        if (argumentsCount !== args.length) {\n          throw new Error(\"Native method \".concat(moduleName, \".\").concat(methodInfo.name, \" expects \").concat(argumentsCount, \" \").concat(argumentsCount === 1 ? 'argument' : 'arguments', \" but received \").concat(args.length));\n        }\n\n        return yield NativeProxy.callMethod(moduleName, key, args);\n      });\n    });\n\n    NativeModulesProxy[moduleName].addListener = function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return NativeModules.EXReactNativeEventEmitter.addProxiedListener(moduleName, ...args);\n    };\n\n    NativeModulesProxy[moduleName].removeListeners = function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      return NativeModules.EXReactNativeEventEmitter.removeProxiedListeners(moduleName, ...args);\n    };\n  });\n} else {\n  console.warn(\"The \\\"ExpoNativeModulesProxy\\\" native module is not exported through NativeModules; verify that expo-react-native-adapter's native code is linked properly\");\n}\n\nexport default NativeModulesProxy;","map":{"version":3,"sources":["../src/NativeModulesProxy.ts"],"names":[],"mappings":";;;;;AAEA,IAAM,WAAW,GAAG,aAAa,CAAC,qBAAlC;AACA,IAAM,mBAAmB,GAAG,kBAA5B;AACA,IAAM,kBAAkB,GAAG,iBAA3B;AAQA,IAAM,kBAAkB,GAAgD,EAAxE;;AAEA,IAAI,WAAJ,EAAiB;AACf,EAAA,MAAM,CAAC,IAAP,CAAY,WAAW,CAAC,kBAAD,CAAvB,EAA6C,OAA7C,CAAqD,UAAU,IAAG;AAChE,IAAA,kBAAkB,CAAC,UAAD,CAAlB,GAAiC,WAAW,CAAC,mBAAD,CAAX,CAAiC,UAAjC,KAAgD,EAAjF;AACA,IAAA,WAAW,CAAC,kBAAD,CAAX,CAAgC,UAAhC,EAA4C,OAA5C,CAAoD,UAAU,IAAG;AAC/D,MAAA,kBAAkB,CAAC,UAAD,CAAlB,CAA+B,UAAU,CAAC,IAA1C,sBAAkD,aAA2C;AAC3F,YAAM;AAAE,UAAA,GAAF;AAAO,UAAA;AAAP,YAA0B,UAAhC;;AAD2F,0CAAjC,IAAiC;AAAjC,UAAA,IAAiC;AAAA;;AAE3F,YAAI,cAAc,KAAK,IAAI,CAAC,MAA5B,EAAoC;AAClC,gBAAM,IAAI,KAAJ,yBACa,UADb,cAC2B,UAAU,CAAC,IADtC,sBACsD,cADtD,cAEF,cAAc,KAAK,CAAnB,GAAuB,UAAvB,GAAoC,WAFlC,2BAGa,IAAI,CAAC,MAHlB,EAAN;AAKD;;AACD,qBAAa,WAAW,CAAC,UAAZ,CAAuB,UAAvB,EAAmC,GAAnC,EAAwC,IAAxC,CAAb;AACD,OAVD;AAWD,KAZD;;AAmBA,IAAA,kBAAkB,CAAC,UAAD,CAAlB,CAA+B,WAA/B,GAA6C;AAAA,yCAAI,IAAJ;AAAI,QAAA,IAAJ;AAAA;;AAAA,aAC3C,aAAa,CAAC,yBAAd,CAAwC,kBAAxC,CAA2D,UAA3D,EAAuE,GAAG,IAA1E,CAD2C;AAAA,KAA7C;;AAEA,IAAA,kBAAkB,CAAC,UAAD,CAAlB,CAA+B,eAA/B,GAAiD;AAAA,yCAAI,IAAJ;AAAI,QAAA,IAAJ;AAAA;;AAAA,aAC/C,aAAa,CAAC,yBAAd,CAAwC,sBAAxC,CAA+D,UAA/D,EAA2E,GAAG,IAA9E,CAD+C;AAAA,KAAjD;AAED,GAzBD;AA0BD,CA3BD,MA2BO;AACL,EAAA,OAAO,CAAC,IAAR;AAGD;;AAED,eAAe,kBAAf","sourcesContent":["import { NativeModules } from 'react-native';\n\nconst NativeProxy = NativeModules.ExpoNativeModuleProxy;\nconst modulesConstantsKey = 'modulesConstants';\nconst exportedMethodsKey = 'exportedMethods';\n\ntype ProxyNativeModule = {\n  [propertyName: string]: any;\n  addListener: (eventName: string) => void;\n  removeListeners: (count: number) => void;\n};\n\nconst NativeModulesProxy: { [moduleName: string]: ProxyNativeModule } = {};\n\nif (NativeProxy) {\n  Object.keys(NativeProxy[exportedMethodsKey]).forEach(moduleName => {\n    NativeModulesProxy[moduleName] = NativeProxy[modulesConstantsKey][moduleName] || {};\n    NativeProxy[exportedMethodsKey][moduleName].forEach(methodInfo => {\n      NativeModulesProxy[moduleName][methodInfo.name] = async (...args: unknown[]): Promise<any> => {\n        const { key, argumentsCount } = methodInfo;\n        if (argumentsCount !== args.length) {\n          throw new Error(\n            `Native method ${moduleName}.${methodInfo.name} expects ${argumentsCount} ${\n              argumentsCount === 1 ? 'argument' : 'arguments'\n            } but received ${args.length}`\n          );\n        }\n        return await NativeProxy.callMethod(moduleName, key, args);\n      };\n    });\n\n    // These are called by EventEmitter (which is a wrapper for NativeEventEmitter)\n    // only on iOS and they use iOS-specific native module, EXReactNativeEventEmitter.\n    //\n    // On Android only {start,stop}Observing are called on the native module\n    // and these should be exported as Expo methods.\n    NativeModulesProxy[moduleName].addListener = (...args) =>\n      NativeModules.EXReactNativeEventEmitter.addProxiedListener(moduleName, ...args);\n    NativeModulesProxy[moduleName].removeListeners = (...args) =>\n      NativeModules.EXReactNativeEventEmitter.removeProxiedListeners(moduleName, ...args);\n  });\n} else {\n  console.warn(\n    `The \"ExpoNativeModulesProxy\" native module is not exported through NativeModules; verify that expo-react-native-adapter's native code is linked properly`\n  );\n}\n\nexport default NativeModulesProxy;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}