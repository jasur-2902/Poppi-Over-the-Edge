{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nexport default {\n  get name() {\n    return 'ExpoRandom';\n  },\n\n  getRandomBytesAsync(length) {\n    return _asyncToGenerator(function* () {\n      var array = new Uint8Array(length);\n      return window.crypto.getRandomValues(array);\n    })();\n  }\n\n};","map":{"version":3,"sources":["../src/ExpoRandom.web.ts"],"names":[],"mappings":";;;;AAAA,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,YAAP;AACD,GAHY;;AAIP,EAAA,mBAAN,CAA0B,MAA1B,EAAwC;AAAA;AACtC,UAAM,KAAK,GAAG,IAAI,UAAJ,CAAe,MAAf,CAAd;AACA,aAAO,MAAM,CAAC,MAAP,CAAc,eAAd,CAA8B,KAA9B,CAAP;AAFsC;AAGvC;;AAPY,CAAf","sourcesContent":["export default {\n  get name(): string {\n    return 'ExpoRandom';\n  },\n  async getRandomBytesAsync(length: number): Promise<Uint8Array> {\n    const array = new Uint8Array(length);\n    return window.crypto.getRandomValues(array);\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}