{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { EventEmitter } from '@unimodules/core';\nimport { throwIfAudioIsDisabled } from \"./AudioAvailability\";\nimport { PlaybackMixin, assertStatusValuesInBounds, getNativeSourceAndFullInitialStatusForLoadAsync, getUnloadedStatus } from \"../AV\";\nimport ExponentAV from \"../ExponentAV\";\nexport class Sound {\n  constructor() {\n    var _this = this;\n\n    this._loaded = false;\n    this._loading = false;\n    this._key = null;\n    this._lastStatusUpdate = null;\n    this._lastStatusUpdateTime = null;\n    this._subscriptions = [];\n    this._eventEmitter = new EventEmitter(ExponentAV);\n    this._coalesceStatusUpdatesInMillis = 100;\n    this._onPlaybackStatusUpdate = null;\n\n    this._internalStatusUpdateCallback = (_ref) => {\n      var {\n        key,\n        status\n      } = _ref;\n\n      if (this._key === key) {\n        this._callOnPlaybackStatusUpdateForNewStatus(status);\n      }\n    };\n\n    this._internalErrorCallback = (_ref2) => {\n      var {\n        key,\n        error\n      } = _ref2;\n\n      if (this._key === key) {\n        this._errorCallback(error);\n      }\n    };\n\n    this._errorCallback = error => {\n      this._clearSubscriptions();\n\n      this._loaded = false;\n      this._key = null;\n\n      this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));\n    };\n\n    this.getStatusAsync = _asyncToGenerator(function* () {\n      if (_this._loaded) {\n        return _this._performOperationAndHandleStatusAsync(() => ExponentAV.getStatusForSound(_this._key));\n      }\n\n      var status = getUnloadedStatus();\n\n      _this._callOnPlaybackStatusUpdateForNewStatus(status);\n\n      return status;\n    });\n  }\n\n  _callOnPlaybackStatusUpdateForNewStatus(status) {\n    var shouldDismissBasedOnCoalescing = this._lastStatusUpdateTime && JSON.stringify(status) === this._lastStatusUpdate && Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n\n    if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n      this._onPlaybackStatusUpdate(status);\n\n      this._lastStatusUpdateTime = new Date();\n      this._lastStatusUpdate = JSON.stringify(status);\n    }\n  }\n\n  _performOperationAndHandleStatusAsync(operation) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      throwIfAudioIsDisabled();\n\n      if (_this2._loaded) {\n        var status = yield operation();\n\n        _this2._callOnPlaybackStatusUpdateForNewStatus(status);\n\n        return status;\n      } else {\n        throw new Error('Cannot complete operation because sound is not loaded.');\n      }\n    })();\n  }\n\n  _subscribeToNativeEvents() {\n    if (this._loaded) {\n      this._subscriptions.push(this._eventEmitter.addListener('didUpdatePlaybackStatus', this._internalStatusUpdateCallback));\n\n      this._subscriptions.push(this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback));\n    }\n  }\n\n  _clearSubscriptions() {\n    this._subscriptions.forEach(e => e.remove());\n\n    this._subscriptions = [];\n  }\n\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  loadAsync(source) {\n    var _arguments = arguments,\n        _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      var initialStatus = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : {};\n      var downloadFirst = _arguments.length > 2 && _arguments[2] !== undefined ? _arguments[2] : true;\n      throwIfAudioIsDisabled();\n\n      if (_this3._loading) {\n        throw new Error('The Sound is already loading.');\n      }\n\n      if (!_this3._loaded) {\n        _this3._loading = true;\n        var {\n          nativeSource,\n          fullInitialStatus\n        } = yield getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n        return new Promise((resolve, reject) => {\n          var loadSuccess = result => {\n            var [key, status] = result;\n            _this3._key = key;\n            _this3._loaded = true;\n            _this3._loading = false;\n\n            _this3._subscribeToNativeEvents();\n\n            _this3._callOnPlaybackStatusUpdateForNewStatus(status);\n\n            resolve(status);\n          };\n\n          var loadError = error => {\n            _this3._loading = false;\n            reject(error);\n          };\n\n          ExponentAV.loadForSound(nativeSource, fullInitialStatus).then(loadSuccess).catch(loadError);\n        });\n      } else {\n        throw new Error('The Sound is already loaded.');\n      }\n    })();\n  }\n\n  unloadAsync() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this4._loaded) {\n        _this4._loaded = false;\n        var key = _this4._key;\n        _this4._key = null;\n        var status = yield ExponentAV.unloadForSound(key);\n\n        _this4._callOnPlaybackStatusUpdateForNewStatus(status);\n\n        _this4._clearSubscriptions();\n\n        return status;\n      } else {\n        return _this4.getStatusAsync();\n      }\n    })();\n  }\n\n  setStatusAsync(status) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      assertStatusValuesInBounds(status);\n      return _this5._performOperationAndHandleStatusAsync(() => ExponentAV.setStatusForSound(_this5._key, status));\n    })();\n  }\n\n  replayAsync() {\n    var _arguments2 = arguments,\n        _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      var status = _arguments2.length > 0 && _arguments2[0] !== undefined ? _arguments2[0] : {};\n\n      if (status.positionMillis && status.positionMillis !== 0) {\n        throw new Error('Requested position after replay has to be 0.');\n      }\n\n      return _this6._performOperationAndHandleStatusAsync(() => ExponentAV.replaySound(_this6._key, _objectSpread({}, status, {\n        positionMillis: 0,\n        shouldPlay: true\n      })));\n    })();\n  }\n\n}\n\nSound.create = function () {\n  var _ref4 = _asyncToGenerator(function* (source) {\n    var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var onPlaybackStatusUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var downloadFirst = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    console.warn(\"Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name\");\n    return Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst);\n  });\n\n  return function (_x) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nSound.createAsync = function () {\n  var _ref5 = _asyncToGenerator(function* (source) {\n    var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var onPlaybackStatusUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var downloadFirst = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    var sound = new Sound();\n    sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n    var status = yield sound.loadAsync(source, initialStatus, downloadFirst);\n    return {\n      sound,\n      status\n    };\n  });\n\n  return function (_x2) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\n_extends(Sound.prototype, PlaybackMixin);","map":{"version":3,"sources":["../../src/Audio/Sound.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,SAAS,YAAT,QAA6B,kBAA7B;AACA,SAAS,sBAAT;AACA,SAEE,aAFF,EAME,0BANF,EAOE,+CAPF,EAQE,iBARF;AAWA,OAAO,UAAP;AAGA,OAAM,MAAO,KAAP,CAAY;AAAlB,EAAA,WAAA,GAAA;AAAA;;AACE,SAAA,OAAA,GAAmB,KAAnB;AACA,SAAA,QAAA,GAAoB,KAApB;AACA,SAAA,IAAA,GAAsB,IAAtB;AACA,SAAA,iBAAA,GAAmC,IAAnC;AACA,SAAA,qBAAA,GAAqC,IAArC;AACA,SAAA,cAAA,GAAgD,EAAhD;AACA,SAAA,aAAA,GAA8B,IAAI,YAAJ,CAAiB,UAAjB,CAA9B;AACA,SAAA,8BAAA,GAAyC,GAAzC;AACA,SAAA,uBAAA,GAAqE,IAArE;;AAsDA,SAAA,6BAAA,GAAgC,UAM3B;AAAA,UAN4B;AAC/B,QAAA,GAD+B;AAE/B,QAAA;AAF+B,OAM5B;;AACH,UAAI,KAAK,IAAL,KAAc,GAAlB,EAAuB;AACrB,aAAK,uCAAL,CAA6C,MAA7C;AACD;AACF,KAVD;;AAYA,SAAA,sBAAA,GAAyB,WAA0D;AAAA,UAAzD;AAAE,QAAA,GAAF;AAAO,QAAA;AAAP,OAAyD;;AACjF,UAAI,KAAK,IAAL,KAAc,GAAlB,EAAuB;AACrB,aAAK,cAAL,CAAoB,KAApB;AACD;AACF,KAJD;;AA2BA,SAAA,cAAA,GAAkB,KAAD,IAAkB;AACjC,WAAK,mBAAL;;AACA,WAAK,OAAL,GAAe,KAAf;AACA,WAAK,IAAL,GAAY,IAAZ;;AACA,WAAK,uCAAL,CAA6C,iBAAiB,CAAC,KAAD,CAA9D;AACD,KALD;;AAYA,SAAA,cAAA,qBAAiB,aAAoC;AACnD,UAAI,KAAI,CAAC,OAAT,EAAkB;AAChB,eAAO,KAAI,CAAC,qCAAL,CAA2C,MAChD,UAAU,CAAC,iBAAX,CAA6B,KAAI,CAAC,IAAlC,CADK,CAAP;AAGD;;AACD,UAAM,MAAM,GAAmB,iBAAiB,EAAhD;;AACA,MAAA,KAAI,CAAC,uCAAL,CAA6C,MAA7C;;AACA,aAAO,MAAP;AACD,KATD;AA6HD;;AA1MC,EAAA,uCAAuC,CAAC,MAAD,EAAuB;AAC5D,QAAM,8BAA8B,GAClC,KAAK,qBAAL,IACA,IAAI,CAAC,SAAL,CAAe,MAAf,MAA2B,KAAK,iBADhC,IAEA,IAAI,CAAC,GAAL,KAAa,KAAK,qBAAL,CAA2B,OAA3B,EAAb,GAAoD,KAAK,8BAH3D;;AAKA,QAAI,KAAK,uBAAL,IAAgC,IAAhC,IAAwC,CAAC,8BAA7C,EAA6E;AAC3E,WAAK,uBAAL,CAA6B,MAA7B;;AACA,WAAK,qBAAL,GAA6B,IAAI,IAAJ,EAA7B;AACA,WAAK,iBAAL,GAAyB,IAAI,CAAC,SAAL,CAAe,MAAf,CAAzB;AACD;AACF;;AAEK,EAAA,qCAAN,CACE,SADF,EAC0C;AAAA;;AAAA;AAExC,MAAA,sBAAsB;;AACtB,UAAI,MAAI,CAAC,OAAT,EAAkB;AAChB,YAAM,MAAM,SAAS,SAAS,EAA9B;;AACA,QAAA,MAAI,CAAC,uCAAL,CAA6C,MAA7C;;AACA,eAAO,MAAP;AACD,OAJD,MAIO;AACL,cAAM,IAAI,KAAJ,CAAU,wDAAV,CAAN;AACD;AATuC;AAUzC;;AAqBD,EAAA,wBAAwB,GAAA;AACtB,QAAI,KAAK,OAAT,EAAkB;AAChB,WAAK,cAAL,CAAoB,IAApB,CACE,KAAK,aAAL,CAAmB,WAAnB,CACE,yBADF,EAEE,KAAK,6BAFP,CADF;;AAOA,WAAK,cAAL,CAAoB,IAApB,CACE,KAAK,aAAL,CAAmB,WAAnB,CAA+B,oBAA/B,EAAqD,KAAK,sBAA1D,CADF;AAGD;AACF;;AAED,EAAA,mBAAmB,GAAA;AACjB,SAAK,cAAL,CAAoB,OAApB,CAA4B,CAAC,IAAI,CAAC,CAAC,MAAF,EAAjC;;AACA,SAAK,cAAL,GAAsB,EAAtB;AACD;;AAyBD,EAAA,yBAAyB,CAAC,sBAAD,EAAkE;AACzF,SAAK,uBAAL,GAA+B,sBAA/B;AACA,SAAK,cAAL;AACD;;AAIK,EAAA,SAAN,CACE,MADF,EAG+B;AAAA;AAAA;;AAAA;AAAA,UAD7B,aAC6B,0EADQ,EACR;AAAA,UAA7B,aAA6B,0EAAJ,IAAI;AAE7B,MAAA,sBAAsB;;AACtB,UAAI,MAAI,CAAC,QAAT,EAAmB;AACjB,cAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AACD;;AACD,UAAI,CAAC,MAAI,CAAC,OAAV,EAAmB;AACjB,QAAA,MAAI,CAAC,QAAL,GAAgB,IAAhB;AAEA,YAAM;AACJ,UAAA,YADI;AAEJ,UAAA;AAFI,kBAGI,+CAA+C,CACvD,MADuD,EAEvD,aAFuD,EAGvD,aAHuD,CAHzD;AAUA,eAAO,IAAI,OAAJ,CAA4B,CAAC,OAAD,EAAU,MAAV,KAAoB;AACrD,cAAM,WAAW,GAAI,MAAD,IAA4C;AAC9D,gBAAM,CAAC,GAAD,EAAM,MAAN,IAAgB,MAAtB;AACA,YAAA,MAAI,CAAC,IAAL,GAAY,GAAZ;AACA,YAAA,MAAI,CAAC,OAAL,GAAe,IAAf;AACA,YAAA,MAAI,CAAC,QAAL,GAAgB,KAAhB;;AACA,YAAA,MAAI,CAAC,wBAAL;;AACA,YAAA,MAAI,CAAC,uCAAL,CAA6C,MAA7C;;AACA,YAAA,OAAO,CAAC,MAAD,CAAP;AACD,WARD;;AAUA,cAAM,SAAS,GAAI,KAAD,IAAiB;AACjC,YAAA,MAAI,CAAC,QAAL,GAAgB,KAAhB;AACA,YAAA,MAAM,CAAC,KAAD,CAAN;AACD,WAHD;;AAKA,UAAA,UAAU,CAAC,YAAX,CAAwB,YAAxB,EAAsC,iBAAtC,EACG,IADH,CACQ,WADR,EAEG,KAFH,CAES,SAFT;AAGD,SAnBM,CAAP;AAoBD,OAjCD,MAiCO;AACL,cAAM,IAAI,KAAJ,CAAU,8BAAV,CAAN;AACD;AAzC4B;AA0C9B;;AAEK,EAAA,WAAN,GAAiB;AAAA;;AAAA;AACf,UAAI,MAAI,CAAC,OAAT,EAAkB;AAChB,QAAA,MAAI,CAAC,OAAL,GAAe,KAAf;AACA,YAAM,GAAG,GAAG,MAAI,CAAC,IAAjB;AACA,QAAA,MAAI,CAAC,IAAL,GAAY,IAAZ;AACA,YAAM,MAAM,SAAS,UAAU,CAAC,cAAX,CAA0B,GAA1B,CAArB;;AACA,QAAA,MAAI,CAAC,uCAAL,CAA6C,MAA7C;;AACA,QAAA,MAAI,CAAC,mBAAL;;AACA,eAAO,MAAP;AACD,OARD,MAQO;AACL,eAAO,MAAI,CAAC,cAAL,EAAP;AACD;AAXc;AAYhB;;AAIK,EAAA,cAAN,CAAqB,MAArB,EAAgD;AAAA;;AAAA;AAC9C,MAAA,0BAA0B,CAAC,MAAD,CAA1B;AACA,aAAO,MAAI,CAAC,qCAAL,CAA2C,MAChD,UAAU,CAAC,iBAAX,CAA6B,MAAI,CAAC,IAAlC,EAAwC,MAAxC,CADK,CAAP;AAF8C;AAK/C;;AAEK,EAAA,WAAN,GAAkD;AAAA;AAAA;;AAAA;AAAA,UAAhC,MAAgC,6EAAF,EAAE;;AAChD,UAAI,MAAM,CAAC,cAAP,IAAyB,MAAM,CAAC,cAAP,KAA0B,CAAvD,EAA0D;AACxD,cAAM,IAAI,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,aAAO,MAAI,CAAC,qCAAL,CAA2C,MAChD,UAAU,CAAC,WAAX,CAAuB,MAAI,CAAC,IAA5B,oBACK,MADL;AAEE,QAAA,cAAc,EAAE,CAFlB;AAGE,QAAA,UAAU,EAAE;AAHd,SADK,CAAP;AALgD;AAYjD;;AAtNe;;AAWT,KAAA,CAAA,MAAA;AAAA,gCAAS,WACd,MADc,EAKuC;AAAA,QAHrD,aAGqD,uEAHhB,EAGgB;AAAA,QAFrD,sBAEqD,uEAFe,IAEf;AAAA,QADrD,aACqD,uEAD5B,IAC4B;AACrD,IAAA,OAAO,CAAC,IAAR;AAGA,WAAO,KAAK,CAAC,WAAN,CAAkB,MAAlB,EAA0B,aAA1B,EAAyC,sBAAzC,EAAiE,aAAjE,CAAP;AACD,GAVM;;AAAA;AAAA;AAAA;AAAA;;AAYA,KAAA,CAAA,WAAA;AAAA,gCAAc,WACnB,MADmB,EAKkC;AAAA,QAHrD,aAGqD,uEAHhB,EAGgB;AAAA,QAFrD,sBAEqD,uEAFe,IAEf;AAAA,QADrD,aACqD,uEAD5B,IAC4B;AACrD,QAAM,KAAK,GAAU,IAAI,KAAJ,EAArB;AACA,IAAA,KAAK,CAAC,yBAAN,CAAgC,sBAAhC;AACA,QAAM,MAAM,SAAyB,KAAK,CAAC,SAAN,CAAgB,MAAhB,EAAwB,aAAxB,EAAuC,aAAvC,CAArC;AACA,WAAO;AAAE,MAAA,KAAF;AAAS,MAAA;AAAT,KAAP;AACD,GAVM;;AAAA;AAAA;AAAA;AAAA;;AA0NT,SAAc,KAAK,CAAC,SAApB,EAA+B,aAA/B","sourcesContent":["import { EventEmitter } from '@unimodules/core';\nimport { throwIfAudioIsDisabled } from './AudioAvailability';\nimport {\n  Playback,\n  PlaybackMixin,\n  PlaybackSource,\n  PlaybackStatus,\n  PlaybackStatusToSet,\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getUnloadedStatus,\n} from '../AV';\nimport { PitchCorrectionQuality } from '../Audio';\nimport ExponentAV from '../ExponentAV';\n\ntype AudioInstance = number | HTMLMediaElement | null;\nexport class Sound implements Playback {\n  _loaded: boolean = false;\n  _loading: boolean = false;\n  _key: AudioInstance = null;\n  _lastStatusUpdate: string | null = null;\n  _lastStatusUpdateTime: Date | null = null;\n  _subscriptions: Array<{ remove: () => void }> = [];\n  _eventEmitter: EventEmitter = new EventEmitter(ExponentAV);\n  _coalesceStatusUpdatesInMillis: number = 100;\n  _onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null = null;\n\n  static create = async (\n    source: PlaybackSource,\n    initialStatus: PlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<{ sound: Sound; status: PlaybackStatus }> => {\n    console.warn(\n      `Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name`\n    );\n    return Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst);\n  };\n\n  static createAsync = async (\n    source: PlaybackSource,\n    initialStatus: PlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<{ sound: Sound; status: PlaybackStatus }> => {\n    const sound: Sound = new Sound();\n    sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n    const status: PlaybackStatus = await sound.loadAsync(source, initialStatus, downloadFirst);\n    return { sound, status };\n  };\n\n  // Internal methods\n\n  _callOnPlaybackStatusUpdateForNewStatus(status: PlaybackStatus) {\n    const shouldDismissBasedOnCoalescing =\n      this._lastStatusUpdateTime &&\n      JSON.stringify(status) === this._lastStatusUpdate &&\n      Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n\n    if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n      this._onPlaybackStatusUpdate(status);\n      this._lastStatusUpdateTime = new Date();\n      this._lastStatusUpdate = JSON.stringify(status);\n    }\n  }\n\n  async _performOperationAndHandleStatusAsync(\n    operation: () => Promise<PlaybackStatus>\n  ): Promise<PlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loaded) {\n      const status = await operation();\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      return status;\n    } else {\n      throw new Error('Cannot complete operation because sound is not loaded.');\n    }\n  }\n\n  _internalStatusUpdateCallback = ({\n    key,\n    status,\n  }: {\n    key: AudioInstance;\n    status: PlaybackStatus;\n  }) => {\n    if (this._key === key) {\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n    }\n  };\n\n  _internalErrorCallback = ({ key, error }: { key: AudioInstance; error: string }) => {\n    if (this._key === key) {\n      this._errorCallback(error);\n    }\n  };\n\n  // TODO: We can optimize by only using time observer on native if (this._onPlaybackStatusUpdate).\n  _subscribeToNativeEvents() {\n    if (this._loaded) {\n      this._subscriptions.push(\n        this._eventEmitter.addListener(\n          'didUpdatePlaybackStatus',\n          this._internalStatusUpdateCallback\n        )\n      );\n\n      this._subscriptions.push(\n        this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback)\n      );\n    }\n  }\n\n  _clearSubscriptions() {\n    this._subscriptions.forEach(e => e.remove());\n    this._subscriptions = [];\n  }\n\n  _errorCallback = (error: string) => {\n    this._clearSubscriptions();\n    this._loaded = false;\n    this._key = null;\n    this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));\n  };\n\n  // ### Unified playback API ### (consistent with Video.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<PlaybackStatus> => {\n    if (this._loaded) {\n      return this._performOperationAndHandleStatusAsync(() =>\n        ExponentAV.getStatusForSound(this._key)\n      );\n    }\n    const status: PlaybackStatus = getUnloadedStatus();\n    this._callOnPlaybackStatusUpdateForNewStatus(status);\n    return status;\n  };\n\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  // Loading / unloading API\n\n  async loadAsync(\n    source: PlaybackSource,\n    initialStatus: PlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<PlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loading) {\n      throw new Error('The Sound is already loading.');\n    }\n    if (!this._loaded) {\n      this._loading = true;\n\n      const {\n        nativeSource,\n        fullInitialStatus,\n      } = await getNativeSourceAndFullInitialStatusForLoadAsync(\n        source,\n        initialStatus,\n        downloadFirst\n      );\n\n      // This is a workaround, since using load with resolve / reject seems to not work.\n      return new Promise<PlaybackStatus>((resolve, reject) => {\n        const loadSuccess = (result: [AudioInstance, PlaybackStatus]) => {\n          const [key, status] = result;\n          this._key = key;\n          this._loaded = true;\n          this._loading = false;\n          this._subscribeToNativeEvents();\n          this._callOnPlaybackStatusUpdateForNewStatus(status);\n          resolve(status);\n        };\n\n        const loadError = (error: Error) => {\n          this._loading = false;\n          reject(error);\n        };\n\n        ExponentAV.loadForSound(nativeSource, fullInitialStatus)\n          .then(loadSuccess)\n          .catch(loadError);\n      });\n    } else {\n      throw new Error('The Sound is already loaded.');\n    }\n  }\n\n  async unloadAsync(): Promise<PlaybackStatus> {\n    if (this._loaded) {\n      this._loaded = false;\n      const key = this._key;\n      this._key = null;\n      const status = await ExponentAV.unloadForSound(key);\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      this._clearSubscriptions();\n      return status;\n    } else {\n      return this.getStatusAsync(); // Automatically calls onPlaybackStatusUpdate.\n    }\n  }\n\n  // Set status API (only available while isLoaded = true)\n\n  async setStatusAsync(status: PlaybackStatusToSet): Promise<PlaybackStatus> {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.setStatusForSound(this._key, status)\n    );\n  }\n\n  async replayAsync(status: PlaybackStatusToSet = {}): Promise<PlaybackStatus> {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.replaySound(this._key, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<PlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<PlaybackStatus>;\n  pauseAsync!: () => Promise<PlaybackStatus>;\n  stopAsync!: () => Promise<PlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<PlaybackStatus>;\n  setRateAsync!: (\n    rate: number,\n    shouldCorrectPitch: boolean,\n    pitchCorrectionQuality?: PitchCorrectionQuality\n  ) => Promise<PlaybackStatus>;\n  setVolumeAsync!: (volume: number) => Promise<PlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<PlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<PlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<PlaybackStatus>;\n}\n\nObject.assign(Sound.prototype, PlaybackMixin);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}