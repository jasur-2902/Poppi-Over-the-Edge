{"ast":null,"code":"import findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport ReanimatedModule from \"../ReanimatedModule\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport AnimatedValue from \"./AnimatedValue\";\nimport AnimatedAlways from \"./AnimatedAlways\";\nimport invariant from 'fbjs/lib/invariant';\nimport createEventObjectProxyPolyfill from \"./createEventObjectProxyPolyfill\";\n\nfunction sanitizeArgMapping(argMapping) {\n  var eventMappings = [];\n  var alwaysNodes = [];\n\n  var traverse = (value, path) => {\n    if (value instanceof AnimatedValue) {\n      eventMappings.push(path.concat(value.__nodeID));\n    } else if (typeof value === 'object' && value.__val) {\n      eventMappings.push(path.concat(value.__val.__nodeID));\n    } else if (typeof value === 'function') {\n      var node = new AnimatedValue(0);\n      alwaysNodes.push(new AnimatedAlways(value(node)));\n      eventMappings.push(path.concat(node.__nodeID));\n    } else if (typeof value === 'object') {\n      for (var key in value) {\n        traverse(value[key], path.concat(key));\n      }\n    }\n  };\n\n  invariant(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');\n  var ev = argMapping[0].nativeEvent;\n\n  if (typeof ev === 'object') {\n    traverse(ev, []);\n  } else if (typeof ev === 'function') {\n    var proxyHandler = {\n      get: function get(target, name) {\n        if (name === '__isProxy') {\n          return true;\n        }\n\n        if (!target[name] && name !== '__val') {\n          target[name] = new Proxy({}, proxyHandler);\n        }\n\n        return target[name];\n      },\n      set: function set(target, prop, value) {\n        if (prop === '__val') {\n          target[prop] = value;\n        }\n      }\n    };\n    var proxy = typeof Proxy === 'function' ? new Proxy({}, proxyHandler) : createEventObjectProxyPolyfill();\n    alwaysNodes.push(new AnimatedAlways(ev(proxy)));\n    traverse(proxy, []);\n  }\n\n  return {\n    eventMappings,\n    alwaysNodes\n  };\n}\n\nexport default class AnimatedEvent extends AnimatedNode {\n  constructor(argMapping) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      eventMappings,\n      alwaysNodes\n    } = sanitizeArgMapping(argMapping);\n    super({\n      type: 'event',\n      argMapping: eventMappings\n    });\n    this.__isNative = true;\n    this._alwaysNodes = alwaysNodes;\n  }\n\n  attachEvent(viewRef, eventName) {\n    for (var i = 0; i < this._alwaysNodes.length; i++) {\n      this._alwaysNodes[i].__attach();\n    }\n\n    this.__attach();\n\n    var viewTag = findNodeHandle(viewRef);\n    ReanimatedModule.attachEvent(viewTag, eventName, this.__nodeID);\n  }\n\n  detachEvent(viewRef, eventName) {\n    for (var i = 0; i < this._alwaysNodes.length; i++) {\n      this._alwaysNodes[i].isNativelyInitialized() && this._alwaysNodes[i].__detach();\n    }\n\n    var viewTag = findNodeHandle(viewRef);\n    ReanimatedModule.detachEvent(viewTag, eventName, this.__nodeID);\n\n    this.__detach();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/react-native-reanimated/src/core/AnimatedEvent.js"],"names":["ReanimatedModule","AnimatedNode","AnimatedValue","AnimatedAlways","invariant","createEventObjectProxyPolyfill","sanitizeArgMapping","argMapping","eventMappings","alwaysNodes","traverse","value","path","push","concat","__nodeID","__val","node","key","nativeEvent","ev","proxyHandler","get","target","name","Proxy","set","prop","proxy","AnimatedEvent","constructor","config","type","__isNative","_alwaysNodes","attachEvent","viewRef","eventName","i","length","__attach","viewTag","findNodeHandle","detachEvent","isNativelyInitialized","__detach"],"mappings":"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","sourcesContent":["import { findNodeHandle } from 'react-native';\nimport ReanimatedModule from '../ReanimatedModule';\n\nimport AnimatedNode from './AnimatedNode';\nimport AnimatedValue from './AnimatedValue';\nimport AnimatedAlways from './AnimatedAlways';\n\nimport invariant from 'fbjs/lib/invariant';\nimport createEventObjectProxyPolyfill from './createEventObjectProxyPolyfill';\n\nfunction sanitizeArgMapping(argMapping) {\n  // Find animated values in `argMapping` and create an array representing their\n  // key path inside the `nativeEvent` object. Ex.: ['contentOffset', 'x'].\n  const eventMappings = [];\n  const alwaysNodes = [];\n\n  const traverse = (value, path) => {\n    if (value instanceof AnimatedValue) {\n      eventMappings.push(path.concat(value.__nodeID));\n    } else if (typeof value === 'object' && value.__val) {\n      eventMappings.push(path.concat(value.__val.__nodeID));\n    } else if (typeof value === 'function') {\n      const node = new AnimatedValue(0);\n      alwaysNodes.push(new AnimatedAlways(value(node)));\n      eventMappings.push(path.concat(node.__nodeID));\n    } else if (typeof value === 'object') {\n      for (const key in value) {\n        traverse(value[key], path.concat(key));\n      }\n    }\n  };\n\n  invariant(\n    argMapping[0] && argMapping[0].nativeEvent,\n    'Native driven events only support animated values contained inside `nativeEvent`.'\n  );\n\n  // Assume that the event containing `nativeEvent` is always the first argument.\n  const ev = argMapping[0].nativeEvent;\n  if (typeof ev === 'object') {\n    traverse(ev, []);\n  } else if (typeof ev === 'function') {\n    const proxyHandler = {\n      get: function(target, name) {\n        if (name === '__isProxy') {\n          return true;\n        }\n        if (!target[name] && name !== '__val') {\n          target[name] = new Proxy({}, proxyHandler);\n        }\n        return target[name];\n      },\n      set: function(target, prop, value) {\n        if (prop === '__val') {\n          target[prop] = value;\n        }\n      },\n    };\n\n    const proxy =\n      typeof Proxy === 'function'\n        ? new Proxy({}, proxyHandler)\n        : createEventObjectProxyPolyfill();\n    alwaysNodes.push(new AnimatedAlways(ev(proxy)));\n    traverse(proxy, []);\n  }\n\n  return { eventMappings, alwaysNodes };\n}\n\nexport default class AnimatedEvent extends AnimatedNode {\n  constructor(argMapping, config = {}) {\n    const { eventMappings, alwaysNodes } = sanitizeArgMapping(argMapping);\n    super({ type: 'event', argMapping: eventMappings });\n    this._alwaysNodes = alwaysNodes;\n  }\n\n  // The below field is a temporary workaround to make AnimatedEvent object be recognized\n  // as Animated.event event callback and therefore filtered out from being send over the\n  // bridge which was causing the object to be frozen in JS.\n  __isNative = true;\n\n  attachEvent(viewRef, eventName) {\n    for (let i = 0; i < this._alwaysNodes.length; i++) {\n      this._alwaysNodes[i].__attach();\n    }\n    this.__attach();\n    const viewTag = findNodeHandle(viewRef);\n    ReanimatedModule.attachEvent(viewTag, eventName, this.__nodeID);\n  }\n\n  detachEvent(viewRef, eventName) {\n    for (let i = 0; i < this._alwaysNodes.length; i++) {\n      this._alwaysNodes[i].isNativelyInitialized() &&\n        this._alwaysNodes[i].__detach();\n    }\n    const viewTag = findNodeHandle(viewRef);\n    ReanimatedModule.detachEvent(viewTag, eventName, this.__nodeID);\n    this.__detach();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}