{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { UnavailabilityError } from '@unimodules/core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Share from \"react-native-web/dist/exports/Share\";\nimport UUID from 'uuid-js';\nimport ExpoContacts from \"./ExpoContacts\";\nexport function shareContactAsync(_x, _x2) {\n  return _shareContactAsync.apply(this, arguments);\n}\n\nfunction _shareContactAsync() {\n  _shareContactAsync = _asyncToGenerator(function* (contactId, message) {\n    var shareOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (!ExpoContacts.shareContactAsync) {\n      throw new UnavailabilityError('Contacts', 'shareContactAsync');\n    }\n\n    if (Platform.OS === 'ios') {\n      var url = yield writeContactToFileAsync({\n        id: contactId\n      });\n      return yield Share.share({\n        url,\n        message\n      }, shareOptions);\n    } else {\n      return yield ExpoContacts.shareContactAsync(contactId, message);\n    }\n  });\n  return _shareContactAsync.apply(this, arguments);\n}\n\nexport function getContactsAsync() {\n  return _getContactsAsync.apply(this, arguments);\n}\n\nfunction _getContactsAsync() {\n  _getContactsAsync = _asyncToGenerator(function* () {\n    var contactQuery = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!ExpoContacts.getContactsAsync) {\n      throw new UnavailabilityError('Contacts', 'getContactsAsync');\n    }\n\n    return yield ExpoContacts.getContactsAsync(contactQuery);\n  });\n  return _getContactsAsync.apply(this, arguments);\n}\n\nexport function getPagedContactsAsync() {\n  return _getPagedContactsAsync.apply(this, arguments);\n}\n\nfunction _getPagedContactsAsync() {\n  _getPagedContactsAsync = _asyncToGenerator(function* () {\n    var contactQuery = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var {\n      pageSize\n    } = contactQuery,\n        nOptions = _objectWithoutProperties(contactQuery, [\"pageSize\"]);\n\n    if (pageSize && pageSize <= 0) {\n      throw new Error('Error: Contacts.getPagedContactsAsync: `pageSize` must be greater than 0');\n    }\n\n    return yield getContactsAsync(_objectSpread({}, nOptions, {\n      pageSize\n    }));\n  });\n  return _getPagedContactsAsync.apply(this, arguments);\n}\n\nexport function getContactByIdAsync(_x3, _x4) {\n  return _getContactByIdAsync.apply(this, arguments);\n}\n\nfunction _getContactByIdAsync() {\n  _getContactByIdAsync = _asyncToGenerator(function* (id, fields) {\n    if (!ExpoContacts.getContactsAsync) {\n      throw new UnavailabilityError('Contacts', 'getContactsAsync');\n    }\n\n    if (id == null) {\n      throw new Error('Error: Contacts.getContactByIdAsync: Please pass an ID as a parameter');\n    } else {\n      var results = yield ExpoContacts.getContactsAsync({\n        pageSize: 1,\n        pageOffset: 0,\n        fields,\n        id\n      });\n\n      if (results && results.data && results.data.length > 0) {\n        return results.data[0];\n      }\n\n      return;\n    }\n  });\n  return _getContactByIdAsync.apply(this, arguments);\n}\n\nexport function addContactAsync(_x5, _x6) {\n  return _addContactAsync.apply(this, arguments);\n}\n\nfunction _addContactAsync() {\n  _addContactAsync = _asyncToGenerator(function* (contact, containerId) {\n    if (!ExpoContacts.addContactAsync) {\n      throw new UnavailabilityError('Contacts', 'addContactAsync');\n    }\n\n    return yield ExpoContacts.addContactAsync(contact, containerId);\n  });\n  return _addContactAsync.apply(this, arguments);\n}\n\nexport function updateContactAsync(_x7) {\n  return _updateContactAsync.apply(this, arguments);\n}\n\nfunction _updateContactAsync() {\n  _updateContactAsync = _asyncToGenerator(function* (contact) {\n    if (!ExpoContacts.updateContactAsync) {\n      throw new UnavailabilityError('Contacts', 'updateContactAsync');\n    }\n\n    return yield ExpoContacts.updateContactAsync(contact);\n  });\n  return _updateContactAsync.apply(this, arguments);\n}\n\nexport function removeContactAsync(_x8) {\n  return _removeContactAsync.apply(this, arguments);\n}\n\nfunction _removeContactAsync() {\n  _removeContactAsync = _asyncToGenerator(function* (contactId) {\n    if (!ExpoContacts.removeContactAsync) {\n      throw new UnavailabilityError('Contacts', 'removeContactAsync');\n    }\n\n    return yield ExpoContacts.removeContactAsync(contactId);\n  });\n  return _removeContactAsync.apply(this, arguments);\n}\n\nexport function writeContactToFileAsync() {\n  return _writeContactToFileAsync.apply(this, arguments);\n}\n\nfunction _writeContactToFileAsync() {\n  _writeContactToFileAsync = _asyncToGenerator(function* () {\n    var contactQuery = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!ExpoContacts.writeContactToFileAsync) {\n      throw new UnavailabilityError('Contacts', 'writeContactToFileAsync');\n    }\n\n    return yield ExpoContacts.writeContactToFileAsync(contactQuery);\n  });\n  return _writeContactToFileAsync.apply(this, arguments);\n}\n\nexport function presentFormAsync(_x9, _x10) {\n  return _presentFormAsync.apply(this, arguments);\n}\n\nfunction _presentFormAsync() {\n  _presentFormAsync = _asyncToGenerator(function* (contactId, contact) {\n    var formOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (!ExpoContacts.presentFormAsync) {\n      throw new UnavailabilityError('Contacts', 'presentFormAsync');\n    }\n\n    if (Platform.OS === 'ios') {\n      var adjustedOptions = formOptions;\n\n      if (contactId) {\n        if (contact) {\n          contact = undefined;\n          console.log('Expo.Contacts.presentFormAsync: You should define either a `contact` or a `contactId` but not both.');\n        }\n\n        if (adjustedOptions.isNew !== undefined) {\n          console.log('Expo.Contacts.presentFormAsync: formOptions.isNew is not supported with `contactId`');\n        }\n      }\n\n      return yield ExpoContacts.presentFormAsync(contactId, contact, adjustedOptions);\n    } else {\n      return yield ExpoContacts.presentFormAsync(contactId, contact, formOptions);\n    }\n  });\n  return _presentFormAsync.apply(this, arguments);\n}\n\nexport function addExistingGroupToContainerAsync(_x11, _x12) {\n  return _addExistingGroupToContainerAsync.apply(this, arguments);\n}\n\nfunction _addExistingGroupToContainerAsync() {\n  _addExistingGroupToContainerAsync = _asyncToGenerator(function* (groupId, containerId) {\n    if (!ExpoContacts.addExistingGroupToContainerAsync) {\n      throw new UnavailabilityError('Contacts', 'addExistingGroupToContainerAsync');\n    }\n\n    return yield ExpoContacts.addExistingGroupToContainerAsync(groupId, containerId);\n  });\n  return _addExistingGroupToContainerAsync.apply(this, arguments);\n}\n\nexport function createGroupAsync(_x13, _x14) {\n  return _createGroupAsync.apply(this, arguments);\n}\n\nfunction _createGroupAsync() {\n  _createGroupAsync = _asyncToGenerator(function* (name, containerId) {\n    if (!ExpoContacts.createGroupAsync) {\n      throw new UnavailabilityError('Contacts', 'createGroupAsync');\n    }\n\n    name = name || UUID.create().toString();\n\n    if (!containerId) {\n      containerId = yield getDefaultContainerIdAsync();\n    }\n\n    return yield ExpoContacts.createGroupAsync(name, containerId);\n  });\n  return _createGroupAsync.apply(this, arguments);\n}\n\nexport function updateGroupNameAsync(_x15, _x16) {\n  return _updateGroupNameAsync.apply(this, arguments);\n}\n\nfunction _updateGroupNameAsync() {\n  _updateGroupNameAsync = _asyncToGenerator(function* (groupName, groupId) {\n    if (!ExpoContacts.updateGroupNameAsync) {\n      throw new UnavailabilityError('Contacts', 'updateGroupNameAsync');\n    }\n\n    return yield ExpoContacts.updateGroupNameAsync(groupName, groupId);\n  });\n  return _updateGroupNameAsync.apply(this, arguments);\n}\n\nexport function removeGroupAsync(_x17) {\n  return _removeGroupAsync.apply(this, arguments);\n}\n\nfunction _removeGroupAsync() {\n  _removeGroupAsync = _asyncToGenerator(function* (groupId) {\n    if (!ExpoContacts.removeGroupAsync) {\n      throw new UnavailabilityError('Contacts', 'removeGroupAsync');\n    }\n\n    return yield ExpoContacts.removeGroupAsync(groupId);\n  });\n  return _removeGroupAsync.apply(this, arguments);\n}\n\nexport function addExistingContactToGroupAsync(_x18, _x19) {\n  return _addExistingContactToGroupAsync.apply(this, arguments);\n}\n\nfunction _addExistingContactToGroupAsync() {\n  _addExistingContactToGroupAsync = _asyncToGenerator(function* (contactId, groupId) {\n    if (!ExpoContacts.addExistingContactToGroupAsync) {\n      throw new UnavailabilityError('Contacts', 'addExistingContactToGroupAsync');\n    }\n\n    return yield ExpoContacts.addExistingContactToGroupAsync(contactId, groupId);\n  });\n  return _addExistingContactToGroupAsync.apply(this, arguments);\n}\n\nexport function removeContactFromGroupAsync(_x20, _x21) {\n  return _removeContactFromGroupAsync.apply(this, arguments);\n}\n\nfunction _removeContactFromGroupAsync() {\n  _removeContactFromGroupAsync = _asyncToGenerator(function* (contactId, groupId) {\n    if (!ExpoContacts.removeContactFromGroupAsync) {\n      throw new UnavailabilityError('Contacts', 'removeContactFromGroupAsync');\n    }\n\n    return yield ExpoContacts.removeContactFromGroupAsync(contactId, groupId);\n  });\n  return _removeContactFromGroupAsync.apply(this, arguments);\n}\n\nexport function getGroupsAsync(_x22) {\n  return _getGroupsAsync.apply(this, arguments);\n}\n\nfunction _getGroupsAsync() {\n  _getGroupsAsync = _asyncToGenerator(function* (groupQuery) {\n    if (!ExpoContacts.getGroupsAsync) {\n      throw new UnavailabilityError('Contacts', 'getGroupsAsync');\n    }\n\n    return yield ExpoContacts.getGroupsAsync(groupQuery);\n  });\n  return _getGroupsAsync.apply(this, arguments);\n}\n\nexport function getDefaultContainerIdAsync() {\n  return _getDefaultContainerIdAsync.apply(this, arguments);\n}\n\nfunction _getDefaultContainerIdAsync() {\n  _getDefaultContainerIdAsync = _asyncToGenerator(function* () {\n    if (!ExpoContacts.getDefaultContainerIdentifierAsync) {\n      throw new UnavailabilityError('Contacts', 'getDefaultContainerIdentifierAsync');\n    }\n\n    return yield ExpoContacts.getDefaultContainerIdentifierAsync();\n  });\n  return _getDefaultContainerIdAsync.apply(this, arguments);\n}\n\nexport function getContainersAsync(_x23) {\n  return _getContainersAsync.apply(this, arguments);\n}\n\nfunction _getContainersAsync() {\n  _getContainersAsync = _asyncToGenerator(function* (containerQuery) {\n    if (!ExpoContacts.getContainersAsync) {\n      throw new UnavailabilityError('Contacts', 'getContainersAsync');\n    }\n\n    return yield ExpoContacts.getContainersAsync(containerQuery);\n  });\n  return _getContainersAsync.apply(this, arguments);\n}\n\nexport var PHONE_NUMBERS = 'phoneNumbers';\nexport var EMAILS = 'emails';\nexport var ADDRESSES = 'addresses';\nexport var IMAGE = 'image';\nexport var RAW_IMAGE = 'rawImage';\nexport var NOTE = 'note';\nexport var BIRTHDAY = 'birthday';\nexport var NON_GREGORIAN_BIRTHDAY = 'nonGregorianBirthday';\nexport var NAME_PREFIX = 'namePrefix';\nexport var NAME_SUFFIX = 'nameSuffix';\nexport var PHONETIC_FIRST_NAME = 'phoneticFirstName';\nexport var PHONETIC_MIDDLE_NAME = 'phoneticMiddleName';\nexport var PHONETIC_LAST_NAME = 'phoneticLastName';\nexport var SOCIAL_PROFILES = 'socialProfiles';\nexport var IM_ADDRESSES = 'instantMessageAddresses';\nexport var URLS = 'urlAddresses';\nexport var DATES = 'dates';\nexport var RELATIONSHIPS = 'relationships';\nexport var Fields = {\n  ID: 'id',\n  ContactType: 'contactType',\n  Name: 'name',\n  FirstName: 'firstName',\n  MiddleName: 'middleName',\n  LastName: 'lastName',\n  MaidenName: 'maidenName',\n  NamePrefix: 'namePrefix',\n  NameSuffix: 'nameSuffix',\n  Nickname: 'nickname',\n  PhoneticFirstName: 'phoneticFirstName',\n  PhoneticMiddleName: 'phoneticMiddleName',\n  PhoneticLastName: 'phoneticLastName',\n  Birthday: 'birthday',\n  NonGregorianBirthday: 'nonGregorianBirthday',\n  Emails: 'emails',\n  PhoneNumbers: 'phoneNumbers',\n  Addresses: 'addresses',\n  SocialProfiles: 'socialProfiles',\n  InstantMessageAddresses: 'instantMessageAddresses',\n  UrlAddresses: 'urlAddresses',\n  Company: 'company',\n  JobTitle: 'jobTitle',\n  Department: 'department',\n  ImageAvailable: 'imageAvailable',\n  Image: 'image',\n  RawImage: 'rawImage',\n  ExtraNames: 'extraNames',\n  Note: 'note',\n  Dates: 'dates',\n  Relationships: 'relationships'\n};\nexport var CalendarFormats = {\n  Gregorian: 'gregorian',\n  Buddhist: 'buddhist',\n  Chinese: 'chinese',\n  Coptic: 'coptic',\n  EthiopicAmeteMihret: 'ethiopicAmeteMihret',\n  EthiopicAmeteAlem: 'ethiopicAmeteAlem',\n  Hebrew: 'hebrew',\n  ISO8601: 'iso8601',\n  Indian: 'indian',\n  Islamic: 'islamic',\n  IslamicCivil: 'islamicCivil',\n  Japanese: 'japanese',\n  Persian: 'persian',\n  RepublicOfChina: 'republicOfChina',\n  IslamicTabular: 'islamicTabular',\n  IslamicUmmAlQura: 'islamicUmmAlQura'\n};\nexport var ContainerTypes = {\n  Local: 'local',\n  Exchange: 'exchange',\n  CardDAV: 'cardDAV',\n  Unassigned: 'unassigned'\n};\nexport var SortTypes = {\n  UserDefault: 'userDefault',\n  FirstName: 'firstName',\n  LastName: 'lastName',\n  None: 'none'\n};\nexport var ContactTypes = {\n  Person: 'person',\n  Company: 'company'\n};","map":{"version":3,"sources":["../src/Contacts.ts"],"names":[],"mappings":"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","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport { Platform, Share } from 'react-native';\nimport UUID from 'uuid-js';\n\nimport ExpoContacts from './ExpoContacts';\n\nexport type CalendarFormatType =\n  | typeof CalendarFormats.Gregorian\n  | typeof CalendarFormats.Buddhist\n  | typeof CalendarFormats.Chinese\n  | typeof CalendarFormats.Coptic\n  | typeof CalendarFormats.EthiopicAmeteMihret\n  | typeof CalendarFormats.EthiopicAmeteAlem\n  | typeof CalendarFormats.Hebrew\n  | typeof CalendarFormats.ISO8601\n  | typeof CalendarFormats.Indian\n  | typeof CalendarFormats.Islamic\n  | typeof CalendarFormats.IslamicCivil\n  | typeof CalendarFormats.Japanese\n  | typeof CalendarFormats.Persian\n  | typeof CalendarFormats.RepublicOfChina\n  | typeof CalendarFormats.IslamicTabular\n  | typeof CalendarFormats.IslamicUmmAlQura;\n\nexport type ContainerType =\n  | typeof ContainerTypes.Local\n  | typeof ContainerTypes.Exchange\n  | typeof ContainerTypes.CardDAV\n  | typeof ContainerTypes.Unassigned;\n\nexport type ContactType = typeof ContactTypes.Person | typeof ContactTypes.Company;\n\nexport type FieldType =\n  | typeof Fields.ID\n  | typeof Fields.ContactType\n  | typeof Fields.Name\n  | typeof Fields.FirstName\n  | typeof Fields.MiddleName\n  | typeof Fields.LastName\n  | typeof Fields.MaidenName\n  | typeof Fields.NamePrefix\n  | typeof Fields.NameSuffix\n  | typeof Fields.Nickname\n  | typeof Fields.PhoneticFirstName\n  | typeof Fields.PhoneticMiddleName\n  | typeof Fields.PhoneticLastName\n  | typeof Fields.Birthday\n  | typeof Fields.NonGregorianBirthday\n  | typeof Fields.Emails\n  | typeof Fields.PhoneNumbers\n  | typeof Fields.Addresses\n  | typeof Fields.SocialProfiles\n  | typeof Fields.InstantMessageAddresses\n  | typeof Fields.UrlAddresses\n  | typeof Fields.Company\n  | typeof Fields.JobTitle\n  | typeof Fields.Department\n  | typeof Fields.ImageAvailable\n  | typeof Fields.Image\n  | typeof Fields.RawImage\n  | typeof Fields.ExtraNames\n  | typeof Fields.Note\n  | typeof Fields.Dates\n  | typeof Fields.Relationships;\n\nexport type Date = {\n  day?: number;\n  month?: number;\n  year?: number;\n  id: string;\n  label: string;\n  format?: CalendarFormatType;\n};\n\nexport type Relationship = {\n  label: string;\n  name?: string;\n  id: string;\n};\n\nexport type Email = {\n  email?: string;\n  isPrimary?: boolean;\n  label: string;\n  id: string;\n};\n\nexport type PhoneNumber = {\n  number?: string;\n  isPrimary?: boolean;\n  digits?: string;\n  countryCode?: string;\n  label: string;\n  id: string;\n};\n\nexport type Address = {\n  street?: string;\n  city?: string;\n  country?: string;\n  region?: string;\n  neighborhood?: string;\n  postalCode?: string;\n  poBox?: string;\n  isoCountryCode?: string;\n  label: string;\n  id: string;\n};\n\nexport type SocialProfile = {\n  service?: string;\n  localizedProfile?: string;\n  url?: string;\n  username?: string;\n  userId?: string;\n  label: string;\n  id: string;\n};\n\nexport type InstantMessageAddress = {\n  service?: string;\n  username?: string;\n  localizedService?: string;\n  label: string;\n  id: string;\n};\n\nexport type UrlAddress = {\n  label: string;\n  url?: string;\n  id: string;\n};\n\nexport type Image = {\n  uri?: string;\n  width?: number;\n  height?: number;\n  base64?: string;\n};\n\nexport type Contact = {\n  id: string;\n  contactType: ContactType;\n  name: string;\n  firstName?: string;\n  middleName?: string;\n  lastName?: string;\n  maidenName?: string;\n  namePrefix?: string;\n  nameSuffix?: string;\n  nickname?: string;\n  phoneticFirstName?: string;\n  phoneticMiddleName?: string;\n  phoneticLastName?: string;\n  company?: string;\n  jobTitle?: string;\n  department?: string;\n  note?: string;\n  imageAvailable?: boolean;\n  image?: Image;\n  rawImage?: Image;\n  birthday?: Date;\n  dates?: Date[];\n  relationships?: Relationship[];\n  emails?: Email[];\n  phoneNumbers?: PhoneNumber[];\n  addresses?: Address[];\n  instantMessageAddresses?: InstantMessageAddress[];\n  urlAddresses?: UrlAddress[];\n\n  nonGregorianBirthday?: Date;\n  socialProfiles?: SocialProfile[];\n};\n\nexport type ContactResponse = {\n  data: Contact[];\n  hasNextPage: boolean;\n  hasPreviousPage: boolean;\n};\n\nexport type ContactSort =\n  | typeof SortTypes.UserDefault\n  | typeof SortTypes.FirstName\n  | typeof SortTypes.LastName\n  | typeof SortTypes.None;\n\nexport type ContactQuery = {\n  pageSize?: number;\n  pageOffset?: number;\n  fields?: FieldType[];\n  sort?: ContactSort;\n  name?: string;\n  id?: string | string[];\n  groupId?: string;\n  containerId?: string;\n  rawContacts?: boolean;\n};\n\nexport type FormOptions = {\n  displayedPropertyKeys?: FieldType[];\n  message?: string;\n  alternateName?: string;\n  allowsEditing?: boolean;\n  allowsActions?: boolean;\n  shouldShowLinkedContacts?: boolean;\n  isNew?: boolean;\n  cancelButtonTitle?: string;\n  preventAnimation?: boolean;\n  groupId?: string;\n};\n\nexport type GroupQuery = {\n  groupId?: string;\n  groupName?: string;\n  containerId?: string;\n};\n\nexport type Group = {\n  name?: string;\n  id?: string;\n};\n\nexport type ContainerQuery = {\n  contactId?: string;\n  groupId?: string;\n  containerId?: string | string[];\n};\n\nexport type Container = {\n  name: string;\n  id: string;\n  type: ContainerType;\n};\n\nexport async function shareContactAsync(\n  contactId: string,\n  message: string,\n  shareOptions: Object = {}\n): Promise<any> {\n  if (!ExpoContacts.shareContactAsync) {\n    throw new UnavailabilityError('Contacts', 'shareContactAsync');\n  }\n  if (Platform.OS === 'ios') {\n    const url = await writeContactToFileAsync({\n      id: contactId,\n    });\n    return await Share.share(\n      {\n        url,\n        message,\n      },\n      shareOptions\n    );\n  } else {\n    return await ExpoContacts.shareContactAsync(contactId, message);\n  }\n}\n\nexport async function getContactsAsync(contactQuery: ContactQuery = {}): Promise<ContactResponse> {\n  if (!ExpoContacts.getContactsAsync) {\n    throw new UnavailabilityError('Contacts', 'getContactsAsync');\n  }\n  return await ExpoContacts.getContactsAsync(contactQuery);\n}\n\nexport async function getPagedContactsAsync(\n  contactQuery: ContactQuery = {}\n): Promise<ContactResponse> {\n  const { pageSize, ...nOptions } = contactQuery;\n\n  if (pageSize && pageSize <= 0) {\n    throw new Error('Error: Contacts.getPagedContactsAsync: `pageSize` must be greater than 0');\n  }\n\n  return await getContactsAsync({\n    ...nOptions,\n    pageSize,\n  });\n}\n\nexport async function getContactByIdAsync(\n  id: string,\n  fields?: FieldType\n): Promise<Contact | undefined> {\n  if (!ExpoContacts.getContactsAsync) {\n    throw new UnavailabilityError('Contacts', 'getContactsAsync');\n  }\n\n  if (id == null) {\n    throw new Error('Error: Contacts.getContactByIdAsync: Please pass an ID as a parameter');\n  } else {\n    const results = await ExpoContacts.getContactsAsync({\n      pageSize: 1,\n      pageOffset: 0,\n      fields,\n      id,\n    });\n    if (results && results.data && results.data.length > 0) {\n      return results.data[0];\n    }\n    return;\n  }\n}\n\nexport async function addContactAsync(contact: Contact, containerId: string): Promise<string> {\n  if (!ExpoContacts.addContactAsync) {\n    throw new UnavailabilityError('Contacts', 'addContactAsync');\n  }\n  return await ExpoContacts.addContactAsync(contact, containerId);\n}\n\nexport async function updateContactAsync(contact: Contact): Promise<string> {\n  if (!ExpoContacts.updateContactAsync) {\n    throw new UnavailabilityError('Contacts', 'updateContactAsync');\n  }\n  return await ExpoContacts.updateContactAsync(contact);\n}\n\nexport async function removeContactAsync(contactId: string): Promise<any> {\n  if (!ExpoContacts.removeContactAsync) {\n    throw new UnavailabilityError('Contacts', 'removeContactAsync');\n  }\n  return await ExpoContacts.removeContactAsync(contactId);\n}\n\nexport async function writeContactToFileAsync(\n  contactQuery: ContactQuery = {}\n): Promise<string | undefined> {\n  if (!ExpoContacts.writeContactToFileAsync) {\n    throw new UnavailabilityError('Contacts', 'writeContactToFileAsync');\n  }\n  return await ExpoContacts.writeContactToFileAsync(contactQuery);\n}\n\nexport async function presentFormAsync(\n  contactId?: string | null,\n  contact?: Contact | null,\n  formOptions: FormOptions = {}\n): Promise<any> {\n  if (!ExpoContacts.presentFormAsync) {\n    throw new UnavailabilityError('Contacts', 'presentFormAsync');\n  }\n  if (Platform.OS === 'ios') {\n    let adjustedOptions = formOptions;\n\n    if (contactId) {\n      if (contact) {\n        contact = undefined;\n        console.log(\n          'Expo.Contacts.presentFormAsync: You should define either a `contact` or a `contactId` but not both.'\n        );\n      }\n      if (adjustedOptions.isNew !== undefined) {\n        console.log(\n          'Expo.Contacts.presentFormAsync: formOptions.isNew is not supported with `contactId`'\n        );\n      }\n    }\n    return await ExpoContacts.presentFormAsync(contactId, contact, adjustedOptions);\n  } else {\n    return await ExpoContacts.presentFormAsync(contactId, contact, formOptions);\n  }\n}\n\n// iOS Only\n\nexport async function addExistingGroupToContainerAsync(\n  groupId: string,\n  containerId: string\n): Promise<any> {\n  if (!ExpoContacts.addExistingGroupToContainerAsync) {\n    throw new UnavailabilityError('Contacts', 'addExistingGroupToContainerAsync');\n  }\n\n  return await ExpoContacts.addExistingGroupToContainerAsync(groupId, containerId);\n}\n\nexport async function createGroupAsync(name?: string, containerId?: string): Promise<string> {\n  if (!ExpoContacts.createGroupAsync) {\n    throw new UnavailabilityError('Contacts', 'createGroupAsync');\n  }\n\n  name = name || UUID.create().toString();\n  if (!containerId) {\n    containerId = await getDefaultContainerIdAsync();\n  }\n\n  return await ExpoContacts.createGroupAsync(name, containerId);\n}\n\nexport async function updateGroupNameAsync(groupName: string, groupId: string): Promise<any> {\n  if (!ExpoContacts.updateGroupNameAsync) {\n    throw new UnavailabilityError('Contacts', 'updateGroupNameAsync');\n  }\n\n  return await ExpoContacts.updateGroupNameAsync(groupName, groupId);\n}\n\nexport async function removeGroupAsync(groupId: string): Promise<any> {\n  if (!ExpoContacts.removeGroupAsync) {\n    throw new UnavailabilityError('Contacts', 'removeGroupAsync');\n  }\n\n  return await ExpoContacts.removeGroupAsync(groupId);\n}\n\nexport async function addExistingContactToGroupAsync(\n  contactId: string,\n  groupId: string\n): Promise<any> {\n  if (!ExpoContacts.addExistingContactToGroupAsync) {\n    throw new UnavailabilityError('Contacts', 'addExistingContactToGroupAsync');\n  }\n\n  return await ExpoContacts.addExistingContactToGroupAsync(contactId, groupId);\n}\n\nexport async function removeContactFromGroupAsync(\n  contactId: string,\n  groupId: string\n): Promise<any> {\n  if (!ExpoContacts.removeContactFromGroupAsync) {\n    throw new UnavailabilityError('Contacts', 'removeContactFromGroupAsync');\n  }\n\n  return await ExpoContacts.removeContactFromGroupAsync(contactId, groupId);\n}\n\nexport async function getGroupsAsync(groupQuery: GroupQuery): Promise<Group[]> {\n  if (!ExpoContacts.getGroupsAsync) {\n    throw new UnavailabilityError('Contacts', 'getGroupsAsync');\n  }\n\n  return await ExpoContacts.getGroupsAsync(groupQuery);\n}\n\nexport async function getDefaultContainerIdAsync(): Promise<string> {\n  if (!ExpoContacts.getDefaultContainerIdentifierAsync) {\n    throw new UnavailabilityError('Contacts', 'getDefaultContainerIdentifierAsync');\n  }\n\n  return await ExpoContacts.getDefaultContainerIdentifierAsync();\n}\n\nexport async function getContainersAsync(containerQuery: ContainerQuery): Promise<Container[]> {\n  if (!ExpoContacts.getContainersAsync) {\n    throw new UnavailabilityError('Contacts', 'getContainersAsync');\n  }\n\n  return await ExpoContacts.getContainersAsync(containerQuery);\n}\n\n// Legacy\nexport const PHONE_NUMBERS = 'phoneNumbers';\nexport const EMAILS = 'emails';\nexport const ADDRESSES = 'addresses';\nexport const IMAGE = 'image';\nexport const RAW_IMAGE = 'rawImage';\nexport const NOTE = 'note';\nexport const BIRTHDAY = 'birthday';\nexport const NON_GREGORIAN_BIRTHDAY = 'nonGregorianBirthday';\nexport const NAME_PREFIX = 'namePrefix';\nexport const NAME_SUFFIX = 'nameSuffix';\nexport const PHONETIC_FIRST_NAME = 'phoneticFirstName';\nexport const PHONETIC_MIDDLE_NAME = 'phoneticMiddleName';\nexport const PHONETIC_LAST_NAME = 'phoneticLastName';\nexport const SOCIAL_PROFILES = 'socialProfiles';\nexport const IM_ADDRESSES = 'instantMessageAddresses';\nexport const URLS = 'urlAddresses';\nexport const DATES = 'dates';\nexport const RELATIONSHIPS = 'relationships';\n\nexport const Fields = {\n  ID: 'id',\n  ContactType: 'contactType',\n  Name: 'name',\n  FirstName: 'firstName',\n  MiddleName: 'middleName',\n  LastName: 'lastName',\n  MaidenName: 'maidenName',\n  NamePrefix: 'namePrefix',\n  NameSuffix: 'nameSuffix',\n  Nickname: 'nickname',\n  PhoneticFirstName: 'phoneticFirstName',\n  PhoneticMiddleName: 'phoneticMiddleName',\n  PhoneticLastName: 'phoneticLastName',\n  Birthday: 'birthday',\n  NonGregorianBirthday: 'nonGregorianBirthday',\n  Emails: 'emails',\n  PhoneNumbers: 'phoneNumbers',\n  Addresses: 'addresses',\n  SocialProfiles: 'socialProfiles',\n  InstantMessageAddresses: 'instantMessageAddresses',\n  UrlAddresses: 'urlAddresses',\n  Company: 'company',\n  JobTitle: 'jobTitle',\n  Department: 'department',\n  ImageAvailable: 'imageAvailable',\n  Image: 'image',\n  RawImage: 'rawImage',\n  ExtraNames: 'extraNames',\n  Note: 'note',\n  Dates: 'dates',\n  Relationships: 'relationships',\n};\n\nexport const CalendarFormats = {\n  Gregorian: 'gregorian',\n  Buddhist: 'buddhist',\n  Chinese: 'chinese',\n  Coptic: 'coptic',\n  EthiopicAmeteMihret: 'ethiopicAmeteMihret',\n  EthiopicAmeteAlem: 'ethiopicAmeteAlem',\n  Hebrew: 'hebrew',\n  ISO8601: 'iso8601',\n  Indian: 'indian',\n  Islamic: 'islamic',\n  IslamicCivil: 'islamicCivil',\n  Japanese: 'japanese',\n  Persian: 'persian',\n  RepublicOfChina: 'republicOfChina',\n  IslamicTabular: 'islamicTabular',\n  IslamicUmmAlQura: 'islamicUmmAlQura',\n};\n\nexport const ContainerTypes = {\n  Local: 'local',\n  Exchange: 'exchange',\n  CardDAV: 'cardDAV',\n  Unassigned: 'unassigned',\n};\n\nexport const SortTypes = {\n  UserDefault: 'userDefault',\n  FirstName: 'firstName',\n  LastName: 'lastName',\n  None: 'none',\n};\n\nexport const ContactTypes = {\n  Person: 'person',\n  Company: 'company',\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}