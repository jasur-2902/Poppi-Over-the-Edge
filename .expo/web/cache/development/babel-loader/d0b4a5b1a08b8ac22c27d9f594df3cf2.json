{"ast":null,"code":"export default {\n  test(value) {\n    return value && value.hasOwnProperty('tag') && value.hasOwnProperty('key') && value.hasOwnProperty('type');\n  },\n\n  serialize(node, config, indentation, depth, refs, printer) {\n    return \"\".concat(config.min ? '' : 'FiberNode ', \"{\").concat(_printProperties(node, ['tag', 'key', 'type'], config, indentation, depth, refs, printer), \"}\");\n  }\n\n};\n\nfunction _printProperties(object, keys, config, indentation, depth, refs, printer) {\n  var result = config.spacingOuter;\n  var propertyIndentation = indentation + config.indent;\n\n  for (var ii = 0; ii < keys.length; ii++) {\n    var key = keys[ii];\n    var name = printer(key, config, propertyIndentation, depth, refs);\n    var value = printer(object[key], config, propertyIndentation, depth, refs);\n    result += \"\".concat(propertyIndentation).concat(name, \": \").concat(value);\n\n    if (ii < keys.length - 1) {\n      result += ',' + config.spacingInner;\n    } else if (!config.min) {\n      result += ',';\n    }\n  }\n\n  result += config.spacingOuter + indentation;\n  return result;\n}","map":{"version":3,"sources":["../../../src/logs/format/ReactNodeFormatter.ts"],"names":[],"mappings":"AAIA,eAAe;AACb,EAAA,IAAI,CAAC,KAAD,EAAW;AACb,WACE,KAAK,IACL,KAAK,CAAC,cAAN,CAAqB,KAArB,CADA,IAEA,KAAK,CAAC,cAAN,CAAqB,KAArB,CAFA,IAGA,KAAK,CAAC,cAAN,CAAqB,MAArB,CAJF;AAMD,GARY;;AAUb,EAAA,SAAS,CAAC,IAAD,EAAO,MAAP,EAAe,WAAf,EAA4B,KAA5B,EAAmC,IAAnC,EAAyC,OAAzC,EAAgD;AACvD,qBAAU,MAAM,CAAC,GAAP,GAAa,EAAb,GAAkB,YAA5B,cAA4C,gBAAgB,CAC1D,IAD0D,EAE1D,CAAC,KAAD,EAAQ,KAAR,EAAe,MAAf,CAF0D,EAG1D,MAH0D,EAI1D,WAJ0D,EAK1D,KAL0D,EAM1D,IAN0D,EAO1D,OAP0D,CAA5D;AASD;;AApBY,CAAf;;AAuBA,SAAS,gBAAT,CAA0B,MAA1B,EAAkC,IAAlC,EAAwC,MAAxC,EAAgD,WAAhD,EAA6D,KAA7D,EAAoE,IAApE,EAA0E,OAA1E,EAAiF;AAC/E,MAAI,MAAM,GAAG,MAAM,CAAC,YAApB;AACA,MAAI,mBAAmB,GAAG,WAAW,GAAG,MAAM,CAAC,MAA/C;;AAEA,OAAK,IAAI,EAAE,GAAG,CAAd,EAAiB,EAAE,GAAG,IAAI,CAAC,MAA3B,EAAmC,EAAE,EAArC,EAAyC;AACvC,QAAI,GAAG,GAAG,IAAI,CAAC,EAAD,CAAd;AACA,QAAI,IAAI,GAAG,OAAO,CAAC,GAAD,EAAM,MAAN,EAAc,mBAAd,EAAmC,KAAnC,EAA0C,IAA1C,CAAlB;AACA,QAAI,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,GAAD,CAAP,EAAc,MAAd,EAAsB,mBAAtB,EAA2C,KAA3C,EAAkD,IAAlD,CAAnB;AAEA,IAAA,MAAM,cAAO,mBAAP,SAA6B,IAA7B,eAAsC,KAAtC,CAAN;;AAEA,QAAI,EAAE,GAAG,IAAI,CAAC,MAAL,GAAc,CAAvB,EAA0B;AACxB,MAAA,MAAM,IAAI,MAAM,MAAM,CAAC,YAAvB;AACD,KAFD,MAEO,IAAI,CAAC,MAAM,CAAC,GAAZ,EAAiB;AACtB,MAAA,MAAM,IAAI,GAAV;AACD;AACF;;AAED,EAAA,MAAM,IAAI,MAAM,CAAC,YAAP,GAAsB,WAAhC;AACA,SAAO,MAAP;AACD","sourcesContent":["/**\n * A pretty-format plugin for React's FiberNode objects, which are very large trees that are too\n * large and verbose to print.\n */\nexport default {\n  test(value: any): boolean {\n    return (\n      value &&\n      value.hasOwnProperty('tag') &&\n      value.hasOwnProperty('key') &&\n      value.hasOwnProperty('type')\n    );\n  },\n\n  serialize(node, config, indentation, depth, refs, printer): string {\n    return `${config.min ? '' : 'FiberNode '}{${_printProperties(\n      node,\n      ['tag', 'key', 'type'],\n      config,\n      indentation,\n      depth,\n      refs,\n      printer\n    )}}`;\n  },\n};\n\nfunction _printProperties(object, keys, config, indentation, depth, refs, printer) {\n  let result = config.spacingOuter;\n  let propertyIndentation = indentation + config.indent;\n\n  for (let ii = 0; ii < keys.length; ii++) {\n    let key = keys[ii];\n    let name = printer(key, config, propertyIndentation, depth, refs);\n    let value = printer(object[key], config, propertyIndentation, depth, refs);\n\n    result += `${propertyIndentation}${name}: ${value}`;\n\n    if (ii < keys.length - 1) {\n      result += ',' + config.spacingInner;\n    } else if (!config.min) {\n      result += ',';\n    }\n  }\n\n  result += config.spacingOuter + indentation;\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}