{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { PROVIDER_DEFAULT, PROVIDER_GOOGLE } from \"./ProviderConstants\";\nexport var SUPPORTED = 'SUPPORTED';\nexport var USES_DEFAULT_IMPLEMENTATION = 'USES_DEFAULT_IMPLEMENTATION';\nexport var NOT_SUPPORTED = 'NOT_SUPPORTED';\nexport function getAirMapName(provider) {\n  if (Platform.OS === 'android') return 'AIRMap';\n  if (provider === PROVIDER_GOOGLE) return 'AIRGoogleMap';\n  return 'AIRMap';\n}\n\nfunction getAirComponentName(provider, component) {\n  return \"\".concat(getAirMapName(provider)).concat(component);\n}\n\nexport var contextTypes = {\n  provider: PropTypes.string\n};\nexport var createNotSupportedComponent = message => () => {\n  console.error(message);\n  return null;\n};\nexport var googleMapIsInstalled = !!NativeModules.UIManager[getAirMapName(PROVIDER_GOOGLE)];\nexport default function decorateMapComponent(Component, _ref) {\n  var {\n    componentType,\n    providers\n  } = _ref;\n  var components = {};\n\n  var getDefaultComponent = () => requireNativeComponent(getAirComponentName(null, componentType), Component);\n\n  Component.contextTypes = contextTypes;\n\n  Component.prototype.getAirComponent = function getAirComponent() {\n    var provider = this.context.provider || PROVIDER_DEFAULT;\n    if (components[provider]) return components[provider];\n\n    if (provider === PROVIDER_DEFAULT) {\n      components[PROVIDER_DEFAULT] = getDefaultComponent();\n      return components[PROVIDER_DEFAULT];\n    }\n\n    var providerInfo = providers[provider];\n    var platformSupport = providerInfo[Platform.OS];\n    var componentName = getAirComponentName(provider, componentType);\n\n    if (platformSupport === NOT_SUPPORTED) {\n      components[provider] = createNotSupportedComponent(\"react-native-maps: \".concat(componentName, \" is not supported on \").concat(Platform.OS));\n    } else if (platformSupport === SUPPORTED) {\n      if (provider !== PROVIDER_GOOGLE || Platform.OS === 'ios' && googleMapIsInstalled) {\n        components[provider] = requireNativeComponent(componentName, Component);\n      }\n    } else {\n      if (!components[PROVIDER_DEFAULT]) components[PROVIDER_DEFAULT] = getDefaultComponent();\n      components[provider] = components[PROVIDER_DEFAULT];\n    }\n\n    return components[provider];\n  };\n\n  Component.prototype.getUIManagerCommand = function getUIManagerCommand(name) {\n    return NativeModules.UIManager[getAirComponentName(this.context.provider, componentType)].Commands[name];\n  };\n\n  Component.prototype.getMapManagerCommand = function getMapManagerCommand(name) {\n    var airComponentName = \"\".concat(getAirComponentName(this.context.provider, componentType), \"Manager\");\n    return NativeModules[airComponentName][name];\n  };\n\n  return Component;\n}","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/react-native-maps/lib/components/decorateMapComponent.js"],"names":["PropTypes","requireNativeComponent","PROVIDER_DEFAULT","PROVIDER_GOOGLE","SUPPORTED","USES_DEFAULT_IMPLEMENTATION","NOT_SUPPORTED","getAirMapName","provider","Platform","OS","getAirComponentName","component","contextTypes","string","createNotSupportedComponent","message","console","error","googleMapIsInstalled","NativeModules","UIManager","decorateMapComponent","Component","componentType","providers","components","getDefaultComponent","prototype","getAirComponent","context","providerInfo","platformSupport","componentName","getUIManagerCommand","name","Commands","getMapManagerCommand","airComponentName"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\r\nimport {\r\n  requireNativeComponent,\r\n  NativeModules,\r\n  Platform,\r\n} from 'react-native';\r\nimport {\r\n  PROVIDER_DEFAULT,\r\n  PROVIDER_GOOGLE,\r\n} from './ProviderConstants';\r\n\r\nexport const SUPPORTED = 'SUPPORTED';\r\nexport const USES_DEFAULT_IMPLEMENTATION = 'USES_DEFAULT_IMPLEMENTATION';\r\nexport const NOT_SUPPORTED = 'NOT_SUPPORTED';\r\n\r\nexport function getAirMapName(provider) {\r\n  if (Platform.OS === 'android') return 'AIRMap';\r\n  if (provider === PROVIDER_GOOGLE) return 'AIRGoogleMap';\r\n  return 'AIRMap';\r\n}\r\n\r\nfunction getAirComponentName(provider, component) {\r\n  return `${getAirMapName(provider)}${component}`;\r\n}\r\n\r\nexport const contextTypes = {\r\n  provider: PropTypes.string,\r\n};\r\n\r\nexport const createNotSupportedComponent = message => () => {\r\n  console.error(message); // eslint-disable-line no-console\r\n  return null;\r\n};\r\n\r\nexport const googleMapIsInstalled = !!NativeModules.UIManager[getAirMapName(PROVIDER_GOOGLE)];\r\n\r\nexport default function decorateMapComponent(Component, { componentType, providers }) {\r\n  const components = {};\r\n\r\n  const getDefaultComponent = () =>\r\n    requireNativeComponent(getAirComponentName(null, componentType), Component);\r\n\r\n  Component.contextTypes = contextTypes; // eslint-disable-line no-param-reassign\r\n\r\n  // eslint-disable-next-line no-param-reassign\r\n  Component.prototype.getAirComponent = function getAirComponent() {\r\n    const provider = this.context.provider || PROVIDER_DEFAULT;\r\n    if (components[provider]) return components[provider];\r\n\r\n    if (provider === PROVIDER_DEFAULT) {\r\n      components[PROVIDER_DEFAULT] = getDefaultComponent();\r\n      return components[PROVIDER_DEFAULT];\r\n    }\r\n\r\n    const providerInfo = providers[provider];\r\n    const platformSupport = providerInfo[Platform.OS];\r\n    const componentName = getAirComponentName(provider, componentType);\r\n    if (platformSupport === NOT_SUPPORTED) {\r\n      components[provider] = createNotSupportedComponent(`react-native-maps: ${componentName} is not supported on ${Platform.OS}`); // eslint-disable-line max-len\r\n    } else if (platformSupport === SUPPORTED) {\r\n      if (provider !== PROVIDER_GOOGLE || (Platform.OS === 'ios' && googleMapIsInstalled)) {\r\n        components[provider] = requireNativeComponent(componentName, Component);\r\n      }\r\n    } else { // (platformSupport === USES_DEFAULT_IMPLEMENTATION)\r\n      if (!components[PROVIDER_DEFAULT]) components[PROVIDER_DEFAULT] = getDefaultComponent();\r\n      components[provider] = components[PROVIDER_DEFAULT];\r\n    }\r\n\r\n    return components[provider];\r\n  };\r\n\r\n  Component.prototype.getUIManagerCommand = function getUIManagerCommand(name) {  // eslint-disable-line no-param-reassign,max-len\r\n    return NativeModules.UIManager[getAirComponentName(this.context.provider, componentType)]\r\n      .Commands[name];\r\n  };\r\n\r\n  Component.prototype.getMapManagerCommand = function getMapManagerCommand(name) { // eslint-disable-line no-param-reassign,max-len\r\n    const airComponentName = `${getAirComponentName(this.context.provider, componentType)}Manager`;\r\n    return NativeModules[airComponentName][name];\r\n  };\r\n\r\n  return Component;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}