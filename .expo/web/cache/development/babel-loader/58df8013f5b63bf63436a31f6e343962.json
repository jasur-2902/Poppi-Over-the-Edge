{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nexport default {\n  get name() {\n    return 'ExpoLocalAuthentication';\n  },\n\n  hasHardwareAsync() {\n    return _asyncToGenerator(function* () {\n      return false;\n    })();\n  },\n\n  isEnrolledAsync() {\n    return _asyncToGenerator(function* () {\n      return false;\n    })();\n  },\n\n  supportedAuthenticationTypesAsync() {\n    return _asyncToGenerator(function* () {\n      return [];\n    })();\n  }\n\n};","map":{"version":3,"sources":["../src/ExpoLocalAuthentication.web.ts"],"names":[],"mappings":";;;;AAEA,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,yBAAP;AACD,GAHY;;AAIP,EAAA,gBAAN,GAAsB;AAAA;AACpB,aAAO,KAAP;AADoB;AAErB,GANY;;AAOP,EAAA,eAAN,GAAqB;AAAA;AACnB,aAAO,KAAP;AADmB;AAEpB,GATY;;AAUP,EAAA,iCAAN,GAAuC;AAAA;AACrC,aAAO,EAAP;AADqC;AAEtC;;AAZY,CAAf","sourcesContent":["import { AuthenticationType } from './LocalAuthentication.types';\n\nexport default {\n  get name(): string {\n    return 'ExpoLocalAuthentication';\n  },\n  async hasHardwareAsync(): Promise<boolean> {\n    return false;\n  },\n  async isEnrolledAsync(): Promise<boolean> {\n    return false;\n  },\n  async supportedAuthenticationTypesAsync(): Promise<AuthenticationType[]> {\n    return [];\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}