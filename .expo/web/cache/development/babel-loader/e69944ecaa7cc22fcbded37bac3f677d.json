{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport * as rtlDetect from 'rtl-detect';\nexport default {\n  get isRTL() {\n    return rtlDetect.isRtlLang(this.locale);\n  },\n\n  get locale() {\n    var locale = navigator.language || navigator['systemLanguage'] || navigator['browserLanguage'] || navigator['userLanguage'] || this.locales[0];\n    return locale;\n  },\n\n  get locales() {\n    var {\n      languages = []\n    } = navigator;\n    return Array.from(languages);\n  },\n\n  get timezone() {\n    var defaultTimeZone = 'Etc/UTC';\n\n    if (typeof Intl === 'undefined') {\n      return defaultTimeZone;\n    }\n\n    return Intl.DateTimeFormat().resolvedOptions().timeZone || defaultTimeZone;\n  },\n\n  get isoCurrencyCodes() {\n    return [];\n  },\n\n  get country() {\n    var {\n      locale\n    } = this;\n\n    if (typeof locale === 'string' && locale.length) {\n      var isoCountryCode = locale.substring(locale.lastIndexOf('-') + 1);\n      return isoCountryCode.toUpperCase();\n    }\n\n    return undefined;\n  },\n\n  getLocalizationAsync() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var {\n        country,\n        isoCurrencyCodes,\n        timezone,\n        locales,\n        locale,\n        isRTL\n      } = _this;\n      return {\n        country,\n        isoCurrencyCodes,\n        timezone,\n        locales,\n        locale,\n        isRTL\n      };\n    })();\n  }\n\n};","map":{"version":3,"sources":["../src/ExpoLocalization.web.ts"],"names":[],"mappings":";;;;AAAA,OAAO,KAAK,SAAZ,MAA2B,YAA3B;AAIA,eAAe;AACb,MAAI,KAAJ,GAAS;AACP,WAAO,SAAS,CAAC,SAAV,CAAoB,KAAK,MAAzB,CAAP;AACD,GAHY;;AAIb,MAAI,MAAJ,GAAU;AACR,QAAM,MAAM,GACV,SAAS,CAAC,QAAV,IACA,SAAS,CAAC,gBAAD,CADT,IAEA,SAAS,CAAC,iBAAD,CAFT,IAGA,SAAS,CAAC,cAAD,CAHT,IAIA,KAAK,OAAL,CAAa,CAAb,CALF;AAMA,WAAO,MAAP;AACD,GAZY;;AAab,MAAI,OAAJ,GAAW;AACT,QAAM;AAAE,MAAA,SAAS,GAAG;AAAd,QAAqB,SAA3B;AACA,WAAO,KAAK,CAAC,IAAN,CAAW,SAAX,CAAP;AACD,GAhBY;;AAiBb,MAAI,QAAJ,GAAY;AACV,QAAM,eAAe,GAAG,SAAxB;;AACA,QAAI,OAAO,IAAP,KAAgB,WAApB,EAAiC;AAC/B,aAAO,eAAP;AACD;;AACD,WAAO,IAAI,CAAC,cAAL,GAAsB,eAAtB,GAAwC,QAAxC,IAAoD,eAA3D;AACD,GAvBY;;AAwBb,MAAI,gBAAJ,GAAoB;AAElB,WAAO,EAAP;AACD,GA3BY;;AA4Bb,MAAI,OAAJ,GAAW;AACT,QAAM;AAAE,MAAA;AAAF,QAAa,IAAnB;;AACA,QAAI,OAAO,MAAP,KAAkB,QAAlB,IAA8B,MAAM,CAAC,MAAzC,EAAiD;AAC/C,UAAM,cAAc,GAAG,MAAM,CAAC,SAAP,CAAiB,MAAM,CAAC,WAAP,CAAmB,GAAnB,IAA0B,CAA3C,CAAvB;AACA,aAAO,cAAc,CAAC,WAAf,EAAP;AACD;;AACD,WAAO,SAAP;AACD,GAnCY;;AAoCP,EAAA,oBAAN,GAA0B;AAAA;;AAAA;AACxB,UAAM;AAAE,QAAA,OAAF;AAAW,QAAA,gBAAX;AAA6B,QAAA,QAA7B;AAAuC,QAAA,OAAvC;AAAgD,QAAA,MAAhD;AAAwD,QAAA;AAAxD,UAAkE,KAAxE;AACA,aAAO;AACL,QAAA,OADK;AAEL,QAAA,gBAFK;AAGL,QAAA,QAHK;AAIL,QAAA,OAJK;AAKL,QAAA,MALK;AAML,QAAA;AANK,OAAP;AAFwB;AAUzB;;AA9CY,CAAf","sourcesContent":["import * as rtlDetect from 'rtl-detect';\n\nimport { Localization } from './Localization.types';\n\nexport default {\n  get isRTL(): boolean {\n    return rtlDetect.isRtlLang(this.locale);\n  },\n  get locale(): string {\n    const locale =\n      navigator.language ||\n      navigator['systemLanguage'] ||\n      navigator['browserLanguage'] ||\n      navigator['userLanguage'] ||\n      this.locales[0];\n    return locale;\n  },\n  get locales(): string[] {\n    const { languages = [] } = navigator;\n    return Array.from(languages);\n  },\n  get timezone(): string {\n    const defaultTimeZone = 'Etc/UTC';\n    if (typeof Intl === 'undefined') {\n      return defaultTimeZone;\n    }\n    return Intl.DateTimeFormat().resolvedOptions().timeZone || defaultTimeZone;\n  },\n  get isoCurrencyCodes(): string[] {\n    // TODO: Bacon: Add this - very low priority\n    return [];\n  },\n  get country(): string | undefined {\n    const { locale } = this;\n    if (typeof locale === 'string' && locale.length) {\n      const isoCountryCode = locale.substring(locale.lastIndexOf('-') + 1);\n      return isoCountryCode.toUpperCase();\n    }\n    return undefined;\n  },\n  async getLocalizationAsync(): Promise<Localization> {\n    const { country, isoCurrencyCodes, timezone, locales, locale, isRTL } = this;\n    return {\n      country,\n      isoCurrencyCodes,\n      timezone,\n      locales,\n      locale,\n      isRTL,\n    };\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}