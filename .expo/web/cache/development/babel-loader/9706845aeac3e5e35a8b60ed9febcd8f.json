{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { SyntheticPlatformEmitter } from '@unimodules/core';\nimport { Orientation, WebOrientationLock, WebOrientation } from \"./ScreenOrientation.types\";\nimport { getOrientationLockAsync, getOrientationAsync } from \"./ScreenOrientation\";\nvar OrientationLockAPIToWeb = {\n  DEFAULT: WebOrientationLock.NATURAL,\n  ALL: WebOrientationLock.ANY,\n  PORTRAIT: WebOrientationLock.PORTRAIT,\n  PORTRAIT_UP: WebOrientationLock.PORTRAIT_PRIMARY,\n  PORTRAIT_DOWN: WebOrientationLock.PORTRAIT_SECONDARY,\n  LANDSCAPE: WebOrientationLock.LANDSCAPE,\n  LANDSCAPE_LEFT: WebOrientationLock.LANDSCAPE_PRIMARY,\n  LANDSCAPE_RIGHT: WebOrientationLock.LANDSCAPE_SECONDARY\n};\nvar OrientationWebToAPI = {\n  [WebOrientation.PORTRAIT_PRIMARY]: Orientation.PORTRAIT_UP,\n  [WebOrientation.PORTRAIT_SECONDARY]: Orientation.PORTRAIT_DOWN,\n  [WebOrientation.LANDSCAPE_PRIMARY]: Orientation.LANDSCAPE_LEFT,\n  [WebOrientation.LANDSCAPE_SECONDARY]: Orientation.LANDSCAPE_RIGHT\n};\nvar {\n  screen\n} = window;\nvar orientation = screen.orientation || screen.msOrientation || null;\n\nfunction emitOrientationEvent() {\n  return _emitOrientationEvent.apply(this, arguments);\n}\n\nfunction _emitOrientationEvent() {\n  _emitOrientationEvent = _asyncToGenerator(function* () {\n    var [orientationLock, orientationInfo] = yield Promise.all([getOrientationLockAsync(), getOrientationAsync()]);\n    SyntheticPlatformEmitter.emit('expoDidUpdateDimensions', {\n      orientationLock,\n      orientationInfo\n    });\n  });\n  return _emitOrientationEvent.apply(this, arguments);\n}\n\nif (orientation) {\n  orientation.addEventListener('change', emitOrientationEvent);\n} else {\n  window.addEventListener('orientationchange', emitOrientationEvent);\n}\n\nfunction _convertToLegacyOrientationLock(orientationLock) {\n  switch (orientationLock) {\n    case WebOrientationLock.UNKNOWN:\n      throw new Error(\"expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock to be converted.\");\n\n    case WebOrientationLock.ANY:\n      return ['portrait', 'landscape'];\n\n    case WebOrientationLock.NATURAL:\n      return 'default';\n\n    default:\n      return orientationLock;\n  }\n}\n\nfunction _lockAsync(_x) {\n  return _lockAsync2.apply(this, arguments);\n}\n\nfunction _lockAsync2() {\n  _lockAsync2 = _asyncToGenerator(function* (webOrientationLock) {\n    if (webOrientationLock === WebOrientationLock.UNKNOWN) {\n      throw new Error(\"expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock that can be applied to the device.\");\n    }\n\n    if (screen.orientation && screen.orientation.lock) {\n      yield screen.orientation.lock(webOrientationLock);\n    } else if (screen['lockOrientation'] || screen['mozLockOrientation'] || screen['msLockOrientation']) {\n      var legacyLock = _convertToLegacyOrientationLock(webOrientationLock);\n\n      var lockOrientation = screen['lockOrientation'] || screen['mozLockOrientation'] || screen['msLockOrientation'];\n      var isSuccess = lockOrientation.call(screen, legacyLock);\n\n      if (!isSuccess) {\n        throw new Error(\"Applying orientation lock: \".concat(JSON.stringify(webOrientationLock), \" to device was denied\"));\n      }\n    } else {\n      throw new Error(\"expo-screen-orientation: The browser doesn't support locking screen orientation.\");\n    }\n  });\n  return _lockAsync2.apply(this, arguments);\n}\n\nvar _lastWebOrientationLock = WebOrientationLock.UNKNOWN;\nexport default {\n  get name() {\n    return 'ExpoScreenOrientation';\n  },\n\n  supportsOrientationLockAsync(orientationLock) {\n    return _asyncToGenerator(function* () {\n      return orientationLock in OrientationLockAPIToWeb;\n    })();\n  },\n\n  getPlatformOrientationLockAsync() {\n    return _asyncToGenerator(function* () {\n      return _lastWebOrientationLock;\n    })();\n  },\n\n  getOrientationAsync() {\n    return _asyncToGenerator(function* () {\n      var webOrientation = screen['msOrientation'] || (screen.orientation || screen['mozOrientation'] || {}).type;\n\n      if (!webOrientation) {\n        throw new Error(\"getOrientationAsync isn't supported in this browser.\");\n      }\n\n      return {\n        orientation: OrientationWebToAPI[webOrientation]\n      };\n    })();\n  },\n\n  lockAsync(orientationLock) {\n    return _asyncToGenerator(function* () {\n      var webOrientationLock = OrientationLockAPIToWeb[orientationLock];\n\n      if (!webOrientationLock) {\n        throw new TypeError(\"Invalid Orientation Lock: \".concat(orientationLock));\n      }\n\n      yield _lockAsync(webOrientationLock);\n    })();\n  },\n\n  lockPlatformAsync(webOrientationLock) {\n    return _asyncToGenerator(function* () {\n      yield _lockAsync(webOrientationLock);\n      _lastWebOrientationLock = webOrientationLock;\n    })();\n  },\n\n  unlockAsync() {\n    return _asyncToGenerator(function* () {\n      if (screen.orientation && screen.orientation.unlock) {\n        screen.orientation.unlock();\n      } else if (screen['unlockOrientation'] || screen['mozUnlockOrientation'] || screen['msUnlockOrientation']) {\n        var unlockOrientation = screen['unlockOrientation'] || screen['mozUnlockOrientation'] || screen['msUnlockOrientation'];\n        var isSuccess = unlockOrientation.call(screen);\n\n        if (!isSuccess) {\n          throw new Error(\"Unlocking screen orientation on device was denied\");\n        }\n      } else {\n        throw new Error(\"expo-screen-orientation: The browser doesn't support unlocking screen orientation.\");\n      }\n    })();\n  }\n\n};","map":{"version":3,"sources":["../../src/ScreenOrientation/ExpoScreenOrientation.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { SyntheticPlatformEmitter } from '@unimodules/core';\n\nimport {\n  OrientationInfo,\n  Orientation,\n  OrientationLock,\n  WebOrientationLock,\n  WebOrientation,\n} from './ScreenOrientation.types';\n\nimport { getOrientationLockAsync, getOrientationAsync } from './ScreenOrientation';\n\nconst OrientationLockAPIToWeb: {\n  [lock: string]: WebOrientationLock;\n} = {\n  DEFAULT: WebOrientationLock.NATURAL,\n  ALL: WebOrientationLock.ANY,\n  PORTRAIT: WebOrientationLock.PORTRAIT,\n  PORTRAIT_UP: WebOrientationLock.PORTRAIT_PRIMARY,\n  PORTRAIT_DOWN: WebOrientationLock.PORTRAIT_SECONDARY,\n  LANDSCAPE: WebOrientationLock.LANDSCAPE,\n  LANDSCAPE_LEFT: WebOrientationLock.LANDSCAPE_PRIMARY,\n  LANDSCAPE_RIGHT: WebOrientationLock.LANDSCAPE_SECONDARY,\n};\n\nconst OrientationWebToAPI: {\n  [orientationWeb: string]: Orientation;\n} = {\n  [WebOrientation.PORTRAIT_PRIMARY]: Orientation.PORTRAIT_UP,\n  [WebOrientation.PORTRAIT_SECONDARY]: Orientation.PORTRAIT_DOWN,\n  [WebOrientation.LANDSCAPE_PRIMARY]: Orientation.LANDSCAPE_LEFT,\n  [WebOrientation.LANDSCAPE_SECONDARY]: Orientation.LANDSCAPE_RIGHT,\n};\n\ndeclare const window: Window;\n\nconst { screen } = window;\nconst orientation: ScreenOrientation | null =\n  screen.orientation || (screen as any).msOrientation || null;\n\nasync function emitOrientationEvent() {\n  const [orientationLock, orientationInfo] = await Promise.all([\n    getOrientationLockAsync(),\n    getOrientationAsync(),\n  ]);\n  SyntheticPlatformEmitter.emit('expoDidUpdateDimensions', {\n    orientationLock,\n    orientationInfo,\n  });\n}\n\nif (orientation) {\n  orientation.addEventListener('change', emitOrientationEvent);\n} else {\n  window.addEventListener('orientationchange', emitOrientationEvent);\n}\n\nfunction _convertToLegacyOrientationLock(orientationLock: WebOrientationLock): string | string[] {\n  switch (orientationLock) {\n    case WebOrientationLock.UNKNOWN:\n      throw new Error(\n        `expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock to be converted.`\n      );\n    case WebOrientationLock.ANY:\n      return ['portrait', 'landscape'];\n    case WebOrientationLock.NATURAL:\n      return 'default';\n    default:\n      return orientationLock;\n  }\n}\n\nasync function _lockAsync(webOrientationLock: WebOrientationLock): Promise<void> {\n  if (webOrientationLock === WebOrientationLock.UNKNOWN) {\n    throw new Error(\n      `expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock that can be applied to the device.`\n    );\n  }\n  if (screen.orientation && screen.orientation.lock) {\n    await screen.orientation.lock(webOrientationLock);\n  } else if (\n    screen['lockOrientation'] ||\n    screen['mozLockOrientation'] ||\n    screen['msLockOrientation']\n  ) {\n    const legacyLock = _convertToLegacyOrientationLock(webOrientationLock);\n    const lockOrientation =\n      screen['lockOrientation'] || screen['mozLockOrientation'] || screen['msLockOrientation'];\n    // correct `this` context must be passed in otherwise method call is disallowed by browser\n    const isSuccess = lockOrientation.call(screen, legacyLock);\n    if (!isSuccess) {\n      throw new Error(\n        `Applying orientation lock: ${JSON.stringify(webOrientationLock)} to device was denied`\n      );\n    }\n  } else {\n    throw new Error(\n      `expo-screen-orientation: The browser doesn't support locking screen orientation.`\n    );\n  }\n}\n\nlet _lastWebOrientationLock: WebOrientationLock = WebOrientationLock.UNKNOWN;\n\nexport default {\n  get name(): string {\n    return 'ExpoScreenOrientation';\n  },\n  async supportsOrientationLockAsync(orientationLock: OrientationLock): Promise<boolean> {\n    return orientationLock in OrientationLockAPIToWeb;\n  },\n  async getPlatformOrientationLockAsync(): Promise<WebOrientationLock> {\n    return _lastWebOrientationLock;\n  },\n  async getOrientationAsync(): Promise<OrientationInfo> {\n    const webOrientation =\n      screen['msOrientation'] || (screen.orientation || screen['mozOrientation'] || {}).type;\n    if (!webOrientation) {\n      throw new Error(`getOrientationAsync isn't supported in this browser.`);\n    }\n    return {\n      orientation: OrientationWebToAPI[webOrientation],\n    };\n  },\n  async lockAsync(orientationLock: OrientationLock): Promise<void> {\n    const webOrientationLock = OrientationLockAPIToWeb[orientationLock];\n    if (!webOrientationLock) {\n      throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n    }\n    await _lockAsync(webOrientationLock);\n  },\n  async lockPlatformAsync(webOrientationLock: WebOrientationLock): Promise<void> {\n    await _lockAsync(webOrientationLock);\n    _lastWebOrientationLock = webOrientationLock;\n  },\n  async unlockAsync(): Promise<void> {\n    if (screen.orientation && screen.orientation.unlock) {\n      screen.orientation.unlock();\n    } else if (\n      screen['unlockOrientation'] ||\n      screen['mozUnlockOrientation'] ||\n      screen['msUnlockOrientation']\n    ) {\n      const unlockOrientation =\n        screen['unlockOrientation'] ||\n        screen['mozUnlockOrientation'] ||\n        screen['msUnlockOrientation'];\n      // correct `this` context must be passed in otherwise method call is disallowed by browser\n      const isSuccess = unlockOrientation.call(screen);\n      if (!isSuccess) {\n        throw new Error(`Unlocking screen orientation on device was denied`);\n      }\n    } else {\n      throw new Error(\n        `expo-screen-orientation: The browser doesn't support unlocking screen orientation.`\n      );\n    }\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}