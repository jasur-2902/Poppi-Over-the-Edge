{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jshukurov\\\\Desktop\\\\Poppi Over The Edge\\\\Poppi-Over-the-Edge-master\\\\node_modules\\\\expo-blur\\\\build\\\\BlurView.web.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport getBackgroundColor from \"./getBackgroundColor\";\nexport default class BlurView extends React.Component {\n  render() {\n    var _this$props = this.props,\n        {\n      tint,\n      intensity,\n      style = {}\n    } = _this$props,\n        props = _objectWithoutProperties(_this$props, [\"tint\", \"intensity\", \"style\"]);\n\n    var blurStyle = getBlurStyle({\n      tint,\n      intensity\n    });\n    return React.createElement(View, _extends({}, props, {\n      style: [style, blurStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 16\n      }\n    }));\n  }\n\n}\nBlurView.propTypes = _objectSpread({\n  tint: PropTypes.oneOf(['light', 'default', 'dark'])\n}, ViewPropTypes);\nBlurView.defaultProps = {\n  tint: 'default',\n  intensity: 50\n};\n\nfunction isBlurSupported() {\n  return typeof CSS !== 'undefined' && CSS.supports('-webkit-backdrop-filter', 'blur(1px)');\n}\n\nfunction getBlurStyle(_ref) {\n  var {\n    intensity,\n    tint\n  } = _ref;\n\n  if (isBlurSupported()) {\n    var backdropFilter = \"blur(\".concat(intensity * 0.25, \"px)\");\n\n    if (tint === 'dark') {\n      backdropFilter += ' brightness(50%)';\n    } else if (tint === 'light') {\n      backdropFilter += ' brightness(150%)';\n    }\n\n    return {\n      backdropFilter\n    };\n  } else {\n    var backgroundColor = getBackgroundColor(intensity, tint);\n    return {\n      backgroundColor\n    };\n  }\n}","map":{"version":3,"sources":["../src/BlurView.web.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;;;AAIA,OAAO,kBAAP;AAEA,eAAc,MAAO,QAAP,SAAwB,KAAK,CAAC,SAA9B,CAA8C;AAW1D,EAAA,MAAM,GAAA;AACJ,sBAAgD,KAAK,KAArD;AAAA,QAAI;AAAE,MAAA,IAAF;AAAQ,MAAA,SAAR;AAAmB,MAAA,KAAK,GAAG;AAA3B,KAAJ;AAAA,QAAsC,KAAtC;;AAEA,QAAM,SAAS,GAAG,YAAY,CAAC;AAAE,MAAA,IAAF;AAAQ,MAAA;AAAR,KAAD,CAA9B;AAEA,WAAO,oBAAC,IAAD,eAAU,KAAV;AAAiB,MAAA,KAAK,EAAE,CAAC,KAAD,EAAQ,SAAR,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD;;AAjByD;AACnD,QAAA,CAAA,SAAA;AACL,EAAA,IAAI,EAAE,SAAS,CAAC,KAAV,CAAgB,CAAC,OAAD,EAAU,SAAV,EAAqB,MAArB,CAAhB;AADD,GAEF,aAFE;AAKA,QAAA,CAAA,YAAA,GAAe;AACpB,EAAA,IAAI,EAAE,SADc;AAEpB,EAAA,SAAS,EAAE;AAFS,CAAf;;AAcT,SAAS,eAAT,GAAwB;AAItB,SAAO,OAAO,GAAP,KAAe,WAAf,IAA8B,GAAG,CAAC,QAAJ,CAAa,yBAAb,EAAwC,WAAxC,CAArC;AAGD;;AAED,SAAS,YAAT,OAAyC;AAAA,MAAnB;AAAE,IAAA,SAAF;AAAa,IAAA;AAAb,GAAmB;;AACvC,MAAI,eAAe,EAAnB,EAAuB;AACrB,QAAI,cAAc,kBAAW,SAAS,GAAG,IAAvB,QAAlB;;AACA,QAAI,IAAI,KAAK,MAAb,EAAqB;AACnB,MAAA,cAAc,IAAI,kBAAlB;AACD,KAFD,MAEO,IAAI,IAAI,KAAK,OAAb,EAAsB;AAC3B,MAAA,cAAc,IAAI,mBAAlB;AACD;;AACD,WAAO;AACL,MAAA;AADK,KAAP;AAGD,GAVD,MAUO;AACL,QAAI,eAAe,GAAG,kBAAkB,CAAC,SAAD,EAAY,IAAZ,CAAxC;AACA,WAAO;AAAE,MAAA;AAAF,KAAP;AACD;AACF","sourcesContent":["import PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { View, ViewPropTypes } from 'react-native';\n\nimport { BlurTint, Props } from './BlurView.types';\nimport getBackgroundColor from './getBackgroundColor';\n\nexport default class BlurView extends React.Component<Props> {\n  static propTypes = {\n    tint: PropTypes.oneOf(['light', 'default', 'dark']),\n    ...ViewPropTypes,\n  };\n\n  static defaultProps = {\n    tint: 'default' as BlurTint,\n    intensity: 50,\n  };\n\n  render() {\n    let { tint, intensity, style = {}, ...props } = this.props;\n\n    const blurStyle = getBlurStyle({ tint, intensity });\n\n    return <View {...props} style={[style, blurStyle]} />;\n  }\n}\n\nfunction isBlurSupported(): boolean {\n  // https://developer.mozilla.org/en-US/docs/Web/API/CSS/supports\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility\n  // TODO: Bacon: Chrome blur seems broken natively\n  return typeof CSS !== 'undefined' && CSS.supports('-webkit-backdrop-filter', 'blur(1px)');\n  // TODO: Bacon: Chrome doesn't work, RNWeb uses webkit on Safari, which works.\n  // || CSS.supports('backdrop-filter', 'blur(1px)')\n}\n\nfunction getBlurStyle({ intensity, tint }): { [key: string]: string } {\n  if (isBlurSupported()) {\n    let backdropFilter = `blur(${intensity * 0.25}px)`;\n    if (tint === 'dark') {\n      backdropFilter += ' brightness(50%)';\n    } else if (tint === 'light') {\n      backdropFilter += ' brightness(150%)';\n    }\n    return {\n      backdropFilter,\n    };\n  } else {\n    let backgroundColor = getBackgroundColor(intensity, tint);\n    return { backgroundColor };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}