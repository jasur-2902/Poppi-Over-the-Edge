{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jshukurov\\\\Desktop\\\\Poppi Over The Edge\\\\Poppi-Over-the-Edge-master\\\\node_modules\\\\expo-react-native-adapter\\\\build\\\\NativeViewManagerAdapter.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport omit from 'lodash.omit';\nimport pick from 'lodash.pick';\nimport React from 'react';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nvar ViewPropTypesKeys = Object.keys(ViewPropTypes);\nexport function requireNativeViewManager(viewName) {\n  if (__DEV__) {\n    var {\n      ExpoNativeModuleProxy\n    } = NativeModules;\n\n    if (!ExpoNativeModuleProxy.viewManagersNames.includes(viewName)) {\n      var exportedViewManagerNames = ExpoNativeModuleProxy.viewManagersNames.join(', ');\n      console.warn(\"The native view manager required by name (\".concat(viewName, \") from NativeViewManagerAdapter isn't exported by expo-react-native-adapter. Views of this type may not render correctly. Exported view managers: [\").concat(exportedViewManagerNames, \"].\"));\n    }\n  }\n\n  var reactNativeViewName = \"ViewManagerAdapter_\".concat(viewName);\n  var ReactNativeComponent = requireNativeComponent(reactNativeViewName);\n  var reactNativeUIConfiguration = UIManager[reactNativeViewName] || {\n    NativeProps: {},\n    directEventTypes: {}\n  };\n  var reactNativeComponentPropNames = ['children', ...ViewPropTypesKeys, ...Object.keys(reactNativeUIConfiguration.NativeProps), ...Object.keys(reactNativeUIConfiguration.directEventTypes)];\n\n  function NativeComponentAdapter(props, ref) {\n    var nativeProps = pick(props, reactNativeComponentPropNames);\n    var proxiedProps = omit(props, reactNativeComponentPropNames);\n    return React.createElement(ReactNativeComponent, _extends({}, nativeProps, {\n      proxiedProperties: proxiedProps,\n      ref: ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 16\n      }\n    }));\n  }\n\n  NativeComponentAdapter.displayName = \"Adapter<\".concat(viewName, \">\");\n  return React.forwardRef(NativeComponentAdapter);\n}","map":{"version":3,"sources":["../src/NativeViewManagerAdapter.tsx"],"names":[],"mappings":";;;;AAAA,OAAO,IAAP,MAAiB,aAAjB;AACA,OAAO,IAAP,MAAiB,aAAjB;AACA,OAAO,KAAP,MAAkB,OAAlB;;;;SACkD,sB;AAclD,IAAM,iBAAiB,GAAG,MAAM,CAAC,IAAP,CAAY,aAAZ,CAA1B;AAKA,OAAM,SAAU,wBAAV,CAA4C,QAA5C,EAA4D;AAChE,MAAI,OAAJ,EAAa;AACX,QAAM;AAAE,MAAA;AAAF,QAA4B,aAAlC;;AACA,QAAI,CAAC,qBAAqB,CAAC,iBAAtB,CAAwC,QAAxC,CAAiD,QAAjD,CAAL,EAAiE;AAC/D,UAAM,wBAAwB,GAAG,qBAAqB,CAAC,iBAAtB,CAAwC,IAAxC,CAA6C,IAA7C,CAAjC;AACA,MAAA,OAAO,CAAC,IAAR,qDAC+C,QAD/C,gKAC6M,wBAD7M;AAGD;AACF;;AAID,MAAM,mBAAmB,gCAAyB,QAAzB,CAAzB;AACA,MAAM,oBAAoB,GAAG,sBAAsB,CAAC,mBAAD,CAAnD;AACA,MAAM,0BAA0B,GAAG,SAAS,CAAC,mBAAD,CAAT,IAAkC;AACnE,IAAA,WAAW,EAAE,EADsD;AAEnE,IAAA,gBAAgB,EAAE;AAFiD,GAArE;AAIA,MAAM,6BAA6B,GAAG,CACpC,UADoC,EAEpC,GAAG,iBAFiC,EAGpC,GAAG,MAAM,CAAC,IAAP,CAAY,0BAA0B,CAAC,WAAvC,CAHiC,EAIpC,GAAG,MAAM,CAAC,IAAP,CAAY,0BAA0B,CAAC,gBAAvC,CAJiC,CAAtC;;AAQA,WAAS,sBAAT,CAAgC,KAAhC,EAAuC,GAAvC,EAA0C;AAGxC,QAAM,WAAW,GAAG,IAAI,CAAC,KAAD,EAAQ,6BAAR,CAAxB;AACA,QAAM,YAAY,GAAG,IAAI,CAAC,KAAD,EAAQ,6BAAR,CAAzB;AACA,WAAO,oBAAC,oBAAD,eAA0B,WAA1B;AAAuC,MAAA,iBAAiB,EAAE,YAA1D;AAAwE,MAAA,GAAG,EAAE,GAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD;;AACD,EAAA,sBAAsB,CAAC,WAAvB,qBAAgD,QAAhD;AACA,SAAO,KAAK,CAAC,UAAN,CAAiB,sBAAjB,CAAP;AACD","sourcesContent":["import omit from 'lodash.omit';\nimport pick from 'lodash.pick';\nimport React from 'react';\nimport { NativeModules, UIManager, ViewPropTypes, requireNativeComponent } from 'react-native';\n\n// To make the transition from React Native's `requireNativeComponent` to Expo's\n// `requireNativeViewManager` as easy as possible, `requireNativeViewManager` is a drop-in\n// replacement for `requireNativeComponent`.\n//\n// For each view manager, we create a wrapper component that accepts all of the props available to\n// the author of the universal module. This wrapper component splits the props into two sets: props\n// passed to React Native's View (ex: style, testID) and custom view props, which are passed to the\n// adapter view component in a prop called `proxiedProperties`.\n\n// NOTE: React Native is moving away from runtime PropTypes and may remove ViewPropTypes, in which\n// case we will need another way to separate standard React Native view props from other props,\n// which we proxy through the adapter\nconst ViewPropTypesKeys = Object.keys(ViewPropTypes);\n\n/**\n * A drop-in replacement for `requireNativeComponent`.\n */\nexport function requireNativeViewManager<P = any>(viewName: string): React.ComponentType<P> {\n  if (__DEV__) {\n    const { ExpoNativeModuleProxy } = NativeModules;\n    if (!ExpoNativeModuleProxy.viewManagersNames.includes(viewName)) {\n      const exportedViewManagerNames = ExpoNativeModuleProxy.viewManagersNames.join(', ');\n      console.warn(\n        `The native view manager required by name (${viewName}) from NativeViewManagerAdapter isn't exported by expo-react-native-adapter. Views of this type may not render correctly. Exported view managers: [${exportedViewManagerNames}].`\n      );\n    }\n  }\n\n  // Set up the React Native native component, which is an adapter to the universal module's view\n  // manager\n  const reactNativeViewName = `ViewManagerAdapter_${viewName}`;\n  const ReactNativeComponent = requireNativeComponent(reactNativeViewName);\n  const reactNativeUIConfiguration = UIManager[reactNativeViewName] || {\n    NativeProps: {},\n    directEventTypes: {},\n  };\n  const reactNativeComponentPropNames = [\n    'children',\n    ...ViewPropTypesKeys,\n    ...Object.keys(reactNativeUIConfiguration.NativeProps),\n    ...Object.keys(reactNativeUIConfiguration.directEventTypes),\n  ];\n\n  // Define a component for universal-module authors to access their native view manager\n  function NativeComponentAdapter(props, ref) {\n    // TODO: `omit` may incur a meaningful performance cost across many native components rendered\n    // in the same update. Profile this and write out a partition function if this is a bottleneck.\n    const nativeProps = pick(props, reactNativeComponentPropNames);\n    const proxiedProps = omit(props, reactNativeComponentPropNames);\n    return <ReactNativeComponent {...nativeProps} proxiedProperties={proxiedProps} ref={ref} />;\n  }\n  NativeComponentAdapter.displayName = `Adapter<${viewName}>`;\n  return React.forwardRef(NativeComponentAdapter);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}