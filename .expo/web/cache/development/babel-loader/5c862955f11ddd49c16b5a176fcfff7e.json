{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jshukurov\\\\Desktop\\\\Poppi Over The Edge\\\\Poppi-Over-the-Edge-master\\\\node_modules\\\\expo\\\\build\\\\launch\\\\RootErrorBoundary.js\";\nimport React from 'react';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { getAppLoadingLifecycleEmitter } from \"./AppLoading\";\nexport default class RootErrorBoundary extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      error: null\n    };\n    this._appLoadingIsMounted = false;\n\n    this._subscribeToGlobalErrors = () => {\n      this._appLoadingIsMounted = true;\n      var ErrorUtils = global.ErrorUtils;\n      var originalErrorHandler = ErrorUtils.getGlobalHandler();\n      ErrorUtils.setGlobalHandler((error, isFatal) => {\n        if (this._appLoadingIsMounted) {\n          NativeModules.ExponentAppLoadingManager && NativeModules.ExponentAppLoadingManager.finishedAsync();\n\n          if (isFatal) {\n            this.setState({\n              error\n            });\n          }\n        }\n\n        originalErrorHandler(error, isFatal);\n      });\n    };\n\n    this._unsubscribeFromGlobalErrors = () => {\n      this._appLoadingIsMounted = false;\n    };\n  }\n\n  componentWillMount() {\n    if (__DEV__) {\n      getAppLoadingLifecycleEmitter().once('componentDidMount', this._subscribeToGlobalErrors);\n      getAppLoadingLifecycleEmitter().once('componentWillUnmount', this._unsubscribeFromGlobalErrors);\n    }\n  }\n\n  componentDidCatch(error) {\n    if (this._appLoadingIsMounted) {\n      NativeModules.ExponentAppLoadingManager && NativeModules.ExponentAppLoadingManager.finishedAsync();\n      this.setState({\n        error\n      });\n    }\n\n    console.error(error);\n  }\n\n  render() {\n    if (this.state.error) {\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        style: styles.warningIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }\n      }, \"\\u26A0\\uFE0F\"), React.createElement(Text, {\n        style: [styles.paragraph, {\n          color: '#000'\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }\n      }, \"A fatal error was encountered while rendering the root component.\"), React.createElement(Text, {\n        style: styles.paragraph,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }\n      }, \"Review your application logs for more information, and reload the app when the issue is resolved. In production, your app would have crashed.\"));\n    } else {\n      return this.props.children;\n    }\n  }\n\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  paragraph: {\n    marginBottom: 10,\n    textAlign: 'center',\n    marginHorizontal: 30,\n    maxWidth: 350,\n    fontSize: 15,\n    color: '#888'\n  },\n  warningIcon: {\n    fontSize: 40,\n    marginBottom: 20\n  }\n});","map":{"version":3,"sources":["../../src/launch/RootErrorBoundary.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { NativeModules, StyleSheet, Text, View } from 'react-native';\n\nimport { getAppLoadingLifecycleEmitter } from './AppLoading';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype State = {\n  error: Error | null;\n};\n\nexport default class RootErrorBoundary extends React.Component<Props, State> {\n  state = {\n    error: null,\n  };\n\n  _appLoadingIsMounted = false;\n\n  componentWillMount() {\n    // In production the app will just hard crash on errors, unless the developer decides to handle\n    // them by overriding the global error handler and swallowing the error, in which case they are\n    // responsible for determining how to recover from this state.\n    if (__DEV__) {\n      getAppLoadingLifecycleEmitter().once('componentDidMount', this._subscribeToGlobalErrors);\n      getAppLoadingLifecycleEmitter().once(\n        'componentWillUnmount',\n        this._unsubscribeFromGlobalErrors\n      );\n    }\n  }\n\n  _subscribeToGlobalErrors = () => {\n    this._appLoadingIsMounted = true;\n\n    let ErrorUtils = global.ErrorUtils;\n    let originalErrorHandler = ErrorUtils.getGlobalHandler();\n\n    ErrorUtils.setGlobalHandler((error, isFatal) => {\n      if (this._appLoadingIsMounted) {\n        NativeModules.ExponentAppLoadingManager &&\n          NativeModules.ExponentAppLoadingManager.finishedAsync();\n\n        if (isFatal) {\n          this.setState({ error });\n        }\n      }\n\n      originalErrorHandler(error, isFatal);\n    });\n  };\n\n  _unsubscribeFromGlobalErrors = () => {\n    // We don't remove the global error handler that we set here because it is conceivable that the\n    // user may add error handlers *after* we subscribe, and we don't want to override those, so\n    // instead we just gate the call\n    this._appLoadingIsMounted = false;\n  };\n\n  // Test this by adding `throw new Error('example')` to your root component\n  componentDidCatch(error: Error) {\n    if (this._appLoadingIsMounted) {\n      NativeModules.ExponentAppLoadingManager &&\n        NativeModules.ExponentAppLoadingManager.finishedAsync();\n\n      this.setState({ error });\n    }\n\n    console.error(error);\n  }\n\n  render() {\n    if (this.state.error) {\n      return (\n        <View style={styles.container}>\n          <Text style={styles.warningIcon}>⚠️</Text>\n          <Text style={[styles.paragraph, { color: '#000' }]}>\n            A fatal error was encountered while rendering the root component.\n          </Text>\n          <Text style={styles.paragraph}>\n            Review your application logs for more information, and reload the app when the issue is\n            resolved. In production, your app would have crashed.\n          </Text>\n        </View>\n      );\n    } else {\n      return this.props.children;\n    }\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  paragraph: {\n    marginBottom: 10,\n    textAlign: 'center',\n    marginHorizontal: 30,\n    maxWidth: 350,\n    fontSize: 15,\n    color: '#888',\n  },\n  warningIcon: {\n    fontSize: 40,\n    marginBottom: 20,\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}