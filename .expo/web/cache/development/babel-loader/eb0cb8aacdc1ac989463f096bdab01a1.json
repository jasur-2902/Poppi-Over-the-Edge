{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jshukurov\\\\Desktop\\\\Poppi Over The Edge\\\\Poppi-Over-the-Edge-master\\\\node_modules\\\\expo-av\\\\build\\\\ExponentVideo.web.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ExponentAV from \"./ExponentAV\";\nexport var FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;\nexport var FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;\nexport var FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;\nexport var FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\nexport default class ExponentVideo extends React.Component {\n  constructor() {\n    var _this;\n\n    super(...arguments);\n    _this = this;\n    this.onStatusUpdate = _asyncToGenerator(function* () {\n      if (!_this.props.onStatusUpdate) {\n        return;\n      }\n\n      var nativeEvent = yield ExponentAV.getStatusForVideo(_this._video);\n\n      _this.props.onStatusUpdate({\n        nativeEvent\n      });\n    });\n\n    this.onLoadStart = () => {\n      if (!this.props.onLoadStart) {\n        return;\n      }\n\n      this.props.onLoadStart();\n      this.onStatusUpdate();\n    };\n\n    this.onLoadedData = event => {\n      if (!this.props.onLoad) {\n        return;\n      }\n\n      this.props.onLoad(event);\n      this.onStatusUpdate();\n    };\n\n    this.onError = event => {\n      if (!this.props.onError) {\n        return;\n      }\n\n      this.props.onError(event);\n      this.onStatusUpdate();\n    };\n\n    this.onProgress = () => {\n      this.onStatusUpdate();\n    };\n\n    this.onSeeking = () => {\n      this.onStatusUpdate();\n    };\n\n    this.onEnded = () => {\n      this.onStatusUpdate();\n    };\n\n    this.onLoadedMetadata = () => {\n      this.onStatusUpdate();\n    };\n\n    this.onCanPlay = event => {\n      if (!this.props.onReadyForDisplay) {\n        return;\n      }\n\n      this.props.onReadyForDisplay(event);\n      this.onStatusUpdate();\n    };\n\n    this.onStalled = () => {\n      this.onStatusUpdate();\n    };\n\n    this.onRef = ref => {\n      this._video = ref;\n      this.onStatusUpdate();\n    };\n  }\n\n  render() {\n    var {\n      source,\n      status = {},\n      resizeMode: objectFit,\n      useNativeControls,\n      style\n    } = this.props;\n    var customStyle = {\n      position: undefined,\n      objectFit,\n      overflow: 'hidden'\n    };\n    var finalStyle = StyleSheet.flatten([style, customStyle]);\n    return React.createElement(\"video\", {\n      ref: this.onRef,\n      onLoadStart: this.onLoadStart,\n      onLoadedData: this.onLoadedData,\n      onError: this.onError,\n      onTimeUpdate: this.onProgress,\n      onSeeking: this.onSeeking,\n      onEnded: this.onEnded,\n      onLoadedMetadata: this.onLoadedMetadata,\n      onCanPlay: this.onCanPlay,\n      onStalled: this.onStalled,\n      src: (source || {\n        uri: undefined\n      }).uri,\n      muted: status.isMuted,\n      loop: status.isLooping,\n      autoPlay: status.shouldPlay,\n      controls: useNativeControls,\n      style: finalStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["../src/ExponentVideo.web.tsx"],"names":[],"mappings":";;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;;AAEA,OAAO,UAAP;AA6BA,OAAO,IAAM,qCAAqC,GAAG,CAA9C;AACP,OAAO,IAAM,oCAAoC,GAAG,CAA7C;AACP,OAAO,IAAM,qCAAqC,GAAG,CAA9C;AACP,OAAO,IAAM,oCAAoC,GAAG,CAA7C;AAEP,OAAO,IAAM,yCAAyC,GAAG,qCAAlD;AACP,OAAO,IAAM,wCAAwC,GAAG,oCAAjD;AACP,OAAO,IAAM,yCAAyC,GAAG,qCAAlD;AACP,OAAO,IAAM,wCAAwC,GAAG,oCAAjD;AAEP,eAAc,MAAO,aAAP,SAA6B,KAAK,CAAC,SAAnC,CAAgE;AAA9E,EAAA,WAAA,GAAA;AAAA;;uBAAA;AAAA;AAGE,SAAA,cAAA,qBAAiB,aAAW;AAC1B,UAAI,CAAC,KAAI,CAAC,KAAL,CAAW,cAAhB,EAAgC;AAC9B;AACD;;AACD,UAAM,WAAW,SAAS,UAAU,CAAC,iBAAX,CAA6B,KAAI,CAAC,MAAlC,CAA1B;;AACA,MAAA,KAAI,CAAC,KAAL,CAAW,cAAX,CAA0B;AAAE,QAAA;AAAF,OAA1B;AACD,KAND;;AAQA,SAAA,WAAA,GAAc,MAAK;AACjB,UAAI,CAAC,KAAK,KAAL,CAAW,WAAhB,EAA6B;AAC3B;AACD;;AACD,WAAK,KAAL,CAAW,WAAX;AACA,WAAK,cAAL;AACD,KAND;;AAQA,SAAA,YAAA,GAAe,KAAK,IAAG;AACrB,UAAI,CAAC,KAAK,KAAL,CAAW,MAAhB,EAAwB;AACtB;AACD;;AACD,WAAK,KAAL,CAAW,MAAX,CAAkB,KAAlB;AACA,WAAK,cAAL;AACD,KAND;;AAQA,SAAA,OAAA,GAAU,KAAK,IAAG;AAChB,UAAI,CAAC,KAAK,KAAL,CAAW,OAAhB,EAAyB;AACvB;AACD;;AACD,WAAK,KAAL,CAAW,OAAX,CAAmB,KAAnB;AACA,WAAK,cAAL;AACD,KAND;;AAQA,SAAA,UAAA,GAAa,MAAK;AAChB,WAAK,cAAL;AACD,KAFD;;AAIA,SAAA,SAAA,GAAY,MAAK;AACf,WAAK,cAAL;AACD,KAFD;;AAIA,SAAA,OAAA,GAAU,MAAK;AACb,WAAK,cAAL;AACD,KAFD;;AAIA,SAAA,gBAAA,GAAmB,MAAK;AACtB,WAAK,cAAL;AACD,KAFD;;AAIA,SAAA,SAAA,GAAY,KAAK,IAAG;AAClB,UAAI,CAAC,KAAK,KAAL,CAAW,iBAAhB,EAAmC;AACjC;AACD;;AACD,WAAK,KAAL,CAAW,iBAAX,CAA6B,KAA7B;AACA,WAAK,cAAL;AACD,KAND;;AAQA,SAAA,SAAA,GAAY,MAAK;AACf,WAAK,cAAL;AACD,KAFD;;AAIA,SAAA,KAAA,GAAS,GAAD,IAA0B;AAChC,WAAK,MAAL,GAAc,GAAd;AACA,WAAK,cAAL;AACD,KAHD;AAmCD;;AA9BC,EAAA,MAAM,GAAA;AACJ,QAAM;AAAE,MAAA,MAAF;AAAU,MAAA,MAAM,GAAG,EAAnB;AAAuB,MAAA,UAAU,EAAE,SAAnC;AAA8C,MAAA,iBAA9C;AAAiE,MAAA;AAAjE,QAA2E,KAAK,KAAtF;AAEA,QAAM,WAAW,GAAG;AAClB,MAAA,QAAQ,EAAE,SADQ;AAElB,MAAA,SAFkB;AAGlB,MAAA,QAAQ,EAAE;AAHQ,KAApB;AAKA,QAAM,UAAU,GAAG,UAAU,CAAC,OAAX,CAAmB,CAAC,KAAD,EAAQ,WAAR,CAAnB,CAAnB;AACA,WACE;AACE,MAAA,GAAG,EAAE,KAAK,KADZ;AAEE,MAAA,WAAW,EAAE,KAAK,WAFpB;AAGE,MAAA,YAAY,EAAE,KAAK,YAHrB;AAIE,MAAA,OAAO,EAAE,KAAK,OAJhB;AAKE,MAAA,YAAY,EAAE,KAAK,UALrB;AAME,MAAA,SAAS,EAAE,KAAK,SANlB;AAOE,MAAA,OAAO,EAAE,KAAK,OAPhB;AAQE,MAAA,gBAAgB,EAAE,KAAK,gBARzB;AASE,MAAA,SAAS,EAAE,KAAK,SATlB;AAUE,MAAA,SAAS,EAAE,KAAK,SAVlB;AAWE,MAAA,GAAG,EAAE,CAAC,MAAM,IAAI;AAAE,QAAA,GAAG,EAAE;AAAP,OAAX,EAA+B,GAXtC;AAYE,MAAA,KAAK,EAAE,MAAM,CAAC,OAZhB;AAaE,MAAA,IAAI,EAAE,MAAM,CAAC,SAbf;AAcE,MAAA,QAAQ,EAAE,MAAM,CAAC,UAdnB;AAeE,MAAA,QAAQ,EAAE,iBAfZ;AAgBE,MAAA,KAAK,EAAE,UAhBT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAoBD;;AAjG2E","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport ExponentAV from './ExponentAV';\n\nimport { PlaybackNativeSource, PlaybackStatus, PlaybackStatusToSet } from './AV';\n\ntype ExponentVideoProps = {\n  source: PlaybackNativeSource | null;\n  resizeMode?: Object;\n  status?: PlaybackStatusToSet;\n  useNativeControls?: boolean;\n  onStatusUpdate?: (event: { nativeEvent: PlaybackStatus }) => void;\n  onReadyForDisplay?: (event: { nativeEvent: Object }) => void;\n  onFullscreenUpdate?: (event: { nativeEvent: Object }) => void;\n  onLoadStart: () => void;\n  onLoad: (event: { nativeEvent: PlaybackStatus }) => void;\n  onError: (event: { nativeEvent: { error: string } }) => void;\n  // Required by react-native\n  scaleX?: number;\n  scaleY?: number;\n  translateX?: number;\n  translateY?: number;\n  rotation?: number;\n} & React.ComponentProps<typeof View>;\n\nexport type NaturalSize = {\n  width: number;\n  height: number;\n  orientation: 'portrait' | 'landscape';\n};\n\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;\n\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\nexport default class ExponentVideo extends React.Component<ExponentVideoProps> {\n  _video?: HTMLVideoElement;\n\n  onStatusUpdate = async () => {\n    if (!this.props.onStatusUpdate) {\n      return;\n    }\n    const nativeEvent = await ExponentAV.getStatusForVideo(this._video);\n    this.props.onStatusUpdate({ nativeEvent });\n  };\n\n  onLoadStart = () => {\n    if (!this.props.onLoadStart) {\n      return;\n    }\n    this.props.onLoadStart();\n    this.onStatusUpdate();\n  };\n\n  onLoadedData = event => {\n    if (!this.props.onLoad) {\n      return;\n    }\n    this.props.onLoad(event);\n    this.onStatusUpdate();\n  };\n\n  onError = event => {\n    if (!this.props.onError) {\n      return;\n    }\n    this.props.onError(event);\n    this.onStatusUpdate();\n  };\n\n  onProgress = () => {\n    this.onStatusUpdate();\n  };\n\n  onSeeking = () => {\n    this.onStatusUpdate();\n  };\n\n  onEnded = () => {\n    this.onStatusUpdate();\n  };\n\n  onLoadedMetadata = () => {\n    this.onStatusUpdate();\n  };\n\n  onCanPlay = event => {\n    if (!this.props.onReadyForDisplay) {\n      return;\n    }\n    this.props.onReadyForDisplay(event);\n    this.onStatusUpdate();\n  };\n\n  onStalled = () => {\n    this.onStatusUpdate();\n  };\n\n  onRef = (ref: HTMLVideoElement) => {\n    this._video = ref;\n    this.onStatusUpdate();\n  };\n\n  render() {\n    const { source, status = {}, resizeMode: objectFit, useNativeControls, style } = this.props;\n\n    const customStyle = {\n      position: undefined,\n      objectFit,\n      overflow: 'hidden',\n    } as any;\n    const finalStyle = StyleSheet.flatten([style, customStyle]) as React.CSSProperties;\n    return (\n      <video\n        ref={this.onRef}\n        onLoadStart={this.onLoadStart}\n        onLoadedData={this.onLoadedData}\n        onError={this.onError}\n        onTimeUpdate={this.onProgress}\n        onSeeking={this.onSeeking}\n        onEnded={this.onEnded}\n        onLoadedMetadata={this.onLoadedMetadata}\n        onCanPlay={this.onCanPlay}\n        onStalled={this.onStalled}\n        src={(source || { uri: undefined }).uri}\n        muted={status.isMuted}\n        loop={status.isLooping}\n        autoPlay={status.shouldPlay}\n        controls={useNativeControls}\n        style={finalStyle}\n      />\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}