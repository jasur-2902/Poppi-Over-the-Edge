{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { Asset } from 'expo-asset';\nimport isReactImageFormat from \"./isReactImageFormat\";\nimport fromUriAsync from \"./fromUriAsync\";\n\nvar resolveAsync = function () {\n  var _ref = _asyncToGenerator(function* (fileReference) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (fileReference instanceof Asset) {\n      if (!fileReference.localUri) {\n        yield fileReference.downloadAsync();\n      }\n\n      return fileReference;\n    } else if (typeof fileReference === 'string') {\n      var asset = yield fromUriAsync(fileReference, options.fileName);\n\n      if (asset) {\n        return yield resolveAsync(asset);\n      }\n    } else if (typeof fileReference === 'number') {\n      var _asset = yield Asset.fromModule(fileReference);\n\n      var output = yield resolveAsync(_asset);\n      return output;\n    } else if (isReactImageFormat(fileReference)) {\n      var _asset2 = yield fromUriAsync(fileReference.uri, options.fileName);\n\n      if (_asset2) {\n        return yield resolveAsync(_asset2);\n      }\n    }\n  });\n\n  return function resolveAsync(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default resolveAsync;","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/expo-asset-utils/src/resolveAsync.js"],"names":["Asset","isReactImageFormat","fromUriAsync","resolveAsync","fileReference","options","localUri","downloadAsync","asset","fileName","fromModule","output","uri"],"mappings":";;;;AACA,SAASA,KAAT,QAAsB,YAAtB;AACA,OAAOC,kBAAP;AACA,OAAOC,YAAP;;AAcA,IAAMC,YAAY;AAAA,+BAAG,WAAOC,aAAP,EAA2E;AAAA,QAA3CC,OAA2C,uEAAxB,EAAwB;;AAC9F,QAAID,aAAa,YAAYJ,KAA7B,EAAoC;AAElC,UAAI,CAACI,aAAa,CAACE,QAAnB,EAA6B;AAC3B,cAAMF,aAAa,CAACG,aAAd,EAAN;AACD;;AACD,aAAOH,aAAP;AACD,KAND,MAMO,IAAI,OAAOA,aAAP,KAAyB,QAA7B,EAAuC;AAE5C,UAAMI,KAAK,SAASN,YAAY,CAACE,aAAD,EAAgBC,OAAO,CAACI,QAAxB,CAAhC;;AACA,UAAID,KAAJ,EAAW;AACT,qBAAaL,YAAY,CAACK,KAAD,CAAzB;AACD;AACF,KANM,MAMA,IAAI,OAAOJ,aAAP,KAAyB,QAA7B,EAAuC;AAE5C,UAAMI,MAAK,SAASR,KAAK,CAACU,UAAN,CAAiBN,aAAjB,CAApB;;AACA,UAAMO,MAAM,SAASR,YAAY,CAACK,MAAD,CAAjC;AACA,aAAOG,MAAP;AACD,KALM,MAKA,IAAIV,kBAAkB,CAACG,aAAD,CAAtB,EAAuC;AAE5C,UAAMI,OAAK,SAASN,YAAY,CAACE,aAAa,CAACQ,GAAf,EAAoBP,OAAO,CAACI,QAA5B,CAAhC;;AACA,UAAID,OAAJ,EAAW;AACT,qBAAaL,YAAY,CAACK,OAAD,CAAzB;AACD;AACF;AACF,GAzBiB;;AAAA,kBAAZL,YAAY;AAAA;AAAA;AAAA,GAAlB;;AA2BA,eAAeA,YAAf","sourcesContent":["// @flow\nimport { Asset } from 'expo-asset';\nimport isReactImageFormat from './isReactImageFormat';\nimport fromUriAsync from './fromUriAsync';\n\ntype ImageFormat = {\n  uri: string,\n  width?: number,\n  height?: number,\n};\n\nexport type WildCard = Asset | number | string | ImageFormat;\n\nexport type Options = {\n  fileName: string,\n};\n\nconst resolveAsync = async (fileReference: WildCard, options: Options = {}): Promise<?Asset> => {\n  if (fileReference instanceof Asset) {\n    /// Asset\n    if (!fileReference.localUri) {\n      await fileReference.downloadAsync();\n    }\n    return fileReference;\n  } else if (typeof fileReference === 'string') {\n    /// uri\n    const asset = await fromUriAsync(fileReference, options.fileName);\n    if (asset) {\n      return await resolveAsync(asset);\n    }\n  } else if (typeof fileReference === 'number') {\n    /// static resource\n    const asset = await Asset.fromModule(fileReference);\n    const output = await resolveAsync(asset);\n    return output;\n  } else if (isReactImageFormat(fileReference)) {\n    /// { uri: string }\n    const asset = await fromUriAsync(fileReference.uri, options.fileName);\n    if (asset) {\n      return await resolveAsync(asset);\n    }\n  }\n};\n\nexport default resolveAsync;\n"]},"metadata":{},"sourceType":"module"}