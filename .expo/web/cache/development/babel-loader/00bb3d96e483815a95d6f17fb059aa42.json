{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jshukurov\\\\Desktop\\\\Poppi Over The Edge\\\\Poppi-Over-the-Edge-master\\\\node_modules\\\\@expo\\\\vector-icons\\\\build\\\\vendor\\\\react-native-vector-icons\\\\lib\\\\create-icon-set.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ensureNativeModuleAvailable from \"./ensure-native-module-available\";\nimport createIconButtonComponent from \"./icon-button\";\nimport createTabBarItemIOSComponent from \"./tab-bar-item-ios\";\nimport createToolbarAndroidComponent from \"./toolbar-android\";\nexport var NativeIconAPI = NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\nexport var DEFAULT_ICON_SIZE = 12;\nexport var DEFAULT_ICON_COLOR = 'black';\nexport default function createIconSet(glyphMap, fontFamily, fontFile, fontStyle) {\n  var fontBasename = fontFile ? fontFile.replace(/\\.(otf|ttf)$/, '') : fontFamily;\n  var fontReference = Platform.select({\n    windows: \"Assets/\".concat(fontFile, \"#\").concat(fontFamily),\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily\n  });\n  var IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  class Icon extends PureComponent {\n    constructor() {\n      super(...arguments);\n      this.root = null;\n\n      this.handleRef = ref => {\n        this.root = ref;\n      };\n    }\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    render() {\n      var _this$props = this.props,\n          {\n        name,\n        size,\n        color,\n        style,\n        children\n      } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"name\", \"size\", \"color\", \"style\", \"children\"]);\n\n      var glyph = name ? glyphMap[name] || '?' : '';\n\n      if (typeof glyph === 'number') {\n        glyph = String.fromCharCode(glyph);\n      }\n\n      var styleDefaults = {\n        fontSize: size,\n        color\n      };\n      var styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal'\n      };\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n      props.ref = this.handleRef;\n      return React.createElement(Text, _extends({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }\n      }), glyph, children);\n    }\n\n  }\n\n  Icon.propTypes = {\n    allowFontScaling: PropTypes.bool,\n    name: IconNamePropType,\n    size: PropTypes.number,\n    color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    children: PropTypes.node,\n    style: PropTypes.any\n  };\n  Icon.defaultProps = {\n    size: DEFAULT_ICON_SIZE,\n    allowFontScaling: false\n  };\n  var imageSourceCache = {};\n\n  function getImageSource(name) {\n    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;\n    var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;\n    ensureNativeModuleAvailable();\n    var glyph = glyphMap[name] || '?';\n\n    if (typeof glyph === 'number') {\n      glyph = String.fromCharCode(glyph);\n    }\n\n    var processedColor = processColor(color);\n    var cacheKey = \"\".concat(glyph, \":\").concat(size, \":\").concat(processedColor);\n    var scale = PixelRatio.get();\n    return new Promise((resolve, reject) => {\n      var cached = imageSourceCache[cacheKey];\n\n      if (typeof cached !== 'undefined') {\n        if (!cached || cached instanceof Error) {\n          reject(cached);\n        } else {\n          resolve({\n            uri: cached,\n            scale\n          });\n        }\n      } else {\n        NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor, (err, image) => {\n          var error = typeof err === 'string' ? new Error(err) : err;\n          imageSourceCache[cacheKey] = image || error || false;\n\n          if (!error && image) {\n            resolve({\n              uri: image,\n              scale\n            });\n          } else {\n            reject(error);\n          }\n        });\n      }\n    });\n  }\n\n  function loadFont() {\n    var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : fontFile;\n\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n\n      if (!file) {\n        return Promise.reject(new Error('Unable to load font, because no file was specified. '));\n      }\n\n      return NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n\n    return Promise.resolve();\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.TabBarItem = createTabBarItemIOSComponent(IconNamePropType, getImageSource);\n  Icon.TabBarItemIOS = Icon.TabBarItem;\n  Icon.ToolbarAndroid = createToolbarAndroidComponent(IconNamePropType, getImageSource);\n  Icon.getImageSource = getImageSource;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n  return Icon;\n}","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/lib/create-icon-set.js"],"names":["React","PureComponent","PropTypes","ensureNativeModuleAvailable","createIconButtonComponent","createTabBarItemIOSComponent","createToolbarAndroidComponent","NativeIconAPI","NativeModules","RNVectorIconsManager","RNVectorIconsModule","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","createIconSet","glyphMap","fontFamily","fontFile","fontStyle","fontBasename","replace","fontReference","Platform","select","windows","android","web","default","IconNamePropType","oneOf","Object","keys","Icon","root","handleRef","ref","setNativeProps","nativeProps","render","props","name","size","color","style","children","glyph","String","fromCharCode","styleDefaults","fontSize","styleOverrides","fontWeight","propTypes","allowFontScaling","bool","number","oneOfType","string","node","any","defaultProps","imageSourceCache","getImageSource","processedColor","processColor","cacheKey","scale","PixelRatio","get","Promise","resolve","reject","cached","Error","uri","getImageForFont","err","image","error","loadFont","file","OS","loadFontWithFileName","split","hasIcon","prototype","hasOwnProperty","call","getRawGlyphMap","getFontFamily","Button","TabBarItem","TabBarItemIOS","ToolbarAndroid"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { NativeModules, Platform, PixelRatio, processColor, Text } from 'react-native';\n\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconButtonComponent from './icon-button';\nimport createTabBarItemIOSComponent from './tab-bar-item-ios';\nimport createToolbarAndroidComponent from './toolbar-android';\n\nexport const NativeIconAPI =\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(\n  glyphMap,\n  fontFamily,\n  fontFile,\n  fontStyle\n) {\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  const fontBasename = fontFile\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\n    : fontFamily;\n\n  const fontReference = Platform.select({\n    windows: `Assets/${fontFile}#${fontFamily}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily,\n  });\n\n  const IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  class Icon extends PureComponent {\n    static propTypes = {\n      allowFontScaling: PropTypes.bool,\n      name: IconNamePropType,\n      size: PropTypes.number,\n      color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      children: PropTypes.node,\n      style: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n    };\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    root = null;\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    handleRef = ref => {\n      this.root = ref;\n    };\n\n    render() {\n      const { name, size, color, style, children, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCharCode(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n      props.ref = this.handleRef;\n\n      return (\n        <Text {...props}>\n          {glyph}\n          {children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = {};\n\n  function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    let glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      glyph = String.fromCharCode(glyph);\n    }\n\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n    const scale = PixelRatio.get();\n\n    return new Promise((resolve, reject) => {\n      const cached = imageSourceCache[cacheKey];\n      if (typeof cached !== 'undefined') {\n        if (!cached || cached instanceof Error) {\n          reject(cached);\n        } else {\n          resolve({ uri: cached, scale });\n        }\n      } else {\n        NativeIconAPI.getImageForFont(\n          fontReference,\n          glyph,\n          size,\n          processedColor,\n          (err, image) => {\n            const error = typeof err === 'string' ? new Error(err) : err;\n            imageSourceCache[cacheKey] = image || error || false;\n            if (!error && image) {\n              resolve({ uri: image, scale });\n            } else {\n              reject(error);\n            }\n          }\n        );\n      }\n    });\n  }\n\n  function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        return Promise.reject(\n          new Error('Unable to load font, because no file was specified. ')\n        );\n      }\n      return NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n    return Promise.resolve();\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.TabBarItem = createTabBarItemIOSComponent(\n    IconNamePropType,\n    getImageSource\n  );\n  Icon.TabBarItemIOS = Icon.TabBarItem;\n  Icon.ToolbarAndroid = createToolbarAndroidComponent(\n    IconNamePropType,\n    getImageSource\n  );\n  Icon.getImageSource = getImageSource;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}\n"]},"metadata":{},"sourceType":"module"}