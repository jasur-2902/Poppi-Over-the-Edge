{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport uuidv4 from 'uuid/v4';\nimport { MediaTypeOptions } from \"./ImagePicker.types\";\nvar MediaTypeInput = {\n  [MediaTypeOptions.All]: 'video/*,image/*',\n  [MediaTypeOptions.Images]: 'image/*',\n  [MediaTypeOptions.Videos]: 'video/*'\n};\nexport default {\n  get name() {\n    return 'ExponentImagePicker';\n  },\n\n  launchImageLibraryAsync(_ref) {\n    return _asyncToGenerator(function* () {\n      var {\n        mediaTypes = MediaTypeOptions.All,\n        allowsMultipleSelection = false\n      } = _ref;\n      return yield openFileBrowserAsync({\n        mediaTypes,\n        allowsMultipleSelection\n      });\n    })();\n  },\n\n  launchCameraAsync(_ref2) {\n    return _asyncToGenerator(function* () {\n      var {\n        mediaTypes = MediaTypeOptions.All,\n        allowsMultipleSelection = false\n      } = _ref2;\n      return yield openFileBrowserAsync({\n        mediaTypes,\n        allowsMultipleSelection,\n        capture: true\n      });\n    })();\n  }\n\n};\n\nfunction openFileBrowserAsync(_ref3) {\n  var {\n    mediaTypes,\n    capture = false,\n    allowsMultipleSelection = false\n  } = _ref3;\n  var mediaTypeFormat = MediaTypeInput[mediaTypes];\n  var input = document.createElement('input');\n  input.style.display = 'none';\n  input.setAttribute('type', 'file');\n  input.setAttribute('accept', mediaTypeFormat);\n  input.setAttribute('id', uuidv4());\n\n  if (allowsMultipleSelection) {\n    input.setAttribute('multiple', 'multiple');\n  }\n\n  if (capture) {\n    input.setAttribute('capture', 'camera');\n  }\n\n  document.body.appendChild(input);\n  return new Promise((resolve, reject) => {\n    input.addEventListener('change', () => {\n      if (input.files) {\n        var targetFile = input.files[0];\n        var reader = new FileReader();\n\n        reader.onerror = () => {\n          reject('Failed to read the selected media because the operation failed.');\n        };\n\n        reader.onload = (_ref4) => {\n          var {\n            target\n          } = _ref4;\n          var uri = target.result;\n          resolve({\n            cancelled: false,\n            uri,\n            width: 0,\n            height: 0\n          });\n        };\n\n        reader.readAsDataURL(targetFile);\n      } else {\n        resolve({\n          cancelled: true\n        });\n      }\n\n      document.body.removeChild(input);\n    });\n    var event = new MouseEvent('click');\n    input.dispatchEvent(event);\n  });\n}","map":{"version":3,"sources":["../src/ImagePicker/ExponentImagePicker.web.ts"],"names":[],"mappings":"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","sourcesContent":["import uuidv4 from 'uuid/v4';\n\nimport {\n  ImagePickerResult,\n  MediaTypeOptions,\n  OpenFileBrowserOptions,\n  ImagePickerOptions,\n} from './ImagePicker.types';\n\nconst MediaTypeInput = {\n  [MediaTypeOptions.All]: 'video/*,image/*',\n  [MediaTypeOptions.Images]: 'image/*',\n  [MediaTypeOptions.Videos]: 'video/*',\n};\n\nexport default {\n  get name(): string {\n    return 'ExponentImagePicker';\n  },\n  async launchImageLibraryAsync({\n    mediaTypes = MediaTypeOptions.All,\n    allowsMultipleSelection = false,\n  }: ImagePickerOptions): Promise<ImagePickerResult> {\n    return await openFileBrowserAsync({\n      mediaTypes,\n      allowsMultipleSelection,\n    });\n  },\n  async launchCameraAsync({\n    mediaTypes = MediaTypeOptions.All,\n    allowsMultipleSelection = false,\n  }: ImagePickerOptions): Promise<ImagePickerResult> {\n    return await openFileBrowserAsync({\n      mediaTypes,\n      allowsMultipleSelection,\n      capture: true,\n    });\n  },\n};\n\nfunction openFileBrowserAsync({\n  mediaTypes,\n  capture = false,\n  allowsMultipleSelection = false,\n}: OpenFileBrowserOptions): Promise<ImagePickerResult> {\n  const mediaTypeFormat = MediaTypeInput[mediaTypes];\n\n  const input = document.createElement('input');\n  input.style.display = 'none';\n  input.setAttribute('type', 'file');\n  input.setAttribute('accept', mediaTypeFormat);\n  input.setAttribute('id', uuidv4());\n  if (allowsMultipleSelection) {\n    input.setAttribute('multiple', 'multiple');\n  }\n  if (capture) {\n    input.setAttribute('capture', 'camera');\n  }\n  document.body.appendChild(input);\n\n  return new Promise((resolve, reject) => {\n    input.addEventListener('change', () => {\n      if (input.files) {\n        const targetFile = input.files[0];\n        const reader = new FileReader();\n        reader.onerror = () => {\n          reject('Failed to read the selected media because the operation failed.');\n        };\n        reader.onload = ({ target }) => {\n          const uri = (target as any).result;\n          resolve({\n            cancelled: false,\n            uri,\n            width: 0,\n            height: 0,\n          });\n        };\n        // Read in the image file as a binary string.\n        reader.readAsDataURL(targetFile);\n      } else {\n        resolve({ cancelled: true });\n      }\n\n      document.body.removeChild(input);\n    });\n\n    const event = new MouseEvent('click');\n    input.dispatchEvent(event);\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}