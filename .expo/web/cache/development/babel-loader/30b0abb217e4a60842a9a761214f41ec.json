{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport Constants from 'expo-constants';\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ExponentStoreReview from \"./ExponentStoreReview\";\nexport function isSupported() {\n  return ExponentStoreReview && ExponentStoreReview.isSupported;\n}\nexport function requestReview() {\n  return _requestReview.apply(this, arguments);\n}\n\nfunction _requestReview() {\n  _requestReview = _asyncToGenerator(function* () {\n    if (ExponentStoreReview && ExponentStoreReview.requestReview) {\n      ExponentStoreReview.requestReview();\n    } else {\n      var url = storeUrl();\n\n      if (url) {\n        var supported = yield Linking.canOpenURL(url);\n\n        if (!supported) {\n          console.log(\"Expo.StoreReview.requestReview(): Can't open store url: \", url);\n        } else {\n          return Linking.openURL(url);\n        }\n      } else {\n        console.log(\"Expo.StoreReview.requestReview(): Couldn't link to store, please make sure the `android.playStoreUrl` & `ios.appStoreUrl` fields are filled out in your `app.json`\");\n      }\n    }\n  });\n  return _requestReview.apply(this, arguments);\n}\n\nexport function storeUrl() {\n  var {\n    OS\n  } = Platform;\n\n  if (OS === 'ios') {\n    return Constants.manifest.ios.appStoreUrl;\n  } else if (OS === 'android') {\n    return Constants.manifest.android.playStoreUrl;\n  }\n\n  throw new Error(\"StoreReview.storeUrl() is not supported on \".concat(OS));\n}\nexport function hasAction() {\n  return !!storeUrl() || isSupported();\n}","map":{"version":3,"sources":["../../src/StoreReview/StoreReview.ts"],"names":[],"mappings":";;;;AAAA,OAAO,SAAP,MAAsB,gBAAtB;;;AAGA,OAAO,mBAAP;AAOA,OAAM,SAAU,WAAV,GAAqB;AACzB,SAAO,mBAAmB,IAAI,mBAAmB,CAAC,WAAlD;AACD;AAKD,gBAAsB,aAAtB;AAAA;AAAA;;;qCAAO,aAA4B;AACjC,QAAI,mBAAmB,IAAI,mBAAmB,CAAC,aAA/C,EAA8D;AAC5D,MAAA,mBAAmB,CAAC,aAApB;AACD,KAFD,MAEO;AAIL,UAAM,GAAG,GAAG,QAAQ,EAApB;;AACA,UAAI,GAAJ,EAAS;AACP,YAAM,SAAS,SAAS,OAAO,CAAC,UAAR,CAAmB,GAAnB,CAAxB;;AACA,YAAI,CAAC,SAAL,EAAgB;AACd,UAAA,OAAO,CAAC,GAAR,CAAY,0DAAZ,EAAwE,GAAxE;AACD,SAFD,MAEO;AACL,iBAAO,OAAO,CAAC,OAAR,CAAgB,GAAhB,CAAP;AACD;AACF,OAPD,MAOO;AAEL,QAAA,OAAO,CAAC,GAAR,CACE,oKADF;AAGD;AACF;AACF,G;;;;AAOD,OAAM,SAAU,QAAV,GAAkB;AACtB,MAAM;AAAE,IAAA;AAAF,MAAS,QAAf;;AACA,MAAI,EAAE,KAAK,KAAX,EAAkB;AAChB,WAAO,SAAS,CAAC,QAAV,CAAmB,GAAnB,CAAuB,WAA9B;AACD,GAFD,MAEO,IAAI,EAAE,KAAK,SAAX,EAAsB;AAC3B,WAAO,SAAS,CAAC,QAAV,CAAmB,OAAnB,CAA2B,YAAlC;AACD;;AACD,QAAM,IAAI,KAAJ,sDAAwD,EAAxD,EAAN;AACD;AAKD,OAAM,SAAU,SAAV,GAAmB;AACvB,SAAO,CAAC,CAAC,QAAQ,EAAV,IAAgB,WAAW,EAAlC;AACD","sourcesContent":["import Constants from 'expo-constants';\nimport { Linking, Platform } from 'react-native';\n\nimport ExponentStoreReview from './ExponentStoreReview';\n\n/*\n * Platform must be iOS\n * iOS 10.3 or greater\n * `SKStoreReviewController` class is available\n */\nexport function isSupported() {\n  return ExponentStoreReview && ExponentStoreReview.isSupported;\n}\n\n/*\n * Use the iOS `SKStoreReviewController` API to prompt a user rating without leaving the app.\n */\nexport async function requestReview() {\n  if (ExponentStoreReview && ExponentStoreReview.requestReview) {\n    ExponentStoreReview.requestReview();\n  } else {\n    /*\n     * If StoreReview is unavailable then get the store URL from the `app.json` and open to the store.\n     */\n    const url = storeUrl();\n    if (url) {\n      const supported = await Linking.canOpenURL(url);\n      if (!supported) {\n        console.log(\"Expo.StoreReview.requestReview(): Can't open store url: \", url);\n      } else {\n        return Linking.openURL(url);\n      }\n    } else {\n      // If the store URL is missing, let the dev know.\n      console.log(\n        \"Expo.StoreReview.requestReview(): Couldn't link to store, please make sure the `android.playStoreUrl` & `ios.appStoreUrl` fields are filled out in your `app.json`\"\n      );\n    }\n  }\n}\n\n/*\n * Get your app's store URLs from the `app.json`\n * iOS: https://docs.expo.io/versions/latest/workflow/configuration#appstoreurlurl-to-your-app-on-the-apple-app-store-if-you-have-deployed-it-there-this-is-used-to-link-to-your-store-page-from-your-expo-project-page-if-your-app-is-public\n * Android: https://docs.expo.io/versions/latest/workflow/configuration#playstoreurlurl-to-your-app-on-the-google-play-store-if-you-have-deployed-it-there-this-is-used-to-link-to-your-store-page-from-your-expo-project-page-if-your-app-is-public\n */\nexport function storeUrl() {\n  const { OS } = Platform;\n  if (OS === 'ios') {\n    return Constants.manifest.ios.appStoreUrl;\n  } else if (OS === 'android') {\n    return Constants.manifest.android.playStoreUrl;\n  }\n  throw new Error(`StoreReview.storeUrl() is not supported on ${OS}`);\n}\n\n/*\n * A flag to detect if this module can do anything\n */\nexport function hasAction() {\n  return !!storeUrl() || isSupported();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}