{"ast":null,"code":"export class CodedError extends Error {\n  constructor(code, message) {\n    super(message);\n    this.code = code;\n  }\n\n}\nexport class UnavailabilityError extends CodedError {\n  constructor(moduleName, propertyName) {\n    super('ERR_UNAVAILABLE', \"The method or property \".concat(moduleName, \".\").concat(propertyName, \" is not available on this platform, are you sure you've linked all the native dependencies properly?\"));\n  }\n\n}","map":{"version":3,"sources":["../src/Errors.ts"],"names":[],"mappings":"AAKA,OAAM,MAAO,UAAP,SAA0B,KAA1B,CAA+B;AAInC,EAAA,WAAA,CAAY,IAAZ,EAA0B,OAA1B,EAAyC;AACvC,UAAM,OAAN;AACA,SAAK,IAAL,GAAY,IAAZ;AACD;;AAPkC;AAerC,OAAM,MAAO,mBAAP,SAAmC,UAAnC,CAA6C;AACjD,EAAA,WAAA,CAAY,UAAZ,EAAgC,YAAhC,EAAoD;AAClD,UAAM,iBAAN,mCAAmD,UAAnD,cAAiE,YAAjE;AACD;;AAHgD","sourcesContent":["/**\n * A general error class that should be used for all errors in Expo modules.\n * Guarantees a `code` field that can be used to differentiate between different\n * types of errors without further subclassing Error.\n */\nexport class CodedError extends Error {\n  code: string;\n  info?: any;\n\n  constructor(code: string, message: string) {\n    super(message);\n    this.code = code;\n  }\n}\n\n/**\n * A class for errors to be thrown when a property is accessed which is\n * unavailable, unsupported, or not currently implemented on the running\n * platform.\n */\nexport class UnavailabilityError extends CodedError {\n  constructor(moduleName: string, propertyName: string) {\n    super('ERR_UNAVAILABLE', `The method or property ${moduleName}.${propertyName} is not available on this platform, are you sure you've linked all the native dependencies properly?`);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}