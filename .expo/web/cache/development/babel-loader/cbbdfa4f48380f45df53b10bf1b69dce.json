{"ast":null,"code":"import { Asset } from 'expo-asset';\nimport { loadAsync } from 'expo-font';\nimport { prefetch } from \"./ImageUtils\";\nexport default function cacheAssetsAsync(_ref) {\n  var {\n    images = [],\n    files = [],\n    fonts = []\n  } = _ref;\n  return Promise.all([...cacheImages(images), ...raw(files), ...cacheFonts(fonts)]);\n}\n\nfunction raw(files) {\n  return files.map(file => Asset.fromModule(file).downloadAsync());\n}\n\nfunction cacheImages(images) {\n  return images.map(image => {\n    if (typeof image === 'string') {\n      return prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n}\n\nfunction cacheFonts(fonts) {\n  return fonts.map(font => loadAsync(font));\n}","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/expo-asset-utils/src/cacheAssetsAsync.js"],"names":["Asset","loadAsync","prefetch","cacheAssetsAsync","images","files","fonts","Promise","all","cacheImages","raw","cacheFonts","map","file","fromModule","downloadAsync","image","font"],"mappings":"AACA,SAASA,KAAT,QAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,QAAT;AAQA,eAAe,SAASC,gBAAT,OAIkB;AAAA,MAJQ;AACvCC,IAAAA,MAAM,GAAG,EAD8B;AAEvCC,IAAAA,KAAK,GAAG,EAF+B;AAGvCC,IAAAA,KAAK,GAAG;AAH+B,GAIR;AAC/B,SAAOC,OAAO,CAACC,GAAR,CAAY,CAAC,GAAGC,WAAW,CAACL,MAAD,CAAf,EAAyB,GAAGM,GAAG,CAACL,KAAD,CAA/B,EAAwC,GAAGM,UAAU,CAACL,KAAD,CAArD,CAAZ,CAAP;AACD;;AAED,SAASI,GAAT,CAAaL,KAAb,EAAmD;AACjD,SAAOA,KAAK,CAACO,GAAN,CAAUC,IAAI,IAAIb,KAAK,CAACc,UAAN,CAAiBD,IAAjB,EAAuBE,aAAvB,EAAlB,CAAP;AACD;;AAED,SAASN,WAAT,CAAqBL,MAArB,EAA+C;AAC7C,SAAOA,MAAM,CAACQ,GAAP,CAAWI,KAAK,IAAI;AACzB,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAOd,QAAQ,CAACc,KAAD,CAAf;AACD,KAFD,MAEO;AACL,aAAOhB,KAAK,CAACc,UAAN,CAAiBE,KAAjB,EAAwBD,aAAxB,EAAP;AACD;AACF,GANM,CAAP;AAOD;;AAED,SAASJ,UAAT,CAAoBL,KAApB,EAAkD;AAChD,SAAOA,KAAK,CAACM,GAAN,CAAUK,IAAI,IAAIhB,SAAS,CAACgB,IAAD,CAA3B,CAAP;AACD","sourcesContent":["// @flow\nimport { Asset } from 'expo-asset';\nimport { loadAsync } from 'expo-font';\nimport { prefetch } from './ImageUtils';\n\nexport type CacheOptions = {\n  images: Array,\n  files: Array,\n  fonts: Array,\n};\n\nexport default function cacheAssetsAsync({\n  images = [],\n  files = [],\n  fonts = [],\n}: CacheOptions): Promise<Array> {\n  return Promise.all([...cacheImages(images), ...raw(files), ...cacheFonts(fonts)]);\n}\n\nfunction raw(files: Array<number>): Array<Promise> {\n  return files.map(file => Asset.fromModule(file).downloadAsync());\n}\n\nfunction cacheImages(images: Array): Promise[] {\n  return images.map(image => {\n    if (typeof image === 'string') {\n      return prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n}\n\nfunction cacheFonts(fonts: Array): Array<Promise> {\n  return fonts.map(font => loadAsync(font));\n}\n"]},"metadata":{},"sourceType":"module"}