{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jshukurov\\\\Desktop\\\\Poppi Over The Edge\\\\Poppi-Over-the-Edge-master\\\\node_modules\\\\react-native-maps\\\\lib\\\\components\\\\MapMarker.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ColorPropType from \"react-native-web/dist/exports/ColorPropType\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport View from \"react-native-web/dist/exports/View\";\nimport resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';\nimport decorateMapComponent, { SUPPORTED, USES_DEFAULT_IMPLEMENTATION } from \"./decorateMapComponent\";\nvar viewConfig = {\n  uiViewClassName: 'AIR<provider>MapMarker',\n  validAttributes: {\n    coordinate: true\n  }\n};\nvar viewPropTypes = ViewPropTypes || View.propTypes;\n\nvar propTypes = _objectSpread(_objectSpread({}, viewPropTypes), {}, {\n  identifier: PropTypes.string,\n  reuseIdentifier: PropTypes.string,\n  title: PropTypes.string,\n  description: PropTypes.string,\n  image: PropTypes.any,\n  opacity: PropTypes.number,\n  pinColor: ColorPropType,\n  coordinate: PropTypes.shape({\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired\n  }).isRequired,\n  centerOffset: PropTypes.shape({\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired\n  }),\n  calloutOffset: PropTypes.shape({\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired\n  }),\n  anchor: PropTypes.shape({\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired\n  }),\n  calloutAnchor: PropTypes.shape({\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired\n  }),\n  flat: PropTypes.bool,\n  draggable: PropTypes.bool,\n  tracksViewChanges: PropTypes.bool,\n  tracksInfoWindowChanges: PropTypes.bool,\n  stopPropagation: PropTypes.bool,\n  onPress: PropTypes.func,\n  onSelect: PropTypes.func,\n  onDeselect: PropTypes.func,\n  onCalloutPress: PropTypes.func,\n  onDragStart: PropTypes.func,\n  onDrag: PropTypes.func,\n  onDragEnd: PropTypes.func\n});\n\nvar defaultProps = {\n  stopPropagation: false\n};\n\nclass MapMarker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.showCallout = this.showCallout.bind(this);\n    this.hideCallout = this.hideCallout.bind(this);\n    this.animateMarkerToCoordinate = this.animateMarkerToCoordinate.bind(this);\n  }\n\n  setNativeProps(props) {\n    this.marker.setNativeProps(props);\n  }\n\n  showCallout() {\n    this._runCommand('showCallout', []);\n  }\n\n  hideCallout() {\n    this._runCommand('hideCallout', []);\n  }\n\n  animateMarkerToCoordinate(coordinate, duration) {\n    this._runCommand('animateMarkerToCoordinate', [coordinate, duration || 500]);\n  }\n\n  redraw() {\n    this._runCommand('redraw', []);\n  }\n\n  _getHandle() {\n    return findNodeHandle(this.marker);\n  }\n\n  _runCommand(name, args) {\n    switch (Platform.OS) {\n      case 'android':\n        NativeModules.UIManager.dispatchViewManagerCommand(this._getHandle(), this.getUIManagerCommand(name), args);\n        break;\n\n      case 'ios':\n        this.getMapManagerCommand(name)(this._getHandle(), ...args);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  render() {\n    var image;\n\n    if (this.props.image) {\n      image = resolveAssetSource(this.props.image) || {};\n      image = image.uri || this.props.image;\n    }\n\n    var AIRMapMarker = this.getAirComponent();\n    return React.createElement(AIRMapMarker, _extends({\n      ref: _ref => {\n        this.marker = _ref;\n      }\n    }, this.props, {\n      image: image,\n      style: [styles.marker, this.props.style],\n      onPress: event => {\n        if (this.props.stopPropagation) {\n          event.stopPropagation();\n        }\n\n        if (this.props.onPress) {\n          this.props.onPress(event);\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\nMapMarker.propTypes = propTypes;\nMapMarker.defaultProps = defaultProps;\nMapMarker.viewConfig = viewConfig;\nvar styles = StyleSheet.create({\n  marker: {\n    position: 'absolute',\n    backgroundColor: 'transparent'\n  }\n});\nMapMarker.Animated = Animated.createAnimatedComponent(MapMarker);\nexport default decorateMapComponent(MapMarker, {\n  componentType: 'Marker',\n  providers: {\n    google: {\n      ios: SUPPORTED,\n      android: USES_DEFAULT_IMPLEMENTATION\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/react-native-maps/lib/components/MapMarker.js"],"names":["PropTypes","React","resolveAssetSource","decorateMapComponent","SUPPORTED","USES_DEFAULT_IMPLEMENTATION","viewConfig","uiViewClassName","validAttributes","coordinate","viewPropTypes","ViewPropTypes","View","propTypes","identifier","string","reuseIdentifier","title","description","image","any","opacity","number","pinColor","ColorPropType","shape","latitude","isRequired","longitude","centerOffset","x","y","calloutOffset","anchor","calloutAnchor","flat","bool","draggable","tracksViewChanges","tracksInfoWindowChanges","stopPropagation","onPress","func","onSelect","onDeselect","onCalloutPress","onDragStart","onDrag","onDragEnd","defaultProps","MapMarker","Component","constructor","props","showCallout","bind","hideCallout","animateMarkerToCoordinate","setNativeProps","marker","_runCommand","duration","redraw","_getHandle","findNodeHandle","name","args","Platform","OS","NativeModules","UIManager","dispatchViewManagerCommand","getUIManagerCommand","getMapManagerCommand","render","uri","AIRMapMarker","getAirComponent","ref","styles","style","event","StyleSheet","create","position","backgroundColor","Animated","createAnimatedComponent","componentType","providers","google","ios","android"],"mappings":";;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;;;;;;AAYA,OAAOC,kBAAP,MAA+B,iDAA/B;AACA,OAAOC,oBAAP,IACEC,SADF,EAEEC,2BAFF;AAKA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,eAAe,EAAE,wBADA;AAEjBC,EAAAA,eAAe,EAAE;AACfC,IAAAA,UAAU,EAAE;AADG;AAFA,CAAnB;AAQA,IAAMC,aAAa,GAAGC,aAAa,IAAIC,IAAI,CAACC,SAA5C;;AAEA,IAAMA,SAAS,mCACVH,aADU;AAIbI,EAAAA,UAAU,EAAEd,SAAS,CAACe,MAJT;AAKbC,EAAAA,eAAe,EAAEhB,SAAS,CAACe,MALd;AAYbE,EAAAA,KAAK,EAAEjB,SAAS,CAACe,MAZJ;AAmBbG,EAAAA,WAAW,EAAElB,SAAS,CAACe,MAnBV;AAyBbI,EAAAA,KAAK,EAAEnB,SAAS,CAACoB,GAzBJ;AA8BbC,EAAAA,OAAO,EAAErB,SAAS,CAACsB,MA9BN;AAoCbC,EAAAA,QAAQ,EAAEC,aApCG;AAyCbf,EAAAA,UAAU,EAAET,SAAS,CAACyB,KAAV,CAAgB;AAI1BC,IAAAA,QAAQ,EAAE1B,SAAS,CAACsB,MAAV,CAAiBK,UAJD;AAK1BC,IAAAA,SAAS,EAAE5B,SAAS,CAACsB,MAAV,CAAiBK;AALF,GAAhB,EAMTA,UA/CU;AA6DbE,EAAAA,YAAY,EAAE7B,SAAS,CAACyB,KAAV,CAAgB;AAI5BK,IAAAA,CAAC,EAAE9B,SAAS,CAACsB,MAAV,CAAiBK,UAJQ;AAK5BI,IAAAA,CAAC,EAAE/B,SAAS,CAACsB,MAAV,CAAiBK;AALQ,GAAhB,CA7DD;AAkFbK,EAAAA,aAAa,EAAEhC,SAAS,CAACyB,KAAV,CAAgB;AAI7BK,IAAAA,CAAC,EAAE9B,SAAS,CAACsB,MAAV,CAAiBK,UAJS;AAK7BI,IAAAA,CAAC,EAAE/B,SAAS,CAACsB,MAAV,CAAiBK;AALS,GAAhB,CAlFF;AA0GbM,EAAAA,MAAM,EAAEjC,SAAS,CAACyB,KAAV,CAAgB;AAItBK,IAAAA,CAAC,EAAE9B,SAAS,CAACsB,MAAV,CAAiBK,UAJE;AAKtBI,IAAAA,CAAC,EAAE/B,SAAS,CAACsB,MAAV,CAAiBK;AALE,GAAhB,CA1GK;AA6HbO,EAAAA,aAAa,EAAElC,SAAS,CAACyB,KAAV,CAAgB;AAI7BK,IAAAA,CAAC,EAAE9B,SAAS,CAACsB,MAAV,CAAiBK,UAJS;AAK7BI,IAAAA,CAAC,EAAE/B,SAAS,CAACsB,MAAV,CAAiBK;AALS,GAAhB,CA7HF;AA2IbQ,EAAAA,IAAI,EAAEnC,SAAS,CAACoC,IA3IH;AA6IbC,EAAAA,SAAS,EAAErC,SAAS,CAACoC,IA7IR;AAmJbE,EAAAA,iBAAiB,EAAEtC,SAAS,CAACoC,IAnJhB;AA2JbG,EAAAA,uBAAuB,EAAEvC,SAAS,CAACoC,IA3JtB;AAmKbI,EAAAA,eAAe,EAAExC,SAAS,CAACoC,IAnKd;AAwKbK,EAAAA,OAAO,EAAEzC,SAAS,CAAC0C,IAxKN;AA+KbC,EAAAA,QAAQ,EAAE3C,SAAS,CAAC0C,IA/KP;AAsLbE,EAAAA,UAAU,EAAE5C,SAAS,CAAC0C,IAtLT;AA2LbG,EAAAA,cAAc,EAAE7C,SAAS,CAAC0C,IA3Lb;AAgMbI,EAAAA,WAAW,EAAE9C,SAAS,CAAC0C,IAhMV;AAqMbK,EAAAA,MAAM,EAAE/C,SAAS,CAAC0C,IArML;AA2MbM,EAAAA,SAAS,EAAEhD,SAAS,CAAC0C;AA3MR,EAAf;;AA8MA,IAAMO,YAAY,GAAG;AACnBT,EAAAA,eAAe,EAAE;AADE,CAArB;;AAIA,MAAMU,SAAN,SAAwBjD,KAAK,CAACkD,SAA9B,CAAwC;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKE,yBAAL,GAAiC,KAAKA,yBAAL,CAA+BF,IAA/B,CAAoC,IAApC,CAAjC;AACD;;AAEDG,EAAAA,cAAc,CAACL,KAAD,EAAQ;AACpB,SAAKM,MAAL,CAAYD,cAAZ,CAA2BL,KAA3B;AACD;;AAEDC,EAAAA,WAAW,GAAG;AACZ,SAAKM,WAAL,CAAiB,aAAjB,EAAgC,EAAhC;AACD;;AAEDJ,EAAAA,WAAW,GAAG;AACZ,SAAKI,WAAL,CAAiB,aAAjB,EAAgC,EAAhC;AACD;;AAEDH,EAAAA,yBAAyB,CAAChD,UAAD,EAAaoD,QAAb,EAAuB;AAC9C,SAAKD,WAAL,CAAiB,2BAAjB,EAA8C,CAACnD,UAAD,EAAaoD,QAAQ,IAAI,GAAzB,CAA9C;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,SAAKF,WAAL,CAAiB,QAAjB,EAA2B,EAA3B;AACD;;AAEDG,EAAAA,UAAU,GAAG;AACX,WAAOC,cAAc,CAAC,KAAKL,MAAN,CAArB;AACD;;AAEDC,EAAAA,WAAW,CAACK,IAAD,EAAOC,IAAP,EAAa;AACtB,YAAQC,QAAQ,CAACC,EAAjB;AACE,WAAK,SAAL;AACEC,QAAAA,aAAa,CAACC,SAAd,CAAwBC,0BAAxB,CACE,KAAKR,UAAL,EADF,EAEE,KAAKS,mBAAL,CAAyBP,IAAzB,CAFF,EAGEC,IAHF;AAKA;;AAEF,WAAK,KAAL;AACE,aAAKO,oBAAL,CAA0BR,IAA1B,EAAgC,KAAKF,UAAL,EAAhC,EAAmD,GAAGG,IAAtD;AACA;;AAEF;AACE;AAdJ;AAgBD;;AAEDQ,EAAAA,MAAM,GAAG;AACP,QAAIvD,KAAJ;;AACA,QAAI,KAAKkC,KAAL,CAAWlC,KAAf,EAAsB;AACpBA,MAAAA,KAAK,GAAGjB,kBAAkB,CAAC,KAAKmD,KAAL,CAAWlC,KAAZ,CAAlB,IAAwC,EAAhD;AACAA,MAAAA,KAAK,GAAGA,KAAK,CAACwD,GAAN,IAAa,KAAKtB,KAAL,CAAWlC,KAAhC;AACD;;AAED,QAAMyD,YAAY,GAAG,KAAKC,eAAL,EAArB;AAEA,WACE,oBAAC,YAAD;AACE,MAAA,GAAG,EAAEC,IAAG,IAAI;AACV,aAAKnB,MAAL,GAAcmB,IAAd;AACD;AAHH,OAIM,KAAKzB,KAJX;AAKE,MAAA,KAAK,EAAElC,KALT;AAME,MAAA,KAAK,EAAE,CAAC4D,MAAM,CAACpB,MAAR,EAAgB,KAAKN,KAAL,CAAW2B,KAA3B,CANT;AAOE,MAAA,OAAO,EAAEC,KAAK,IAAI;AAChB,YAAI,KAAK5B,KAAL,CAAWb,eAAf,EAAgC;AAC9ByC,UAAAA,KAAK,CAACzC,eAAN;AACD;;AACD,YAAI,KAAKa,KAAL,CAAWZ,OAAf,EAAwB;AACtB,eAAKY,KAAL,CAAWZ,OAAX,CAAmBwC,KAAnB;AACD;AACF,OAdH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF;AAkBD;;AA/EqC;;AAkFxC/B,SAAS,CAACrC,SAAV,GAAsBA,SAAtB;AACAqC,SAAS,CAACD,YAAV,GAAyBA,YAAzB;AACAC,SAAS,CAAC5C,UAAV,GAAuBA,UAAvB;AAEA,IAAMyE,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC/BxB,EAAAA,MAAM,EAAE;AACNyB,IAAAA,QAAQ,EAAE,UADJ;AAENC,IAAAA,eAAe,EAAE;AAFX;AADuB,CAAlB,CAAf;AAOAnC,SAAS,CAACoC,QAAV,GAAqBA,QAAQ,CAACC,uBAAT,CAAiCrC,SAAjC,CAArB;AAEA,eAAe/C,oBAAoB,CAAC+C,SAAD,EAAY;AAC7CsC,EAAAA,aAAa,EAAE,QAD8B;AAE7CC,EAAAA,SAAS,EAAE;AACTC,IAAAA,MAAM,EAAE;AACNC,MAAAA,GAAG,EAAEvF,SADC;AAENwF,MAAAA,OAAO,EAAEvF;AAFH;AADC;AAFkC,CAAZ,CAAnC","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {\r\n  ColorPropType,\r\n  StyleSheet,\r\n  Platform,\r\n  NativeModules,\r\n  Animated,\r\n  findNodeHandle,\r\n  ViewPropTypes,\r\n  View,\r\n} from 'react-native';\r\n\r\nimport resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';\r\nimport decorateMapComponent, {\r\n  SUPPORTED,\r\n  USES_DEFAULT_IMPLEMENTATION,\r\n} from './decorateMapComponent';\r\n\r\nconst viewConfig = {\r\n  uiViewClassName: 'AIR<provider>MapMarker',\r\n  validAttributes: {\r\n    coordinate: true,\r\n  },\r\n};\r\n\r\n// if ViewPropTypes is not defined fall back to View.propType (to support RN < 0.44)\r\nconst viewPropTypes = ViewPropTypes || View.propTypes;\r\n\r\nconst propTypes = {\r\n  ...viewPropTypes,\r\n\r\n  // TODO(lmr): get rid of these?\r\n  identifier: PropTypes.string,\r\n  reuseIdentifier: PropTypes.string,\r\n\r\n  /**\r\n   * The title of the marker. This is only used if the <Marker /> component has no children that\r\n   * are a `<Callout />`, in which case the default callout behavior will be used, which\r\n   * will show both the `title` and the `description`, if provided.\r\n   */\r\n  title: PropTypes.string,\r\n\r\n  /**\r\n   * The description of the marker. This is only used if the <Marker /> component has no children\r\n   * that are a `<Callout />`, in which case the default callout behavior will be used,\r\n   * which will show both the `title` and the `description`, if provided.\r\n   */\r\n  description: PropTypes.string,\r\n\r\n  /**\r\n   * A custom image to be used as the marker's icon. Only local image resources are allowed to be\r\n   * used.\r\n   */\r\n  image: PropTypes.any,\r\n\r\n  /**\r\n   * Opacity level of view/image based markers\r\n   */\r\n  opacity: PropTypes.number,\r\n\r\n  /**\r\n   * If no custom marker view or custom image is provided, the platform default pin will be used,\r\n   * which can be customized by this color. Ignored if a custom marker is being used.\r\n   */\r\n  pinColor: ColorPropType,\r\n\r\n  /**\r\n   * The coordinate for the marker.\r\n   */\r\n  coordinate: PropTypes.shape({\r\n    /**\r\n     * Coordinates for the anchor point of the marker.\r\n     */\r\n    latitude: PropTypes.number.isRequired,\r\n    longitude: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n\r\n  /**\r\n   * The offset (in points) at which to display the view.\r\n   *\r\n   * By default, the center point of an annotation view is placed at the coordinate point of the\r\n   * associated annotation. You can use this property to reposition the annotation view as\r\n   * needed. This x and y offset values are measured in points. Positive offset values move the\r\n   * annotation view down and to the right, while negative values move it up and to the left.\r\n   *\r\n   * For android, see the `anchor` prop.\r\n   *\r\n   * @platform ios\r\n   */\r\n  centerOffset: PropTypes.shape({\r\n    /**\r\n     * Offset from the anchor point\r\n     */\r\n    x: PropTypes.number.isRequired,\r\n    y: PropTypes.number.isRequired,\r\n  }),\r\n\r\n  /**\r\n   * The offset (in points) at which to place the callout bubble.\r\n   *\r\n   * This property determines the additional distance by which to move the callout bubble. When\r\n   * this property is set to (0, 0), the anchor point of the callout bubble is placed on the\r\n   * top-center point of the marker view’s frame. Specifying positive offset values moves the\r\n   * callout bubble down and to the right, while specifying negative values moves it up and to\r\n   * the left.\r\n   *\r\n   * For android, see the `calloutAnchor` prop.\r\n   *\r\n   * @platform ios\r\n   */\r\n  calloutOffset: PropTypes.shape({\r\n    /**\r\n     * Offset to the callout\r\n     */\r\n    x: PropTypes.number.isRequired,\r\n    y: PropTypes.number.isRequired,\r\n  }),\r\n\r\n  /**\r\n   * Sets the anchor point for the marker.\r\n   *\r\n   * The anchor specifies the point in the icon image that is anchored to the marker's position\r\n   * on the Earth's surface.\r\n   *\r\n   * The anchor point is specified in the continuous space [0.0, 1.0] x [0.0, 1.0], where (0, 0)\r\n   * is the top-left corner of the image, and (1, 1) is the bottom-right corner. The anchoring\r\n   * point in a W x H image is the nearest discrete grid point in a (W + 1) x (H + 1) grid,\r\n   * obtained by scaling the then rounding. For example, in a 4 x 2 image, the anchor point\r\n   * (0.7, 0.6) resolves to the grid point at (3, 1).\r\n   *\r\n   * For ios, see the `centerOffset` prop.\r\n   *\r\n   * @platform android\r\n   */\r\n  anchor: PropTypes.shape({\r\n    /**\r\n     * Offset to the callout\r\n     */\r\n    x: PropTypes.number.isRequired,\r\n    y: PropTypes.number.isRequired,\r\n  }),\r\n\r\n  /**\r\n   * Specifies the point in the marker image at which to anchor the callout when it is displayed.\r\n   * This is specified in the same coordinate system as the anchor. See the `andor` prop for more\r\n   * details.\r\n   *\r\n   * The default is the top middle of the image.\r\n   *\r\n   * For ios, see the `calloutOffset` prop.\r\n   *\r\n   * @platform android\r\n   */\r\n  calloutAnchor: PropTypes.shape({\r\n    /**\r\n     * Offset to the callout\r\n     */\r\n    x: PropTypes.number.isRequired,\r\n    y: PropTypes.number.isRequired,\r\n  }),\r\n\r\n  /**\r\n   * Sets whether this marker should be flat against the map true or a billboard facing the\r\n   * camera false.\r\n   *\r\n   * @platform android\r\n   */\r\n  flat: PropTypes.bool,\r\n\r\n  draggable: PropTypes.bool,\r\n\r\n  /**\r\n   * Sets whether this marker should track view changes true.\r\n   */\r\n\r\n  tracksViewChanges: PropTypes.bool,\r\n\r\n  /**\r\n   * Sets whether this marker should track view changes in info window true.\r\n   *\r\n   * @platform ios\r\n   */\r\n\r\n  tracksInfoWindowChanges: PropTypes.bool,\r\n\r\n  /**\r\n   * Stops Marker onPress events from propagating to and triggering MapView onPress events.\r\n   *\r\n   * @platform ios\r\n   */\r\n\r\n  stopPropagation: PropTypes.bool,\r\n\r\n  /**\r\n   * Callback that is called when the user presses on the marker\r\n   */\r\n  onPress: PropTypes.func,\r\n\r\n  /**\r\n   * Callback that is called when the user selects the marker, before the callout is shown.\r\n   *\r\n   * @platform ios\r\n   */\r\n  onSelect: PropTypes.func,\r\n\r\n  /**\r\n   * Callback that is called when the marker is deselected, before the callout is hidden.\r\n   *\r\n   * @platform ios\r\n   */\r\n  onDeselect: PropTypes.func,\r\n\r\n  /**\r\n   * Callback that is called when the user taps the callout view.\r\n   */\r\n  onCalloutPress: PropTypes.func,\r\n\r\n  /**\r\n   * Callback that is called when the user initiates a drag on this marker (if it is draggable)\r\n   */\r\n  onDragStart: PropTypes.func,\r\n\r\n  /**\r\n   * Callback called continuously as the marker is dragged\r\n   */\r\n  onDrag: PropTypes.func,\r\n\r\n  /**\r\n   * Callback that is called when a drag on this marker finishes. This is usually the point you\r\n   * will want to setState on the marker's coordinate again\r\n   */\r\n  onDragEnd: PropTypes.func,\r\n};\r\n\r\nconst defaultProps = {\r\n  stopPropagation: false,\r\n};\r\n\r\nclass MapMarker extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.showCallout = this.showCallout.bind(this);\r\n    this.hideCallout = this.hideCallout.bind(this);\r\n    this.animateMarkerToCoordinate = this.animateMarkerToCoordinate.bind(this);\r\n  }\r\n\r\n  setNativeProps(props) {\r\n    this.marker.setNativeProps(props);\r\n  }\r\n\r\n  showCallout() {\r\n    this._runCommand('showCallout', []);\r\n  }\r\n\r\n  hideCallout() {\r\n    this._runCommand('hideCallout', []);\r\n  }\r\n\r\n  animateMarkerToCoordinate(coordinate, duration) {\r\n    this._runCommand('animateMarkerToCoordinate', [coordinate, duration || 500]);\r\n  }\r\n\r\n  redraw() {\r\n    this._runCommand('redraw', []);\r\n  }\r\n\r\n  _getHandle() {\r\n    return findNodeHandle(this.marker);\r\n  }\r\n\r\n  _runCommand(name, args) {\r\n    switch (Platform.OS) {\r\n      case 'android':\r\n        NativeModules.UIManager.dispatchViewManagerCommand(\r\n          this._getHandle(),\r\n          this.getUIManagerCommand(name),\r\n          args\r\n        );\r\n        break;\r\n\r\n      case 'ios':\r\n        this.getMapManagerCommand(name)(this._getHandle(), ...args);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let image;\r\n    if (this.props.image) {\r\n      image = resolveAssetSource(this.props.image) || {};\r\n      image = image.uri || this.props.image;\r\n    }\r\n\r\n    const AIRMapMarker = this.getAirComponent();\r\n\r\n    return (\r\n      <AIRMapMarker\r\n        ref={ref => {\r\n          this.marker = ref;\r\n        }}\r\n        {...this.props}\r\n        image={image}\r\n        style={[styles.marker, this.props.style]}\r\n        onPress={event => {\r\n          if (this.props.stopPropagation) {\r\n            event.stopPropagation();\r\n          }\r\n          if (this.props.onPress) {\r\n            this.props.onPress(event);\r\n          }\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nMapMarker.propTypes = propTypes;\r\nMapMarker.defaultProps = defaultProps;\r\nMapMarker.viewConfig = viewConfig;\r\n\r\nconst styles = StyleSheet.create({\r\n  marker: {\r\n    position: 'absolute',\r\n    backgroundColor: 'transparent',\r\n  },\r\n});\r\n\r\nMapMarker.Animated = Animated.createAnimatedComponent(MapMarker);\r\n\r\nexport default decorateMapComponent(MapMarker, {\r\n  componentType: 'Marker',\r\n  providers: {\r\n    google: {\r\n      ios: SUPPORTED,\r\n      android: USES_DEFAULT_IMPLEMENTATION,\r\n    },\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}