{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { NativeModulesProxy } from 'expo-core';\nimport processTheme from \"./utils/processTheme\";\nimport checkArgs from \"./utils/checkArgs\";\nimport checkInit from \"./utils/checkInit\";\nimport * as types from \"./utils/types\";\nimport errorCodes from \"./errorCodes\";\nvar {\n  StripeModule\n} = NativeModulesProxy;\n\nclass Stripe {\n  constructor() {\n    var _this = this;\n\n    this.stripeInitialized = false;\n\n    this.setOptionsAsync = function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      checkArgs(types.setOptionsOptionsPropTypes, options, 'options', 'Stripe.setOptions');\n      _this.stripeInitialized = true;\n      return StripeModule.init(options, errorCodes);\n    };\n\n    this.deviceSupportsAndroidPayAsync = () => StripeModule.deviceSupportsAndroidPay();\n\n    this.deviceSupportsApplePayAsync = () => StripeModule.deviceSupportsApplePay();\n\n    this.deviceSupportsNativePayAsync = () => Platform.select({\n      ios: () => this.deviceSupportsApplePay(),\n      android: () => this.deviceSupportsAndroidPay()\n    })();\n\n    this.canMakeApplePayPaymentsAsync = function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      checkArgs(types.canMakeApplePayPaymentsOptionsPropTypes, options, 'options', 'Stripe.canMakeApplePayPayments');\n      return StripeModule.canMakeApplePayPayments(options);\n    };\n\n    this.canMakeAndroidPayPaymentsAsync = () => StripeModule.canMakeAndroidPayPayments();\n\n    this.canMakeNativePayPaymentsAsync = function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return Platform.select({\n        ios: () => _this.canMakeApplePayPayments(options),\n        android: () => _this.canMakeAndroidPayPayments()\n      })();\n    };\n\n    this.paymentRequestWithAndroidPayAsync = function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      checkInit(_this);\n      checkArgs(types.paymentRequestWithAndroidPayOptionsPropTypes, options, 'options', 'Stripe.paymentRequestWithAndroidPay');\n      return StripeModule.paymentRequestWithAndroidPay(options);\n    };\n\n    this.paymentRequestWithApplePayAsync = function () {\n      var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      checkInit(_this);\n      checkArgs(types.paymentRequestWithApplePayItemsPropTypes, {\n        items\n      }, 'items', 'Stripe.paymentRequestWithApplePay');\n      checkArgs(types.paymentRequestWithApplePayOptionsPropTypes, options, 'options', 'Stripe.paymentRequestWithApplePay');\n      return StripeModule.paymentRequestWithApplePay(items, options);\n    };\n\n    this.completeApplePayRequestAsync = () => {\n      checkInit(this);\n      return StripeModule.completeApplePayRequest();\n    };\n\n    this.completeNativePayRequestAsync = () => Platform.select({\n      ios: () => this.completeApplePayRequest(),\n      android: () => Promise.resolve()\n    })();\n\n    this.cancelApplePayRequestAsync = () => {\n      checkInit(this);\n      return StripeModule.cancelApplePayRequest();\n    };\n\n    this.cancelNativePayRequestAsync = () => Platform.select({\n      ios: () => this.cancelApplePayRequest(),\n      android: () => Promise.resolve()\n    })();\n\n    this.openApplePaySetupAsync = () => StripeModule.openApplePaySetup();\n\n    this.openNativePaySetupAsync = () => Platform.select({\n      ios: () => this.openApplePaySetup(),\n      android: () => Promise.resolve()\n    })();\n\n    this.paymentRequestWithCardFormAsync = function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      checkInit(_this);\n      checkArgs(types.paymentRequestWithCardFormOptionsPropTypes, options, 'options', 'Stripe.paymentRequestWithCardForm');\n      return StripeModule.paymentRequestWithCardForm(_objectSpread(_objectSpread({}, options), {}, {\n        theme: processTheme(options.theme)\n      }));\n    };\n\n    this.createTokenWithCardAsync = function () {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      checkInit(_this);\n      checkArgs(types.createTokenWithCardParamsPropTypes, params, 'params', 'Stripe.createTokenWithCard');\n      return StripeModule.createTokenWithCard(params);\n    };\n\n    this.createTokenWithBankAccountAsync = function () {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      checkInit(_this);\n      checkArgs(types.createTokenWithBankAccountParamsPropTypes, params, 'params', 'Stripe.createTokenWithBankAccount');\n      return StripeModule.createTokenWithBankAccount(params);\n    };\n\n    this.createSourceWithParamsAsync = function () {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      checkInit(_this);\n      checkArgs(types.createSourceWithParamsPropType, params, 'params', 'Stripe.createSourceWithParams');\n      return StripeModule.createSourceWithParams(params);\n    };\n  }\n\n  paymentRequestWithNativePayAsync() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var items = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return Platform.select({\n      ios: () => this.paymentRequestWithApplePay(items, options),\n      android: () => this.paymentRequestWithAndroidPay(options)\n    })();\n  }\n\n}\n\nexport default new Stripe();","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/expo-payments-stripe/src/Stripe.js"],"names":["NativeModulesProxy","processTheme","checkArgs","checkInit","types","errorCodes","StripeModule","Stripe","stripeInitialized","setOptionsAsync","options","setOptionsOptionsPropTypes","init","deviceSupportsAndroidPayAsync","deviceSupportsAndroidPay","deviceSupportsApplePayAsync","deviceSupportsApplePay","deviceSupportsNativePayAsync","Platform","select","ios","android","canMakeApplePayPaymentsAsync","canMakeApplePayPaymentsOptionsPropTypes","canMakeApplePayPayments","canMakeAndroidPayPaymentsAsync","canMakeAndroidPayPayments","canMakeNativePayPaymentsAsync","paymentRequestWithAndroidPayAsync","paymentRequestWithAndroidPayOptionsPropTypes","paymentRequestWithAndroidPay","paymentRequestWithApplePayAsync","items","paymentRequestWithApplePayItemsPropTypes","paymentRequestWithApplePayOptionsPropTypes","paymentRequestWithApplePay","completeApplePayRequestAsync","completeApplePayRequest","completeNativePayRequestAsync","Promise","resolve","cancelApplePayRequestAsync","cancelApplePayRequest","cancelNativePayRequestAsync","openApplePaySetupAsync","openApplePaySetup","openNativePaySetupAsync","paymentRequestWithCardFormAsync","paymentRequestWithCardFormOptionsPropTypes","paymentRequestWithCardForm","theme","createTokenWithCardAsync","params","createTokenWithCardParamsPropTypes","createTokenWithCard","createTokenWithBankAccountAsync","createTokenWithBankAccountParamsPropTypes","createTokenWithBankAccount","createSourceWithParamsAsync","createSourceWithParamsPropType","createSourceWithParams","paymentRequestWithNativePayAsync"],"mappings":"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","sourcesContent":["import { Platform } from 'react-native';\nimport { NativeModulesProxy } from 'expo-core';\nimport processTheme from './utils/processTheme';\nimport checkArgs from './utils/checkArgs';\nimport checkInit from './utils/checkInit';\nimport * as types from './utils/types';\nimport errorCodes from './errorCodes';\n\nconst { StripeModule } = NativeModulesProxy;\n\nclass Stripe {\n  stripeInitialized = false;\n\n  setOptionsAsync = (options = {}) => {\n    checkArgs(types.setOptionsOptionsPropTypes, options, 'options', 'Stripe.setOptions');\n\n    this.stripeInitialized = true;\n\n    return StripeModule.init(options, errorCodes);\n  };\n\n  // @deprecated use deviceSupportsNativePay\n  deviceSupportsAndroidPayAsync = () => StripeModule.deviceSupportsAndroidPay();\n\n  // @deprecated use deviceSupportsNativePay\n  deviceSupportsApplePayAsync = () => StripeModule.deviceSupportsApplePay();\n\n  deviceSupportsNativePayAsync = () =>\n    Platform.select({\n      ios: () => this.deviceSupportsApplePay(),\n      android: () => this.deviceSupportsAndroidPay(),\n    })();\n\n  // @deprecated use canMakeNativePayPayments\n  canMakeApplePayPaymentsAsync = (options = {}) => {\n    checkArgs(\n      types.canMakeApplePayPaymentsOptionsPropTypes,\n      options,\n      'options',\n      'Stripe.canMakeApplePayPayments'\n    );\n    return StripeModule.canMakeApplePayPayments(options);\n  };\n\n  // @deprecated use canMakeNativePayPayments\n  canMakeAndroidPayPaymentsAsync = () => StripeModule.canMakeAndroidPayPayments();\n\n  // iOS requires networks array while Android requires nothing\n  canMakeNativePayPaymentsAsync = (options = {}) =>\n    Platform.select({\n      ios: () => this.canMakeApplePayPayments(options),\n      android: () => this.canMakeAndroidPayPayments(),\n    })();\n\n  // @deprecated use paymentRequestWithNativePay\n  paymentRequestWithAndroidPayAsync = (options = {}) => {\n    checkInit(this);\n    checkArgs(\n      types.paymentRequestWithAndroidPayOptionsPropTypes,\n      options,\n      'options',\n      'Stripe.paymentRequestWithAndroidPay'\n    );\n    return StripeModule.paymentRequestWithAndroidPay(options);\n  };\n\n  // @deprecated use paymentRequestWithNativePay\n  paymentRequestWithApplePayAsync = (items = [], options = {}) => {\n    checkInit(this);\n    checkArgs(\n      types.paymentRequestWithApplePayItemsPropTypes,\n      { items },\n      'items',\n      'Stripe.paymentRequestWithApplePay'\n    );\n    checkArgs(\n      types.paymentRequestWithApplePayOptionsPropTypes,\n      options,\n      'options',\n      'Stripe.paymentRequestWithApplePay'\n    );\n    return StripeModule.paymentRequestWithApplePay(items, options);\n  };\n\n  paymentRequestWithNativePayAsync(options = {}, items = []) {\n    return Platform.select({\n      ios: () => this.paymentRequestWithApplePay(items, options),\n      android: () => this.paymentRequestWithAndroidPay(options),\n    })();\n  }\n\n  // @deprecated use completeNativePayRequest\n  completeApplePayRequestAsync = () => {\n    checkInit(this);\n    return StripeModule.completeApplePayRequest();\n  };\n\n  // no corresponding android impl exists\n  completeNativePayRequestAsync = () =>\n    Platform.select({\n      ios: () => this.completeApplePayRequest(),\n      android: () => Promise.resolve(),\n    })();\n\n  // @deprecated use cancelNativePayRequest\n  cancelApplePayRequestAsync = () => {\n    checkInit(this);\n    return StripeModule.cancelApplePayRequest();\n  };\n\n  // no corresponding android impl exists\n  cancelNativePayRequestAsync = () =>\n    Platform.select({\n      ios: () => this.cancelApplePayRequest(),\n      android: () => Promise.resolve(),\n    })();\n\n  // @deprecated use openNativePaySetup\n  openApplePaySetupAsync = () => StripeModule.openApplePaySetup();\n\n  // no corresponding android impl exists\n  openNativePaySetupAsync = () =>\n    Platform.select({\n      ios: () => this.openApplePaySetup(),\n      android: () => Promise.resolve(),\n    })();\n\n  paymentRequestWithCardFormAsync = (options = {}) => {\n    checkInit(this);\n    checkArgs(\n      types.paymentRequestWithCardFormOptionsPropTypes,\n      options,\n      'options',\n      'Stripe.paymentRequestWithCardForm'\n    );\n    return StripeModule.paymentRequestWithCardForm({\n      ...options,\n      theme: processTheme(options.theme),\n    });\n  };\n\n  createTokenWithCardAsync = (params = {}) => {\n    checkInit(this);\n    checkArgs(\n      types.createTokenWithCardParamsPropTypes,\n      params,\n      'params',\n      'Stripe.createTokenWithCard'\n    );\n    return StripeModule.createTokenWithCard(params);\n  };\n\n  createTokenWithBankAccountAsync = (params = {}) => {\n    checkInit(this);\n    checkArgs(\n      types.createTokenWithBankAccountParamsPropTypes,\n      params,\n      'params',\n      'Stripe.createTokenWithBankAccount'\n    );\n    return StripeModule.createTokenWithBankAccount(params);\n  };\n\n  createSourceWithParamsAsync = (params = {}) => {\n    checkInit(this);\n    checkArgs(\n      types.createSourceWithParamsPropType,\n      params,\n      'params',\n      'Stripe.createSourceWithParams'\n    );\n    return StripeModule.createSourceWithParams(params);\n  };\n}\n\nexport default new Stripe();\n"]},"metadata":{},"sourceType":"module"}