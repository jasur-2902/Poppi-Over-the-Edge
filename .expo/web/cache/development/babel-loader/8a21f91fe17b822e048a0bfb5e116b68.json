{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jshukurov\\\\Desktop\\\\Poppi Over The Edge\\\\Poppi-Over-the-Edge-master\\\\node_modules\\\\react-native-super-grid\\\\SectionGrid.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef, memo, useCallback, useMemo, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport SectionList from \"react-native-web/dist/exports/SectionList\";\nimport PropTypes from 'prop-types';\nimport { generateStyles, calculateDimensions, chunkArray } from \"./utils\";\nvar SectionGrid = memo(forwardRef((props, ref) => {\n  var {\n    sections,\n    style,\n    spacing,\n    fixed,\n    itemDimension,\n    staticDimension,\n    maxDimension,\n    renderItem: originalRenderItem,\n    keyExtractor,\n    onLayout,\n    itemContainerStyle\n  } = props,\n      restProps = _objectWithoutProperties(props, [\"sections\", \"style\", \"spacing\", \"fixed\", \"itemDimension\", \"staticDimension\", \"maxDimension\", \"renderItem\", \"keyExtractor\", \"onLayout\", \"itemContainerStyle\"]);\n\n  var [totalDimension, setTotalDimension] = useState(() => {\n    var defaultTotalDimension = staticDimension;\n\n    if (!staticDimension) {\n      defaultTotalDimension = maxDimension || Dimensions.get('window').width;\n    }\n\n    return defaultTotalDimension;\n  });\n  var onLocalLayout = useCallback(e => {\n    if (!staticDimension) {\n      var {\n        width: newTotalDimension\n      } = e.nativeEvent.layout || {};\n\n      if (maxDimension && newTotalDimension > maxDimension) {\n        newTotalDimension = maxDimension;\n      }\n\n      if (totalDimension !== newTotalDimension) {\n        setTotalDimension(newTotalDimension);\n      }\n    }\n\n    if (onLayout) {\n      onLayout(e);\n    }\n  }, [staticDimension, maxDimension, totalDimension, onLayout]);\n  var renderRow = useCallback((_ref) => {\n    var {\n      renderItem,\n      rowItems,\n      rowIndex,\n      section,\n      itemsPerRow,\n      rowStyle,\n      separators,\n      isFirstRow,\n      containerStyle\n    } = _ref;\n    var additionalRowStyle = {};\n\n    if (isFirstRow) {\n      additionalRowStyle = {\n        marginTop: spacing\n      };\n    }\n\n    return React.createElement(View, {\n      style: [rowStyle, additionalRowStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, rowItems.map((item, i) => React.createElement(View, {\n      key: keyExtractor ? keyExtractor(item, i) : \"item_\".concat(rowIndex * itemsPerRow + i),\n      style: [containerStyle, itemContainerStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 15\n      }\n    }, renderItem({\n      item,\n      index: rowIndex * itemsPerRow + i,\n      section,\n      separators,\n      rowIndex\n    }))));\n  }, [spacing, keyExtractor, itemContainerStyle]);\n  var {\n    containerDimension,\n    itemsPerRow,\n    fixedSpacing\n  } = useMemo(() => calculateDimensions({\n    itemDimension,\n    staticDimension,\n    totalDimension,\n    spacing,\n    fixed\n  }), [itemDimension, staticDimension, totalDimension, spacing, fixed]);\n  var {\n    containerStyle,\n    rowStyle\n  } = useMemo(() => generateStyles({\n    itemDimension,\n    containerDimension,\n    spacing,\n    fixedSpacing,\n    fixed\n  }), [itemDimension, containerDimension, spacing, fixedSpacing, fixed]);\n  var groupSectionsFunc = useCallback(section => {\n    var chunkedData = chunkArray(section.data, itemsPerRow);\n\n    var _renderItem = section.renderItem || originalRenderItem;\n\n    return _objectSpread(_objectSpread({}, section), {}, {\n      renderItem: (_ref2) => {\n        var {\n          item,\n          index,\n          section\n        } = _ref2;\n        return renderRow({\n          renderItem: _renderItem,\n          rowItems: item,\n          rowIndex: index,\n          section,\n          isFirstRow: index === 0,\n          itemsPerRow,\n          rowStyle,\n          containerStyle\n        });\n      },\n      data: chunkedData,\n      originalData: section.data\n    });\n  }, [itemsPerRow, originalRenderItem, renderRow, rowStyle, containerStyle]);\n  var groupedSections = sections.map(groupSectionsFunc);\n  var localKeyExtractor = useCallback((rowItems, index) => {\n    if (keyExtractor) {\n      return rowItems.map((rowItem, rowItemIndex) => keyExtractor(rowItem, rowItemIndex)).join('_');\n    }\n\n    return \"row_\".concat(index);\n  }, [keyExtractor]);\n  return React.createElement(SectionList, _extends({\n    onLayout: onLocalLayout,\n    extraData: totalDimension,\n    sections: groupedSections,\n    keyExtractor: localKeyExtractor,\n    style: style,\n    ref: ref\n  }, restProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }\n  }));\n}));\nSectionGrid.displayName = 'SectionGrid';\nSectionGrid.propTypes = {\n  renderItem: PropTypes.func,\n  sections: PropTypes.arrayOf(PropTypes.any).isRequired,\n  itemDimension: PropTypes.number,\n  fixed: PropTypes.bool,\n  spacing: PropTypes.number,\n  style: ViewPropTypes.style,\n  itemContainerStyle: ViewPropTypes.style,\n  staticDimension: PropTypes.number,\n  onLayout: PropTypes.func,\n  listKey: PropTypes.string\n};\nSectionGrid.defaultProps = {\n  fixed: false,\n  itemDimension: 120,\n  spacing: 10,\n  style: {},\n  itemContainerStyle: undefined,\n  staticDimension: undefined,\n  onLayout: null,\n  listKey: undefined\n};\nexport default SectionGrid;","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/react-native-super-grid/SectionGrid.js"],"names":["React","forwardRef","memo","useCallback","useMemo","useState","PropTypes","generateStyles","calculateDimensions","chunkArray","SectionGrid","props","ref","sections","style","spacing","fixed","itemDimension","staticDimension","maxDimension","renderItem","originalRenderItem","keyExtractor","onLayout","itemContainerStyle","restProps","totalDimension","setTotalDimension","defaultTotalDimension","Dimensions","get","width","onLocalLayout","e","newTotalDimension","nativeEvent","layout","renderRow","rowItems","rowIndex","section","itemsPerRow","rowStyle","separators","isFirstRow","containerStyle","additionalRowStyle","marginTop","map","item","i","index","containerDimension","fixedSpacing","groupSectionsFunc","chunkedData","data","originalData","groupedSections","localKeyExtractor","rowItem","rowItemIndex","join","displayName","propTypes","func","arrayOf","any","isRequired","number","bool","ViewPropTypes","listKey","string","defaultProps","undefined"],"mappings":"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","sourcesContent":["import React, {\n  forwardRef, memo, useCallback, useMemo, useState,\n} from 'react';\nimport {\n  View, Dimensions, ViewPropTypes, SectionList,\n} from 'react-native';\nimport PropTypes from 'prop-types';\nimport { generateStyles, calculateDimensions, chunkArray } from './utils';\n\n\nconst SectionGrid = memo(\n  forwardRef((props, ref) => {\n    const {\n      sections,\n      style,\n      spacing,\n      fixed,\n      itemDimension,\n      staticDimension,\n      maxDimension,\n      renderItem: originalRenderItem,\n      keyExtractor,\n      onLayout,\n      itemContainerStyle,\n      ...restProps\n    } = props;\n\n    const [totalDimension, setTotalDimension] = useState(() => {\n      let defaultTotalDimension = staticDimension;\n\n      if (!staticDimension) {\n        defaultTotalDimension = maxDimension || Dimensions.get('window').width;\n      }\n\n      return defaultTotalDimension;\n    });\n\n    const onLocalLayout = useCallback(\n      (e) => {\n        if (!staticDimension) {\n          let { width: newTotalDimension } = e.nativeEvent.layout || {};\n\n          if (maxDimension && newTotalDimension > maxDimension) {\n            newTotalDimension = maxDimension;\n          }\n\n          if (totalDimension !== newTotalDimension) {\n            setTotalDimension(newTotalDimension);\n          }\n        }\n\n        // call onLayout prop if passed\n        if (onLayout) {\n          onLayout(e);\n        }\n      },\n      [staticDimension, maxDimension, totalDimension, onLayout],\n    );\n\n    const renderRow = useCallback(\n      ({\n        renderItem,\n        rowItems,\n        rowIndex,\n        section,\n        itemsPerRow,\n        rowStyle,\n        separators,\n        isFirstRow,\n        containerStyle,\n      }) => {\n        // Add spacing below section header\n        let additionalRowStyle = {};\n        if (isFirstRow) {\n          additionalRowStyle = {\n            marginTop: spacing,\n          };\n        }\n\n        return (\n          <View style={[rowStyle, additionalRowStyle]}>\n            {rowItems.map((item, i) => (\n              <View\n                key={\n                  keyExtractor\n                    ? keyExtractor(item, i)\n                    : `item_${rowIndex * itemsPerRow + i}`\n                }\n                style={[containerStyle, itemContainerStyle]}\n              >\n                {renderItem({\n                  item,\n                  index: rowIndex * itemsPerRow + i,\n                  section,\n                  separators,\n                  rowIndex,\n                })}\n              </View>\n            ))}\n          </View>\n        );\n      },\n      [spacing, keyExtractor, itemContainerStyle],\n    );\n\n    const { containerDimension, itemsPerRow, fixedSpacing } = useMemo(\n      () => calculateDimensions({\n        itemDimension,\n        staticDimension,\n        totalDimension,\n        spacing,\n        fixed,\n      }),\n      [itemDimension, staticDimension, totalDimension, spacing, fixed],\n    );\n\n    const { containerStyle, rowStyle } = useMemo(\n      () => generateStyles({\n        itemDimension,\n        containerDimension,\n        spacing,\n        fixedSpacing,\n        fixed,\n      }),\n      [itemDimension, containerDimension, spacing, fixedSpacing, fixed],\n    );\n\n    const groupSectionsFunc = useCallback(\n      (section) => {\n        const chunkedData = chunkArray(section.data, itemsPerRow);\n        const renderItem = section.renderItem || originalRenderItem;\n\n        return {\n          ...section,\n          renderItem: ({ item, index, section }) => renderRow({\n            renderItem,\n            rowItems: item,\n            rowIndex: index,\n            section,\n            isFirstRow: index === 0,\n            itemsPerRow,\n            rowStyle,\n            containerStyle,\n          }),\n          data: chunkedData,\n          originalData: section.data,\n        };\n      },\n      [\n        itemsPerRow,\n        originalRenderItem,\n        renderRow,\n        rowStyle,\n        containerStyle,\n      ],\n    );\n\n    const groupedSections = sections.map(groupSectionsFunc);\n\n    const localKeyExtractor = useCallback(\n      (rowItems, index) => {\n        if (keyExtractor) {\n          return rowItems\n            .map((rowItem, rowItemIndex) => keyExtractor(rowItem, rowItemIndex))\n            .join('_');\n        }\n        return `row_${index}`;\n      },\n      [keyExtractor],\n    );\n\n    return (\n      <SectionList\n        onLayout={onLocalLayout}\n        extraData={totalDimension}\n        sections={groupedSections}\n        keyExtractor={localKeyExtractor}\n        style={style}\n        ref={ref}\n        {...restProps}\n      />\n    );\n  }),\n);\n\n\nSectionGrid.displayName = 'SectionGrid';\n\nSectionGrid.propTypes = {\n  renderItem: PropTypes.func,\n  sections: PropTypes.arrayOf(PropTypes.any).isRequired,\n  itemDimension: PropTypes.number,\n  fixed: PropTypes.bool,\n  spacing: PropTypes.number,\n  style: ViewPropTypes.style,\n  itemContainerStyle: ViewPropTypes.style,\n  staticDimension: PropTypes.number,\n  onLayout: PropTypes.func,\n  listKey: PropTypes.string,\n};\n\nSectionGrid.defaultProps = {\n  fixed: false,\n  itemDimension: 120,\n  spacing: 10,\n  style: {},\n  itemContainerStyle: undefined,\n  staticDimension: undefined,\n  onLayout: null,\n  listKey: undefined,\n};\n\n\nexport default SectionGrid;\n"]},"metadata":{},"sourceType":"module"}