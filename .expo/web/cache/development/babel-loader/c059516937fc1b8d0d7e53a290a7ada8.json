{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport uuidv4 from 'uuid/v4';\nimport { batchResolveAllFontsAsync } from \"./Fonts.web\";\nimport { processAllImagesAsync } from \"./Images.web\";\nimport * as util from \"./Utils.web\";\n\nfunction generateSVGAsync(_x) {\n  return _generateSVGAsync.apply(this, arguments);\n}\n\nfunction _generateSVGAsync() {\n  _generateSVGAsync = _asyncToGenerator(function* (element) {\n    var {\n      width,\n      height,\n      bgcolor,\n      style\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var clone = yield cloneElement(element);\n\n    if (clone === undefined) {\n      throw new Error('Cannot clone null element');\n    }\n\n    yield Promise.all([batchResolveAllFontsAsync(clone), processAllImagesAsync(clone)]);\n\n    if (bgcolor) {\n      clone.style.backgroundColor = bgcolor;\n    }\n\n    if (width) {\n      clone.style.width = \"\".concat(width, \"px\");\n    }\n\n    if (height) {\n      clone.style.height = \"\".concat(height, \"px\");\n    }\n\n    if (style) {\n      _extends(clone.style, style);\n    }\n\n    var svgDataUri = yield makeSVGDataURIAsync(clone, width || util.getWidthForElement(element), height || util.getHeightForElement(element));\n    return svgDataUri;\n  });\n  return _generateSVGAsync.apply(this, arguments);\n}\n\nexport function createSVGAsync(_x2) {\n  return _createSVGAsync.apply(this, arguments);\n}\n\nfunction _createSVGAsync() {\n  _createSVGAsync = _asyncToGenerator(function* (element) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return yield generateSVGAsync(element, options);\n  });\n  return _createSVGAsync.apply(this, arguments);\n}\n\nexport function createPixelDataAsync(_x3, _x4) {\n  return _createPixelDataAsync.apply(this, arguments);\n}\n\nfunction _createPixelDataAsync() {\n  _createPixelDataAsync = _asyncToGenerator(function* (element, options) {\n    var canvas = yield draw(element, options);\n    var context = canvas.getContext('2d');\n\n    if (!context) {\n      throw new Error('Canvas context is not supported.');\n    }\n\n    return context.getImageData(0, 0, util.getWidthForElement(element), util.getHeightForElement(element)).data;\n  });\n  return _createPixelDataAsync.apply(this, arguments);\n}\n\nexport function createPNGAsync(_x5, _x6) {\n  return _createPNGAsync.apply(this, arguments);\n}\n\nfunction _createPNGAsync() {\n  _createPNGAsync = _asyncToGenerator(function* (element, options) {\n    var canvas = yield draw(element, options);\n    return yield canvas.toDataURL('image/png');\n  });\n  return _createPNGAsync.apply(this, arguments);\n}\n\nexport function createJPEGAsync(_x7, _x8) {\n  return _createJPEGAsync.apply(this, arguments);\n}\n\nfunction _createJPEGAsync() {\n  _createJPEGAsync = _asyncToGenerator(function* (element, _ref) {\n    var {\n      quality\n    } = _ref,\n        options = _objectWithoutProperties(_ref, [\"quality\"]);\n\n    var canvas = yield draw(element, options);\n    return yield canvas.toDataURL('image/jpeg', quality);\n  });\n  return _createJPEGAsync.apply(this, arguments);\n}\n\nexport function createBlobAsync(_x9, _x10) {\n  return _createBlobAsync.apply(this, arguments);\n}\n\nfunction _createBlobAsync() {\n  _createBlobAsync = _asyncToGenerator(function* (element, _ref2) {\n    var {\n      quality\n    } = _ref2,\n        options = _objectWithoutProperties(_ref2, [\"quality\"]);\n\n    var canvas = yield draw(element, options);\n    return yield util.getBlobFromCanvasAsync(canvas, quality);\n  });\n  return _createBlobAsync.apply(this, arguments);\n}\n\nfunction draw(_x11, _x12) {\n  return _draw.apply(this, arguments);\n}\n\nfunction _draw() {\n  _draw = _asyncToGenerator(function* (element, options) {\n    var fromSVG = yield generateSVGAsync(element, options);\n    var image = yield util.getImageElementFromURIAsync(fromSVG);\n    var canvas = newCanvas(element, options);\n    var context = canvas.getContext('2d');\n\n    if (!context) {\n      throw new Error('Canvas context is not supported.');\n    }\n\n    context.drawImage(image, 0, 0);\n    return canvas;\n  });\n  return _draw.apply(this, arguments);\n}\n\nfunction newCanvas(element, options) {\n  var canvas = document.createElement('canvas');\n  canvas.width = options.width || util.getWidthForElement(element);\n  canvas.height = options.height || util.getHeightForElement(element);\n\n  if (options.bgcolor) {\n    var ctx = canvas.getContext('2d');\n\n    if (ctx) {\n      ctx.fillStyle = options.bgcolor;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n  }\n\n  return canvas;\n}\n\nfunction getDeepCopyForElement(_x13) {\n  return _getDeepCopyForElement.apply(this, arguments);\n}\n\nfunction _getDeepCopyForElement() {\n  _getDeepCopyForElement = _asyncToGenerator(function* (element) {\n    if (element instanceof HTMLCanvasElement) {\n      var dataURL = element.toDataURL();\n      return util.getImageElementFromURIAsync(dataURL);\n    }\n\n    return element.cloneNode(false);\n  });\n  return _getDeepCopyForElement.apply(this, arguments);\n}\n\nfunction cloneElement(_x14) {\n  return _cloneElement.apply(this, arguments);\n}\n\nfunction _cloneElement() {\n  _cloneElement = _asyncToGenerator(function* (element) {\n    var clonedNode = yield getDeepCopyForElement(element);\n    var clone = yield cloneChildren(element, clonedNode);\n    return yield processClone(element, clone);\n  });\n  return _cloneElement.apply(this, arguments);\n}\n\nfunction cloneChildren(_x15, _x16) {\n  return _cloneChildren.apply(this, arguments);\n}\n\nfunction _cloneChildren() {\n  _cloneChildren = _asyncToGenerator(function* (_ref3, clone) {\n    var {\n      childNodes\n    } = _ref3;\n    var children = Array.from(childNodes);\n\n    if (children.length === 0) {\n      return clone;\n    }\n\n    for (var child of children) {\n      var childClone = yield cloneElement(child);\n\n      if (childClone) {\n        clone.appendChild(childClone);\n      }\n    }\n\n    return clone;\n  });\n  return _cloneChildren.apply(this, arguments);\n}\n\nfunction processClone(_x17, _x18) {\n  return _processClone.apply(this, arguments);\n}\n\nfunction _processClone() {\n  _processClone = _asyncToGenerator(function* (original, clone) {\n    if (!(clone instanceof HTMLElement)) {\n      return clone;\n    }\n\n    var source = window.getComputedStyle(original);\n    var target = clone.style;\n\n    if (source.cssText) {\n      target.cssText = source.cssText;\n    } else {\n      for (var prop in source) {\n        var name = source[prop];\n        target.setProperty(name, source.getPropertyValue(name), source.getPropertyPriority(name));\n      }\n    }\n\n    clonePseudoElement(':before', original, clone);\n    clonePseudoElement(':after', original, clone);\n    mutateInputElement(original, clone);\n    mutateSVGElementClone(clone);\n    return clone;\n  });\n  return _processClone.apply(this, arguments);\n}\n\nfunction clonePseudoElement(element, original, clone) {\n  var style = window.getComputedStyle(original, element);\n  var content = style.getPropertyValue('content');\n\n  if (content === '' || content === 'none') {\n    return;\n  }\n\n  var className = uuidv4();\n  clone.className = \"\".concat(clone.className, \" \").concat(className);\n  var styleElement = document.createElement('style');\n  styleElement.appendChild(formatPseudoElementStyle(className, element, style));\n  clone.appendChild(styleElement);\n}\n\nfunction formatPseudoElementStyle(className, element, style) {\n  var selector = \".\".concat(className, \":\").concat(element);\n  var cssText = style.cssText ? formatCSSText(style) : formatCSSProperties(style);\n  return document.createTextNode(\"\".concat(selector, \"{\").concat(cssText, \"}\"));\n}\n\nfunction formatCSSText(style) {\n  var content = style.getPropertyValue('content');\n  return \"\".concat(style.cssText, \" content: \").concat(content, \";\");\n}\n\nfunction formatCSSProperties(style) {\n  var parsed = Array.from(style).map(name => formatProperty(name, style)).join('; ');\n  return \"\".concat(parsed, \";\");\n}\n\nfunction formatProperty(name, style) {\n  return \"\".concat(name, \": \").concat(style.getPropertyValue(name)).concat(style.getPropertyPriority(name) ? ' !important' : '');\n}\n\nfunction mutateInputElement(element, clone) {\n  if (element instanceof HTMLTextAreaElement) {\n    clone.innerHTML = element.value;\n  }\n\n  if (element instanceof HTMLInputElement) {\n    clone.setAttribute('value', element.value);\n  }\n}\n\nfunction mutateSVGElementClone(element) {\n  if (!(element instanceof SVGElement)) {\n    return;\n  }\n\n  element.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n\n  if (element instanceof SVGRectElement) {\n    for (var attribute of ['width', 'height']) {\n      var value = element.getAttribute(attribute);\n\n      if (!value) {\n        continue;\n      }\n\n      element.style.setProperty(attribute, value);\n    }\n  }\n}\n\nfunction makeSVGDataURIAsync(_x19, _x20, _x21) {\n  return _makeSVGDataURIAsync.apply(this, arguments);\n}\n\nfunction _makeSVGDataURIAsync() {\n  _makeSVGDataURIAsync = _asyncToGenerator(function* (element, width, height) {\n    element.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');\n    var serializedNode = new XMLSerializer().serializeToString(element);\n    var xhtml = util.getEscapedXHTMLString(serializedNode);\n    var foreignObject = \"<foreignObject x=\\\"0\\\" y=\\\"0\\\" width=\\\"100%\\\" height=\\\"100%\\\">\".concat(xhtml, \"</foreignObject>\");\n    var svg = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"\".concat(width, \"\\\" height=\\\"\").concat(height, \"\\\">\").concat(foreignObject, \"</svg>\");\n    return \"data:image/svg+xml;charset=utf-8,\".concat(svg);\n  });\n  return _makeSVGDataURIAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../../src/takeSnapshotAsync/Creator.web.ts"],"names":[],"mappings":";;;;;;;;;;AACA,OAAO,MAAP,MAAmB,SAAnB;AAEA,SAAS,yBAAT;AACA,SAAS,qBAAT;AACA,OAAO,KAAK,IAAZ;;SAce,gB;;;;;wCAAf,WACE,OADF,EAEoD;AAAA,QAAlD;AAAE,MAAA,KAAF;AAAS,MAAA,MAAT;AAAiB,MAAA,OAAjB;AAA0B,MAAA;AAA1B,KAAkD,uEAAF,EAAE;AAElD,QAAM,KAAK,SAAS,YAAY,CAAC,OAAD,CAAhC;;AAEA,QAAI,KAAK,KAAK,SAAd,EAAyB;AACvB,YAAM,IAAI,KAAJ,CAAU,2BAAV,CAAN;AACD;;AAED,UAAM,OAAO,CAAC,GAAR,CAAY,CAAC,yBAAyB,CAAC,KAAD,CAA1B,EAAmC,qBAAqB,CAAC,KAAD,CAAxD,CAAZ,CAAN;;AAEA,QAAI,OAAJ,EAAa;AACX,MAAA,KAAK,CAAC,KAAN,CAAY,eAAZ,GAA8B,OAA9B;AACD;;AAED,QAAI,KAAJ,EAAW;AACT,MAAA,KAAK,CAAC,KAAN,CAAY,KAAZ,aAAuB,KAAvB;AACD;;AACD,QAAI,MAAJ,EAAY;AACV,MAAA,KAAK,CAAC,KAAN,CAAY,MAAZ,aAAwB,MAAxB;AACD;;AAED,QAAI,KAAJ,EAAW;AACT,eAAc,KAAK,CAAC,KAApB,EAA2B,KAA3B;AACD;;AAED,QAAM,UAAU,SAAS,mBAAmB,CAC1C,KAD0C,EAE1C,KAAK,IAAI,IAAI,CAAC,kBAAL,CAAwB,OAAxB,CAFiC,EAG1C,MAAM,IAAI,IAAI,CAAC,mBAAL,CAAyB,OAAzB,CAHgC,CAA5C;AAKA,WAAO,UAAP;AACD,G;;;;AAED,gBAAsB,cAAtB;AAAA;AAAA;;;sCAAO,WAA8B,OAA9B,EAAwE;AAAA,QAAxB,OAAwB,uEAAF,EAAE;AAC7E,iBAAa,gBAAgB,CAAC,OAAD,EAAU,OAAV,CAA7B;AACD,G;;;;AAED,gBAAsB,oBAAtB;AAAA;AAAA;;;4CAAO,WACL,OADK,EAEL,OAFK,EAEkB;AAEvB,QAAM,MAAM,SAAS,IAAI,CAAC,OAAD,EAAU,OAAV,CAAzB;AAEA,QAAM,OAAO,GAAG,MAAM,CAAC,UAAP,CAAkB,IAAlB,CAAhB;;AACA,QAAI,CAAC,OAAL,EAAc;AACZ,YAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN;AACD;;AAED,WAAO,OAAO,CAAC,YAAR,CACL,CADK,EAEL,CAFK,EAGL,IAAI,CAAC,kBAAL,CAAwB,OAAxB,CAHK,EAIL,IAAI,CAAC,mBAAL,CAAyB,OAAzB,CAJK,EAKL,IALF;AAMD,G;;;;AAED,gBAAsB,cAAtB;AAAA;AAAA;;;sCAAO,WAA8B,OAA9B,EAAgD,OAAhD,EAAuE;AAC5E,QAAM,MAAM,SAAS,IAAI,CAAC,OAAD,EAAU,OAAV,CAAzB;AACA,iBAAa,MAAM,CAAC,SAAP,CAAiB,WAAjB,CAAb;AACD,G;;;;AAED,gBAAsB,eAAtB;AAAA;AAAA;;;uCAAO,WACL,OADK,QAEkC;AAAA,QAAvC;AAAE,MAAA;AAAF,KAAuC;AAAA,QAAzB,OAAyB;;AAEvC,QAAM,MAAM,SAAS,IAAI,CAAC,OAAD,EAAU,OAAV,CAAzB;AACA,iBAAa,MAAM,CAAC,SAAP,CAAiB,YAAjB,EAA+B,OAA/B,CAAb;AACD,G;;;;AAED,gBAAsB,eAAtB;AAAA;AAAA;;;uCAAO,WACL,OADK,SAEkC;AAAA,QAAvC;AAAE,MAAA;AAAF,KAAuC;AAAA,QAAzB,OAAyB;;AAEvC,QAAM,MAAM,SAAS,IAAI,CAAC,OAAD,EAAU,OAAV,CAAzB;AACA,iBAAa,IAAI,CAAC,sBAAL,CAA4B,MAA5B,EAAoC,OAApC,CAAb;AACD,G;;;;SAEc,I;;;;;4BAAf,WACE,OADF,EAEE,OAFF,EAOG;AAED,QAAM,OAAO,SAAS,gBAAgB,CAAC,OAAD,EAAU,OAAV,CAAtC;AACA,QAAM,KAAK,SAAS,IAAI,CAAC,2BAAL,CAAiC,OAAjC,CAApB;AAEA,QAAM,MAAM,GAAG,SAAS,CAAC,OAAD,EAAU,OAAV,CAAxB;AACA,QAAM,OAAO,GAAG,MAAM,CAAC,UAAP,CAAkB,IAAlB,CAAhB;;AACA,QAAI,CAAC,OAAL,EAAc;AACZ,YAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN;AACD;;AACD,IAAA,OAAO,CAAC,SAAR,CAAkB,KAAlB,EAAyB,CAAzB,EAA4B,CAA5B;AACA,WAAO,MAAP;AACD,G;;;;AAED,SAAS,SAAT,CACE,OADF,EAEE,OAFF,EAEiG;AAE/F,MAAM,MAAM,GAAsB,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAlC;AACA,EAAA,MAAM,CAAC,KAAP,GAAe,OAAO,CAAC,KAAR,IAAiB,IAAI,CAAC,kBAAL,CAAwB,OAAxB,CAAhC;AACA,EAAA,MAAM,CAAC,MAAP,GAAgB,OAAO,CAAC,MAAR,IAAkB,IAAI,CAAC,mBAAL,CAAyB,OAAzB,CAAlC;;AAEA,MAAI,OAAO,CAAC,OAAZ,EAAqB;AACnB,QAAM,GAAG,GAAG,MAAM,CAAC,UAAP,CAAkB,IAAlB,CAAZ;;AACA,QAAI,GAAJ,EAAS;AACP,MAAA,GAAG,CAAC,SAAJ,GAAgB,OAAO,CAAC,OAAxB;AACA,MAAA,GAAG,CAAC,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmB,MAAM,CAAC,KAA1B,EAAiC,MAAM,CAAC,MAAxC;AACD;AACF;;AAED,SAAO,MAAP;AACD;;SAEc,qB;;;;;6CAAf,WACE,OADF,EACsC;AAEpC,QAAI,OAAO,YAAY,iBAAvB,EAA0C;AACxC,UAAM,OAAO,GAAG,OAAO,CAAC,SAAR,EAAhB;AACA,aAAO,IAAI,CAAC,2BAAL,CAAiC,OAAjC,CAAP;AACD;;AACD,WAAO,OAAO,CAAC,SAAR,CAAkB,KAAlB,CAAP;AACD,G;;;;SAEc,Y;;;;;oCAAf,WACE,OADF,EACsC;AAEpC,QAAM,UAAU,SAAS,qBAAqB,CAAC,OAAD,CAA9C;AACA,QAAM,KAAK,SAAS,aAAa,CAAC,OAAD,EAAU,UAAV,CAAjC;AACA,iBAAa,YAAY,CAAC,OAAD,EAAU,KAAV,CAAzB;AACD,G;;;;SAEc,a;;;;;qCAAf,kBAEE,KAFF,EAEgC;AAAA,QAD9B;AAAE,MAAA;AAAF,KAC8B;AAE9B,QAAM,QAAQ,GAAU,KAAK,CAAC,IAAN,CAAW,UAAX,CAAxB;;AACA,QAAI,QAAQ,CAAC,MAAT,KAAoB,CAAxB,EAA2B;AACzB,aAAO,KAAP;AACD;;AAED,SAAK,IAAM,KAAX,IAAoB,QAApB,EAA8B;AAC5B,UAAM,UAAU,SAAS,YAAY,CAAC,KAAD,CAArC;;AACA,UAAI,UAAJ,EAAgB;AACd,QAAA,KAAK,CAAC,WAAN,CAAkB,UAAlB;AACD;AACF;;AAED,WAAO,KAAP;AACD,G;;;;SACc,Y;;;;;oCAAf,WAA4B,QAA5B,EAA+C,KAA/C,EAAiE;AAC/D,QAAI,EAAE,KAAK,YAAY,WAAnB,CAAJ,EAAqC;AAEnC,aAAO,KAAP;AACD;;AAED,QAAM,MAAM,GAAG,MAAM,CAAC,gBAAP,CAAwB,QAAxB,CAAf;AACA,QAAM,MAAM,GAAG,KAAK,CAAC,KAArB;;AAEA,QAAI,MAAM,CAAC,OAAX,EAAoB;AAClB,MAAA,MAAM,CAAC,OAAP,GAAiB,MAAM,CAAC,OAAxB;AACD,KAFD,MAEO;AACL,WAAK,IAAM,IAAX,IAAmB,MAAnB,EAA2B;AACzB,YAAM,IAAI,GAAG,MAAM,CAAC,IAAD,CAAnB;AACA,QAAA,MAAM,CAAC,WAAP,CAAmB,IAAnB,EAAyB,MAAM,CAAC,gBAAP,CAAwB,IAAxB,CAAzB,EAAwD,MAAM,CAAC,mBAAP,CAA2B,IAA3B,CAAxD;AACD;AACF;;AAED,IAAA,kBAAkB,CAAC,SAAD,EAAY,QAAZ,EAAsB,KAAtB,CAAlB;AACA,IAAA,kBAAkB,CAAC,QAAD,EAAW,QAAX,EAAqB,KAArB,CAAlB;AACA,IAAA,kBAAkB,CAAC,QAAD,EAAW,KAAX,CAAlB;AACA,IAAA,qBAAqB,CAAC,KAAD,CAArB;AACA,WAAO,KAAP;AACD,G;;;;AAED,SAAS,kBAAT,CAA4B,OAA5B,EAA6C,QAA7C,EAAgE,KAAhE,EAAkF;AAChF,MAAM,KAAK,GAAG,MAAM,CAAC,gBAAP,CAAwB,QAAxB,EAAkC,OAAlC,CAAd;AACA,MAAM,OAAO,GAAG,KAAK,CAAC,gBAAN,CAAuB,SAAvB,CAAhB;;AAEA,MAAI,OAAO,KAAK,EAAZ,IAAkB,OAAO,KAAK,MAAlC,EAA0C;AACxC;AACD;;AAED,MAAM,SAAS,GAAG,MAAM,EAAxB;AACA,EAAA,KAAK,CAAC,SAAN,aAAqB,KAAK,CAAC,SAA3B,cAAwC,SAAxC;AACA,MAAM,YAAY,GAAG,QAAQ,CAAC,aAAT,CAAuB,OAAvB,CAArB;AACA,EAAA,YAAY,CAAC,WAAb,CAAyB,wBAAwB,CAAC,SAAD,EAAY,OAAZ,EAAqB,KAArB,CAAjD;AACA,EAAA,KAAK,CAAC,WAAN,CAAkB,YAAlB;AACD;;AAED,SAAS,wBAAT,CACE,SADF,EAEE,OAFF,EAGE,KAHF,EAG4B;AAE1B,MAAM,QAAQ,cAAO,SAAP,cAAoB,OAApB,CAAd;AACA,MAAM,OAAO,GAAG,KAAK,CAAC,OAAN,GAAgB,aAAa,CAAC,KAAD,CAA7B,GAAuC,mBAAmB,CAAC,KAAD,CAA1E;AACA,SAAO,QAAQ,CAAC,cAAT,WAA2B,QAA3B,cAAuC,OAAvC,OAAP;AACD;;AAED,SAAS,aAAT,CAAuB,KAAvB,EAAiD;AAC/C,MAAM,OAAO,GAAG,KAAK,CAAC,gBAAN,CAAuB,SAAvB,CAAhB;AACA,mBAAU,KAAK,CAAC,OAAhB,uBAAoC,OAApC;AACD;;AAED,SAAS,mBAAT,CAA6B,KAA7B,EAAuD;AACrD,MAAM,MAAM,GAAG,KAAK,CAAC,IAAN,CAAW,KAAX,EACZ,GADY,CACR,IAAI,IAAI,cAAc,CAAC,IAAD,EAAO,KAAP,CADd,EAEZ,IAFY,CAEP,IAFO,CAAf;AAIA,mBAAU,MAAV;AACD;;AAED,SAAS,cAAT,CAAwB,IAAxB,EAAsC,KAAtC,EAAgE;AAC9D,mBAAU,IAAV,eAAmB,KAAK,CAAC,gBAAN,CAAuB,IAAvB,CAAnB,SACE,KAAK,CAAC,mBAAN,CAA0B,IAA1B,IAAkC,aAAlC,GAAkD,EADpD;AAGD;;AAED,SAAS,kBAAT,CAA4B,OAA5B,EAA8C,KAA9C,EAAgE;AAC9D,MAAI,OAAO,YAAY,mBAAvB,EAA4C;AAC1C,IAAA,KAAK,CAAC,SAAN,GAAkB,OAAO,CAAC,KAA1B;AACD;;AACD,MAAI,OAAO,YAAY,gBAAvB,EAAyC;AACvC,IAAA,KAAK,CAAC,YAAN,CAAmB,OAAnB,EAA4B,OAAO,CAAC,KAApC;AACD;AACF;;AAED,SAAS,qBAAT,CAA+B,OAA/B,EAAmD;AACjD,MAAI,EAAE,OAAO,YAAY,UAArB,CAAJ,EAAsC;AACpC;AACD;;AACD,EAAA,OAAO,CAAC,YAAR,CAAqB,OAArB,EAA8B,4BAA9B;;AAEA,MAAI,OAAO,YAAY,cAAvB,EAAuC;AACrC,SAAK,IAAM,SAAX,IAAwB,CAAC,OAAD,EAAU,QAAV,CAAxB,EAA6C;AAC3C,UAAM,KAAK,GAAG,OAAO,CAAC,YAAR,CAAqB,SAArB,CAAd;;AACA,UAAI,CAAC,KAAL,EAAY;AACV;AACD;;AACD,MAAA,OAAO,CAAC,KAAR,CAAc,WAAd,CAA0B,SAA1B,EAAqC,KAArC;AACD;AACF;AACF;;SAEc,mB;;;;;2CAAf,WACE,OADF,EAEE,KAFF,EAGE,MAHF,EAGgB;AAEd,IAAA,OAAO,CAAC,YAAR,CAAqB,OAArB,EAA8B,8BAA9B;AAEA,QAAM,cAAc,GAAW,IAAI,aAAJ,GAAoB,iBAApB,CAAsC,OAAtC,CAA/B;AACA,QAAM,KAAK,GAAW,IAAI,CAAC,qBAAL,CAA2B,cAA3B,CAAtB;AAEA,QAAM,aAAa,2EAA4D,KAA5D,qBAAnB;AACA,QAAM,GAAG,+DAAqD,KAArD,yBAAuE,MAAvE,gBAAkF,aAAlF,WAAT;AACA,sDAA2C,GAA3C;AACD,G","sourcesContent":["import { CaptureOptions } from 'react-native-view-shot';\nimport uuidv4 from 'uuid/v4';\n\nimport { batchResolveAllFontsAsync } from './Fonts.web';\nimport { processAllImagesAsync } from './Images.web';\nimport * as util from './Utils.web';\n\ntype FillStyle = string | CanvasGradient | CanvasPattern;\n\ninterface SVGOptions {\n  bgcolor?: FillStyle;\n  width?: number;\n  height?: number;\n  style?: any;\n  quality?: number;\n  missingImageSource?: string;\n  preventCaching?: boolean;\n}\n\nasync function generateSVGAsync(\n  element: Element,\n  { width, height, bgcolor, style }: SVGOptions = {}\n): Promise<string> {\n  const clone = await cloneElement(element);\n\n  if (clone === undefined) {\n    throw new Error('Cannot clone null element');\n  }\n\n  await Promise.all([batchResolveAllFontsAsync(clone), processAllImagesAsync(clone)]);\n\n  if (bgcolor) {\n    clone.style.backgroundColor = bgcolor as string;\n  }\n\n  if (width) {\n    clone.style.width = `${width}px`;\n  }\n  if (height) {\n    clone.style.height = `${height}px`;\n  }\n\n  if (style) {\n    Object.assign(clone.style, style);\n  }\n\n  const svgDataUri = await makeSVGDataURIAsync(\n    clone,\n    width || util.getWidthForElement(element),\n    height || util.getHeightForElement(element)\n  );\n  return svgDataUri;\n}\n\nexport async function createSVGAsync(element: Element, options: SVGOptions = {}): Promise<string> {\n  return await generateSVGAsync(element, options);\n}\n\nexport async function createPixelDataAsync(\n  element: Element,\n  options: CaptureOptions\n): Promise<Uint8ClampedArray> {\n  const canvas = await draw(element, options);\n\n  const context = canvas.getContext('2d');\n  if (!context) {\n    throw new Error('Canvas context is not supported.');\n  }\n\n  return context.getImageData(\n    0,\n    0,\n    util.getWidthForElement(element),\n    util.getHeightForElement(element)\n  ).data;\n}\n\nexport async function createPNGAsync(element: Element, options: CaptureOptions): Promise<string> {\n  const canvas = await draw(element, options);\n  return await canvas.toDataURL('image/png');\n}\n\nexport async function createJPEGAsync(\n  element: Element,\n  { quality, ...options }: CaptureOptions\n): Promise<string> {\n  const canvas = await draw(element, options);\n  return await canvas.toDataURL('image/jpeg', quality);\n}\n\nexport async function createBlobAsync(\n  element: Element,\n  { quality, ...options }: CaptureOptions\n): Promise<Blob> {\n  const canvas = await draw(element, options);\n  return await util.getBlobFromCanvasAsync(canvas, quality);\n}\n\nasync function draw(\n  element: Element,\n  options: {\n    width?: number;\n    height?: number;\n    bgcolor?: string | CanvasGradient | CanvasPattern;\n    [key: string]: any;\n  }\n): Promise<HTMLCanvasElement> {\n  const fromSVG = await generateSVGAsync(element, options);\n  const image = await util.getImageElementFromURIAsync(fromSVG);\n\n  const canvas = newCanvas(element, options);\n  const context = canvas.getContext('2d');\n  if (!context) {\n    throw new Error('Canvas context is not supported.');\n  }\n  context.drawImage(image, 0, 0);\n  return canvas;\n}\n\nfunction newCanvas(\n  element: Element,\n  options: { width?: number; height?: number; bgcolor?: string | CanvasGradient | CanvasPattern }\n) {\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = options.width || util.getWidthForElement(element);\n  canvas.height = options.height || util.getHeightForElement(element);\n\n  if (options.bgcolor) {\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      ctx.fillStyle = options.bgcolor;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n  }\n\n  return canvas;\n}\n\nasync function getDeepCopyForElement(\n  element: HTMLCanvasElement | Element\n): Promise<HTMLImageElement | Node> {\n  if (element instanceof HTMLCanvasElement) {\n    const dataURL = element.toDataURL();\n    return util.getImageElementFromURIAsync(dataURL);\n  }\n  return element.cloneNode(false);\n}\n\nasync function cloneElement(\n  element: HTMLCanvasElement | Element\n): Promise<HTMLElement | undefined> {\n  const clonedNode = await getDeepCopyForElement(element);\n  const clone = await cloneChildren(element, clonedNode);\n  return await processClone(element, clone as any);\n}\n\nasync function cloneChildren(\n  { childNodes },\n  clone: HTMLImageElement | Node\n): Promise<HTMLElement | Node> {\n  const children: any[] = Array.from(childNodes);\n  if (children.length === 0) {\n    return clone;\n  }\n\n  for (const child of children) {\n    const childClone = await cloneElement(child);\n    if (childClone) {\n      clone.appendChild(childClone);\n    }\n  }\n\n  return clone;\n}\nasync function processClone(original: Element, clone: HTMLElement): Promise<HTMLElement | any> {\n  if (!(clone instanceof HTMLElement)) {\n    // TODO: Bacon: Avoid or throw error\n    return clone;\n  }\n\n  const source = window.getComputedStyle(original);\n  const target = clone.style;\n\n  if (source.cssText) {\n    target.cssText = source.cssText;\n  } else {\n    for (const prop in source) {\n      const name = source[prop];\n      target.setProperty(name, source.getPropertyValue(name), source.getPropertyPriority(name));\n    }\n  }\n\n  clonePseudoElement(':before', original, clone);\n  clonePseudoElement(':after', original, clone);\n  mutateInputElement(original, clone);\n  mutateSVGElementClone(clone);\n  return clone;\n}\n\nfunction clonePseudoElement(element: string, original: Element, clone: HTMLElement): void {\n  const style = window.getComputedStyle(original, element);\n  const content = style.getPropertyValue('content');\n\n  if (content === '' || content === 'none') {\n    return;\n  }\n\n  const className = uuidv4();\n  clone.className = `${clone.className} ${className}`;\n  const styleElement = document.createElement('style');\n  styleElement.appendChild(formatPseudoElementStyle(className, element, style));\n  clone.appendChild(styleElement);\n}\n\nfunction formatPseudoElementStyle(\n  className: string,\n  element: string,\n  style: CSSStyleDeclaration\n): Text {\n  const selector = `.${className}:${element}`;\n  const cssText = style.cssText ? formatCSSText(style) : formatCSSProperties(style);\n  return document.createTextNode(`${selector}{${cssText}}`);\n}\n\nfunction formatCSSText(style: CSSStyleDeclaration): string {\n  const content = style.getPropertyValue('content');\n  return `${style.cssText} content: ${content};`;\n}\n\nfunction formatCSSProperties(style: CSSStyleDeclaration): string {\n  const parsed = Array.from(style)\n    .map(name => formatProperty(name, style))\n    .join('; ');\n\n  return `${parsed};`;\n}\n\nfunction formatProperty(name: string, style: CSSStyleDeclaration): string {\n  return `${name}: ${style.getPropertyValue(name)}${\n    style.getPropertyPriority(name) ? ' !important' : ''\n  }`;\n}\n\nfunction mutateInputElement(element: Element, clone: HTMLElement): void {\n  if (element instanceof HTMLTextAreaElement) {\n    clone.innerHTML = element.value;\n  }\n  if (element instanceof HTMLInputElement) {\n    clone.setAttribute('value', element.value);\n  }\n}\n\nfunction mutateSVGElementClone(element: HTMLElement): void {\n  if (!(element instanceof SVGElement)) {\n    return;\n  }\n  element.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n\n  if (element instanceof SVGRectElement) {\n    for (const attribute of ['width', 'height']) {\n      const value = element.getAttribute(attribute);\n      if (!value) {\n        continue;\n      }\n      element.style.setProperty(attribute, value);\n    }\n  }\n}\n\nasync function makeSVGDataURIAsync(\n  element: HTMLElement,\n  width: number,\n  height: number\n): Promise<string> {\n  element.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');\n\n  const serializedNode: string = new XMLSerializer().serializeToString(element);\n  const xhtml: string = util.getEscapedXHTMLString(serializedNode);\n\n  const foreignObject = `<foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">${xhtml}</foreignObject>`;\n  const svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${width}\" height=\"${height}\">${foreignObject}</svg>`;\n  return `data:image/svg+xml;charset=utf-8,${svg}`;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}