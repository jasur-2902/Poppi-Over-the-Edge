{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jshukurov\\\\Desktop\\\\Poppi Over The Edge\\\\Poppi-Over-the-Edge-master\\\\node_modules\\\\@expo\\\\vector-icons\\\\vendor\\\\react-native-vector-icons\\\\lib\\\\toolbar-android.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport isEqual from 'lodash/isEqual';\nimport pick from 'lodash/pick';\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolbarAndroid } from \"./react-native\";\nvar ICON_PROP_NAMES = ['iconSize', 'iconColor', 'titleColor'];\nvar LOGO_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'logoName'];\nvar NAV_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'navIconName'];\nvar OVERFLOW_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'overflowIconName'];\nvar ACTIONS_PROP_NAMES = [...ICON_PROP_NAMES, 'actions'];\n\nvar arePropsEqual = keys => (prevProps, nextProps) => isEqual(pick(prevProps, keys), pick(nextProps, keys));\n\nvar areLogoIconPropsEqual = arePropsEqual(LOGO_ICON_PROP_NAMES);\nvar areNavIconPropsEqual = arePropsEqual(NAV_ICON_PROP_NAMES);\nvar areOverflowIconPropsEqual = arePropsEqual(OVERFLOW_ICON_PROP_NAMES);\nvar areActionPropsEqual = arePropsEqual(ACTIONS_PROP_NAMES);\nexport default function createToolbarAndroidComponent(IconNamePropType, getImageSource) {\n  var _class, _temp;\n\n  return _temp = _class = class IconToolbarAndroid extends PureComponent {\n    constructor() {\n      super(...arguments);\n      this.state = {\n        logo: undefined,\n        navIcon: undefined,\n        overflowIcon: undefined,\n        actions: undefined\n      };\n    }\n\n    componentDidMount() {\n      this.updateLogoIconSource();\n      this.updateNavIconSource();\n      this.updateOverflowIconSource();\n      this.updateActionIconSources();\n    }\n\n    componentDidUpdate(prevProps) {\n      if (!areLogoIconPropsEqual(prevProps, this.props)) {\n        this.updateLogoIconSource();\n      }\n\n      if (!areNavIconPropsEqual(prevProps, this.props)) {\n        this.updateNavIconSource();\n      }\n\n      if (!areOverflowIconPropsEqual(prevProps, this.props)) {\n        this.updateOverflowIconSource();\n      }\n\n      if (!areActionPropsEqual(prevProps, this.props)) {\n        this.updateActionIconSources();\n      }\n    }\n\n    updateLogoIconSource() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        var {\n          logoName,\n          iconSize,\n          iconColor,\n          titleColor\n        } = _this.props;\n\n        if (logoName) {\n          var logo = yield getImageSource(logoName, iconSize, iconColor || titleColor);\n\n          _this.setState({\n            logo\n          });\n        } else if (_this.state.logo) {\n          _this.setState({\n            logo: undefined\n          });\n        }\n      })();\n    }\n\n    updateNavIconSource() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        var {\n          navIconName,\n          iconSize,\n          iconColor,\n          titleColor\n        } = _this2.props;\n\n        if (navIconName) {\n          var navIcon = yield getImageSource(navIconName, iconSize, iconColor || titleColor);\n\n          _this2.setState({\n            navIcon\n          });\n        } else if (_this2.state.navIcon) {\n          _this2.setState({\n            navIcon: undefined\n          });\n        }\n      })();\n    }\n\n    updateOverflowIconSource() {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        var {\n          overflowIconName,\n          iconSize,\n          iconColor,\n          titleColor\n        } = _this3.props;\n\n        if (overflowIconName) {\n          var overflowIcon = yield getImageSource(overflowIconName, iconSize, iconColor || titleColor);\n\n          _this3.setState({\n            overflowIcon\n          });\n        } else if (_this3.state.overflowIcon) {\n          _this3.setState({\n            overflowIcon: undefined\n          });\n        }\n      })();\n    }\n\n    updateActionIconSources() {\n      var _this4 = this;\n\n      return _asyncToGenerator(function* () {\n        var {\n          actions,\n          iconSize,\n          iconColor,\n          titleColor\n        } = _this4.props;\n        var updatedActions = yield Promise.all((actions || []).map(action => {\n          if (action.iconName) {\n            return getImageSource(action.iconName, action.iconSize || iconSize, action.iconColor || iconColor || titleColor).then(icon => _objectSpread(_objectSpread({}, action), {}, {\n              icon\n            }));\n          }\n\n          return Promise.resolve(action);\n        }));\n\n        _this4.setState({\n          actions: updatedActions\n        });\n      })();\n    }\n\n    render() {\n      return React.createElement(ToolbarAndroid, _extends({}, this.props, this.state, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 14\n        }\n      }));\n    }\n\n  }, _class.propTypes = {\n    logoName: IconNamePropType,\n    navIconName: IconNamePropType,\n    overflowIconName: IconNamePropType,\n    actions: PropTypes.arrayOf(PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      iconName: IconNamePropType,\n      iconSize: PropTypes.number,\n      iconColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      show: PropTypes.oneOf(['always', 'ifRoom', 'never']),\n      showWithText: PropTypes.bool\n    })),\n    iconSize: PropTypes.number,\n    iconColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    titleColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n  }, _class.defaultProps = {\n    iconSize: 24\n  }, _temp;\n}","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/@expo/vector-icons/vendor/react-native-vector-icons/lib/toolbar-android.js"],"names":["isEqual","pick","React","PureComponent","PropTypes","ToolbarAndroid","ICON_PROP_NAMES","LOGO_ICON_PROP_NAMES","NAV_ICON_PROP_NAMES","OVERFLOW_ICON_PROP_NAMES","ACTIONS_PROP_NAMES","arePropsEqual","keys","prevProps","nextProps","areLogoIconPropsEqual","areNavIconPropsEqual","areOverflowIconPropsEqual","areActionPropsEqual","createToolbarAndroidComponent","IconNamePropType","getImageSource","IconToolbarAndroid","state","logo","undefined","navIcon","overflowIcon","actions","componentDidMount","updateLogoIconSource","updateNavIconSource","updateOverflowIconSource","updateActionIconSources","componentDidUpdate","props","logoName","iconSize","iconColor","titleColor","setState","navIconName","overflowIconName","updatedActions","Promise","all","map","action","iconName","then","icon","resolve","render","propTypes","arrayOf","shape","title","string","isRequired","number","oneOfType","show","oneOf","showWithText","bool","defaultProps"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-unused-prop-types */\nimport isEqual from 'lodash/isEqual';\nimport pick from 'lodash/pick';\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolbarAndroid } from './react-native';\n\nconst ICON_PROP_NAMES = ['iconSize', 'iconColor', 'titleColor'];\nconst LOGO_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'logoName'];\nconst NAV_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'navIconName'];\nconst OVERFLOW_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'overflowIconName'];\nconst ACTIONS_PROP_NAMES = [...ICON_PROP_NAMES, 'actions'];\n\nconst arePropsEqual = keys => (prevProps, nextProps) =>\n  isEqual(pick(prevProps, keys), pick(nextProps, keys));\n\nconst areLogoIconPropsEqual = arePropsEqual(LOGO_ICON_PROP_NAMES);\nconst areNavIconPropsEqual = arePropsEqual(NAV_ICON_PROP_NAMES);\nconst areOverflowIconPropsEqual = arePropsEqual(OVERFLOW_ICON_PROP_NAMES);\nconst areActionPropsEqual = arePropsEqual(ACTIONS_PROP_NAMES);\n\nexport default function createToolbarAndroidComponent(\n  IconNamePropType,\n  getImageSource\n) {\n  return class IconToolbarAndroid extends PureComponent {\n    static propTypes = {\n      logoName: IconNamePropType,\n      navIconName: IconNamePropType,\n      overflowIconName: IconNamePropType,\n      actions: PropTypes.arrayOf(\n        PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          iconName: IconNamePropType,\n          iconSize: PropTypes.number,\n          iconColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n          show: PropTypes.oneOf(['always', 'ifRoom', 'never']),\n          showWithText: PropTypes.bool,\n        })\n      ),\n      iconSize: PropTypes.number,\n      iconColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      titleColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    };\n\n    static defaultProps = {\n      iconSize: 24,\n    };\n\n    state = {\n      logo: undefined,\n      navIcon: undefined,\n      overflowIcon: undefined,\n      actions: undefined,\n    };\n\n    componentDidMount() {\n      this.updateLogoIconSource();\n      this.updateNavIconSource();\n      this.updateOverflowIconSource();\n      this.updateActionIconSources();\n    }\n\n    componentDidUpdate(prevProps) {\n      if (!areLogoIconPropsEqual(prevProps, this.props)) {\n        this.updateLogoIconSource();\n      }\n      if (!areNavIconPropsEqual(prevProps, this.props)) {\n        this.updateNavIconSource();\n      }\n      if (!areOverflowIconPropsEqual(prevProps, this.props)) {\n        this.updateOverflowIconSource();\n      }\n      if (!areActionPropsEqual(prevProps, this.props)) {\n        this.updateActionIconSources();\n      }\n    }\n\n    async updateLogoIconSource() {\n      const { logoName, iconSize, iconColor, titleColor } = this.props;\n      if (logoName) {\n        const logo = await getImageSource(\n          logoName,\n          iconSize,\n          iconColor || titleColor\n        );\n        this.setState({ logo });\n        // eslint-disable-next-line react/destructuring-assignment\n      } else if (this.state.logo) {\n        this.setState({ logo: undefined });\n      }\n    }\n\n    async updateNavIconSource() {\n      const { navIconName, iconSize, iconColor, titleColor } = this.props;\n      if (navIconName) {\n        const navIcon = await getImageSource(\n          navIconName,\n          iconSize,\n          iconColor || titleColor\n        );\n        this.setState({ navIcon });\n        // eslint-disable-next-line react/destructuring-assignment\n      } else if (this.state.navIcon) {\n        this.setState({ navIcon: undefined });\n      }\n    }\n\n    async updateOverflowIconSource() {\n      const { overflowIconName, iconSize, iconColor, titleColor } = this.props;\n      if (overflowIconName) {\n        const overflowIcon = await getImageSource(\n          overflowIconName,\n          iconSize,\n          iconColor || titleColor\n        );\n        this.setState({ overflowIcon });\n        // eslint-disable-next-line react/destructuring-assignment\n      } else if (this.state.overflowIcon) {\n        this.setState({ overflowIcon: undefined });\n      }\n    }\n\n    async updateActionIconSources() {\n      const { actions, iconSize, iconColor, titleColor } = this.props;\n      const updatedActions = await Promise.all(\n        (actions || []).map(action => {\n          if (action.iconName) {\n            return getImageSource(\n              action.iconName,\n              action.iconSize || iconSize,\n              action.iconColor || iconColor || titleColor\n            ).then(icon => ({ ...action, icon }));\n          }\n          return Promise.resolve(action);\n        })\n      );\n      this.setState({ actions: updatedActions });\n    }\n\n    render() {\n      return <ToolbarAndroid {...this.props} {...this.state} />;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}