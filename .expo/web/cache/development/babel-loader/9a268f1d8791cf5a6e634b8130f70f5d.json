{"ast":null,"code":"import Platform from \"react-native-web/dist/exports/Platform\";\nimport { NativeModulesProxy } from 'expo-core';\nvar {\n  ExponentSegment\n} = NativeModulesProxy;\nexport default {\n  initialize(options) {\n    if (Platform.OS === 'android') {\n      ExponentSegment.initializeAndroid(options.androidWriteKey);\n    } else if (Platform.OS === 'ios') {\n      ExponentSegment.initializeIOS(options.iosWriteKey);\n    } else {\n      throw new Error(\"Unable to initialize Segment on `\".concat(Platform.OS, \"`\"));\n    }\n  },\n\n  identify(userId) {\n    ExponentSegment.identify(userId);\n  },\n\n  identifyWithTraits(userId, traits) {\n    ExponentSegment.identifyWithTraits(userId, traits);\n  },\n\n  group(groupId) {\n    ExponentSegment.group(groupId);\n  },\n\n  groupWithTraits(groupId, traits) {\n    ExponentSegment.groupWithTraits(groupId, traits);\n  },\n\n  alias(newId, options) {\n    return ExponentSegment.alias(newId, options);\n  },\n\n  reset() {\n    ExponentSegment.reset();\n  },\n\n  track(event) {\n    ExponentSegment.track(event);\n  },\n\n  trackWithProperties(event, properties) {\n    ExponentSegment.trackWithProperties(event, properties);\n  },\n\n  screen(screenName) {\n    ExponentSegment.screen(screenName);\n  },\n\n  screenWithProperties(event, properties) {\n    ExponentSegment.screenWithProperties(event, properties);\n  },\n\n  flush() {\n    ExponentSegment.flush();\n  },\n\n  getEnabledAsync() {\n    return new Promise((resolve, reject) => ExponentSegment.getEnabledAsync().then(isEnabledNumber => resolve(!!isEnabledNumber)).catch(reject));\n  },\n\n  setEnabledAsync(enabled) {\n    return ExponentSegment.setEnabledAsync(enabled);\n  }\n\n};","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/expo-analytics-segment/src/Segment.js"],"names":["NativeModulesProxy","ExponentSegment","initialize","options","Platform","OS","initializeAndroid","androidWriteKey","initializeIOS","iosWriteKey","Error","identify","userId","identifyWithTraits","traits","group","groupId","groupWithTraits","alias","newId","reset","track","event","trackWithProperties","properties","screen","screenName","screenWithProperties","flush","getEnabledAsync","Promise","resolve","reject","then","isEnabledNumber","catch","setEnabledAsync","enabled"],"mappings":";AAGA,SAASA,kBAAT,QAAmC,WAAnC;AAEA,IAAM;AAAEC,EAAAA;AAAF,IAAsBD,kBAA5B;AAEA,eAAe;AACbE,EAAAA,UAAU,CAACC,OAAD,EAAoE;AAC5E,QAAIC,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC7BJ,MAAAA,eAAe,CAACK,iBAAhB,CAAkCH,OAAO,CAACI,eAA1C;AACD,KAFD,MAEO,IAAIH,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AAChCJ,MAAAA,eAAe,CAACO,aAAhB,CAA8BL,OAAO,CAACM,WAAtC;AACD,KAFM,MAEA;AACL,YAAM,IAAIC,KAAJ,4CAA+CN,QAAQ,CAACC,EAAxD,OAAN;AACD;AACF,GATY;;AAWbM,EAAAA,QAAQ,CAACC,MAAD,EAAuB;AAC7BX,IAAAA,eAAe,CAACU,QAAhB,CAAyBC,MAAzB;AACD,GAbY;;AAebC,EAAAA,kBAAkB,CAACD,MAAD,EAAiBE,MAAjB,EAAkD;AAClEb,IAAAA,eAAe,CAACY,kBAAhB,CAAmCD,MAAnC,EAA2CE,MAA3C;AACD,GAjBY;;AAmBbC,EAAAA,KAAK,CAACC,OAAD,EAAwB;AAC3Bf,IAAAA,eAAe,CAACc,KAAhB,CAAsBC,OAAtB;AACD,GArBY;;AAuBbC,EAAAA,eAAe,CAACD,OAAD,EAAkBF,MAAlB,EAAmD;AAChEb,IAAAA,eAAe,CAACgB,eAAhB,CAAgCD,OAAhC,EAAyCF,MAAzC;AACD,GAzBY;;AA2BbI,EAAAA,KAAK,CAACC,KAAD,EAAgBhB,OAAhB,EAA+D;AAClE,WAAOF,eAAe,CAACiB,KAAhB,CAAsBC,KAAtB,EAA6BhB,OAA7B,CAAP;AACD,GA7BY;;AA+BbiB,EAAAA,KAAK,GAAS;AACZnB,IAAAA,eAAe,CAACmB,KAAhB;AACD,GAjCY;;AAmCbC,EAAAA,KAAK,CAACC,KAAD,EAAsB;AACzBrB,IAAAA,eAAe,CAACoB,KAAhB,CAAsBC,KAAtB;AACD,GArCY;;AAuCbC,EAAAA,mBAAmB,CAACD,KAAD,EAAgBE,UAAhB,EAAqD;AACtEvB,IAAAA,eAAe,CAACsB,mBAAhB,CAAoCD,KAApC,EAA2CE,UAA3C;AACD,GAzCY;;AA2CbC,EAAAA,MAAM,CAACC,UAAD,EAA2B;AAC/BzB,IAAAA,eAAe,CAACwB,MAAhB,CAAuBC,UAAvB;AACD,GA7CY;;AA+CbC,EAAAA,oBAAoB,CAACL,KAAD,EAAgBE,UAAhB,EAA0C;AAC5DvB,IAAAA,eAAe,CAAC0B,oBAAhB,CAAqCL,KAArC,EAA4CE,UAA5C;AACD,GAjDY;;AAmDbI,EAAAA,KAAK,GAAS;AACZ3B,IAAAA,eAAe,CAAC2B,KAAhB;AACD,GArDY;;AAuDbC,EAAAA,eAAe,GAAqB;AAClC,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KACjB/B,eAAe,CAAC4B,eAAhB,GACGI,IADH,CACQC,eAAe,IAAIH,OAAO,CAAC,CAAC,CAACG,eAAH,CADlC,EAEGC,KAFH,CAESH,MAFT,CADK,CAAP;AAKD,GA7DY;;AA+DbI,EAAAA,eAAe,CAACC,OAAD,EAAkC;AAC/C,WAAOpC,eAAe,CAACmC,eAAhB,CAAgCC,OAAhC,CAAP;AACD;;AAjEY,CAAf","sourcesContent":["// @flow\n\nimport { Platform } from 'react-native';\nimport { NativeModulesProxy } from 'expo-core';\n\nconst { ExponentSegment } = NativeModulesProxy;\n\nexport default {\n  initialize(options: { androidWriteKey?: string, iosWriteKey?: string }): void {\n    if (Platform.OS === 'android') {\n      ExponentSegment.initializeAndroid(options.androidWriteKey);\n    } else if (Platform.OS === 'ios') {\n      ExponentSegment.initializeIOS(options.iosWriteKey);\n    } else {\n      throw new Error(`Unable to initialize Segment on \\`${Platform.OS}\\``);\n    }\n  },\n\n  identify(userId: string): void {\n    ExponentSegment.identify(userId);\n  },\n\n  identifyWithTraits(userId: string, traits: { [string]: any }): void {\n    ExponentSegment.identifyWithTraits(userId, traits);\n  },\n\n  group(groupId: string): void {\n    ExponentSegment.group(groupId);\n  },\n\n  groupWithTraits(groupId: string, traits: { [string]: any }): void {\n    ExponentSegment.groupWithTraits(groupId, traits);\n  },\n\n  alias(newId: string, options: ?{ [string]: any }): Promise<boolean> {\n    return ExponentSegment.alias(newId, options);\n  },\n\n  reset(): void {\n    ExponentSegment.reset();\n  },\n\n  track(event: string): void {\n    ExponentSegment.track(event);\n  },\n\n  trackWithProperties(event: string, properties: { [string]: any }): void {\n    ExponentSegment.trackWithProperties(event, properties);\n  },\n\n  screen(screenName: string): void {\n    ExponentSegment.screen(screenName);\n  },\n\n  screenWithProperties(event: string, properties: string): void {\n    ExponentSegment.screenWithProperties(event, properties);\n  },\n\n  flush(): void {\n    ExponentSegment.flush();\n  },\n\n  getEnabledAsync(): Promise<boolean> {\n    return new Promise((resolve, reject) =>\n      ExponentSegment.getEnabledAsync()\n        .then(isEnabledNumber => resolve(!!isEnabledNumber))\n        .catch(reject)\n    );\n  },\n\n  setEnabledAsync(enabled: boolean): Promise<void> {\n    return ExponentSegment.setEnabledAsync(enabled);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}