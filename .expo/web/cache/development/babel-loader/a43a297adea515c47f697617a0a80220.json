{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { UnavailabilityError } from '@unimodules/core';\nexport default {\n  get name() {\n    return 'ExpoSharing';\n  },\n\n  isAvailableAsync() {\n    return Promise.resolve(!!navigator.share);\n  },\n\n  shareAsync(url) {\n    var _arguments = arguments;\n    return _asyncToGenerator(function* () {\n      var options = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : {};\n      var sharingNavigator = navigator;\n\n      if (sharingNavigator.share) {\n        return yield sharingNavigator.share(_objectSpread({}, options, {\n          url\n        }));\n      } else {\n        throw new UnavailabilityError('navigator', 'share');\n      }\n    })();\n  }\n\n};","map":{"version":3,"sources":["../src/ExpoSharing.web.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,SAAS,mBAAT,QAAoC,kBAApC;AAUA,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,aAAP;AACD,GAHY;;AAIb,EAAA,gBAAgB,GAAA;AACd,WAAO,OAAO,CAAC,OAAR,CAAgB,CAAC,CAAE,SAAuB,CAAC,KAA3C,CAAP;AACD,GANY;;AAOP,EAAA,UAAN,CAAiB,GAAjB,EAAwD;AAAA;AAAA;AAAA,UAA1B,OAA0B,0EAAF,EAAE;AACtD,UAAM,gBAAgB,GAAc,SAApC;;AAGA,UAAI,gBAAgB,CAAC,KAArB,EAA4B;AAC1B,qBAAa,gBAAgB,CAAC,KAAjB,mBAA4B,OAA5B;AAAqC,UAAA;AAArC,WAAb;AACD,OAFD,MAEO;AACL,cAAM,IAAI,mBAAJ,CAAwB,WAAxB,EAAqC,OAArC,CAAN;AACD;AARqD;AASvD;;AAhBY,CAAf","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\n\ntype ShareOptions = { title?: string; text?: string; url?: string };\n\ntype NavigatorShare = (options: ShareOptions) => Promise<{}>;\n\ninterface Navigator {\n  share?: NavigatorShare;\n}\n\nexport default {\n  get name(): string {\n    return 'ExpoSharing';\n  },\n  isAvailableAsync(): Promise<boolean> {\n    return Promise.resolve(!!(navigator as Navigator).share);\n  },\n  async shareAsync(url: string, options: ShareOptions = {}): Promise<{}> {\n    const sharingNavigator: Navigator = navigator as Navigator;\n\n    // NOTE: `navigator.share` is only available via HTTPS\n    if (sharingNavigator.share) {\n      return await sharingNavigator.share({ ...options, url });\n    } else {\n      throw new UnavailabilityError('navigator', 'share');\n    }\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}