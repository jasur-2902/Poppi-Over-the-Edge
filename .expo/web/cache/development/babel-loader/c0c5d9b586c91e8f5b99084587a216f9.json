{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { UnavailabilityError } from '@unimodules/core';\nimport { toByteArray } from 'base64-js';\nimport ExpoRandom from \"./ExpoRandom\";\n\nfunction assertByteCount(value) {\n  if (typeof value !== 'number' || isNaN(value) || Math.floor(value) < 0 || Math.floor(value) > 1024) {\n    throw new TypeError(\"expo-random: getRandomBytesAsync(\".concat(value, \") expected a valid number from range 0...1024\"));\n  }\n}\n\nexport function getRandomBytesAsync(_x) {\n  return _getRandomBytesAsync.apply(this, arguments);\n}\n\nfunction _getRandomBytesAsync() {\n  _getRandomBytesAsync = _asyncToGenerator(function* (byteCount) {\n    assertByteCount(byteCount);\n    var validByteCount = Math.floor(byteCount);\n\n    if (ExpoRandom.getRandomBytesAsync) {\n      return yield ExpoRandom.getRandomBytesAsync(validByteCount);\n    } else if (ExpoRandom.getRandomBase64StringAsync) {\n      var base64 = yield ExpoRandom.getRandomBase64StringAsync(validByteCount);\n      return toByteArray(base64);\n    } else {\n      throw new UnavailabilityError('expo-random', 'getRandomBytesAsync');\n    }\n  });\n  return _getRandomBytesAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/Random.ts"],"names":[],"mappings":";;;;AAAA,SAAS,mBAAT,QAAoC,kBAApC;AACA,SAAS,WAAT,QAA4B,WAA5B;AACA,OAAO,UAAP;;AAEA,SAAS,eAAT,CAAyB,KAAzB,EAAmC;AACjC,MACE,OAAO,KAAP,KAAiB,QAAjB,IACA,KAAK,CAAC,KAAD,CADL,IAEA,IAAI,CAAC,KAAL,CAAW,KAAX,IAAoB,CAFpB,IAGA,IAAI,CAAC,KAAL,CAAW,KAAX,IAAoB,IAJtB,EAKE;AACA,UAAM,IAAI,SAAJ,4CACgC,KADhC,mDAAN;AAGD;AACF;;AAED,gBAAsB,mBAAtB;AAAA;AAAA;;;2CAAO,WAAmC,SAAnC,EAAoD;AACzD,IAAA,eAAe,CAAC,SAAD,CAAf;AACA,QAAM,cAAc,GAAG,IAAI,CAAC,KAAL,CAAW,SAAX,CAAvB;;AACA,QAAI,UAAU,CAAC,mBAAf,EAAoC;AAClC,mBAAa,UAAU,CAAC,mBAAX,CAA+B,cAA/B,CAAb;AACD,KAFD,MAEO,IAAI,UAAU,CAAC,0BAAf,EAA2C;AAChD,UAAM,MAAM,SAAS,UAAU,CAAC,0BAAX,CAAsC,cAAtC,CAArB;AACA,aAAO,WAAW,CAAC,MAAD,CAAlB;AACD,KAHM,MAGA;AACL,YAAM,IAAI,mBAAJ,CAAwB,aAAxB,EAAuC,qBAAvC,CAAN;AACD;AACF,G","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport { toByteArray } from 'base64-js';\nimport ExpoRandom from './ExpoRandom';\n\nfunction assertByteCount(value: any): void {\n  if (\n    typeof value !== 'number' ||\n    isNaN(value) ||\n    Math.floor(value) < 0 ||\n    Math.floor(value) > 1024\n  ) {\n    throw new TypeError(\n      `expo-random: getRandomBytesAsync(${value}) expected a valid number from range 0...1024`\n    );\n  }\n}\n\nexport async function getRandomBytesAsync(byteCount: number): Promise<Uint8Array> {\n  assertByteCount(byteCount);\n  const validByteCount = Math.floor(byteCount);\n  if (ExpoRandom.getRandomBytesAsync) {\n    return await ExpoRandom.getRandomBytesAsync(validByteCount);\n  } else if (ExpoRandom.getRandomBase64StringAsync) {\n    const base64 = await ExpoRandom.getRandomBase64StringAsync(validByteCount);\n    return toByteArray(base64);\n  } else {\n    throw new UnavailabilityError('expo-random', 'getRandomBytesAsync');\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}