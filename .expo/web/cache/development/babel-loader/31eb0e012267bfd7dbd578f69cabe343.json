{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"C:\\\\Users\\\\jshukurov\\\\Desktop\\\\Poppi Over The Edge\\\\Poppi-Over-the-Edge-master\\\\node_modules\\\\react-native-gesture-handler\\\\createHandler.web.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport State from \"./State\";\n\nfunction handleHandlerStateChange(props, event, oldState, state) {\n  var {\n    enabled,\n    onHandlerStateChange\n  } = props;\n\n  if (enabled !== false && onHandlerStateChange) {\n    var {\n      nativeEvent: {\n        locationX: x,\n        locationY: y,\n        pageX: absoluteX,\n        pageY: absoluteY\n      }\n    } = event;\n    onHandlerStateChange({\n      nativeEvent: {\n        oldState,\n        state,\n        x,\n        y,\n        absoluteX,\n        absoluteY,\n        pointerInside: true\n      }\n    });\n  }\n}\n\nfunction handleFailed(props, event) {\n  handleHandlerStateChange(props, event, State.ACTIVE, State.FAILED);\n}\n\nfunction handleEnd(props, event) {\n  handleHandlerStateChange(props, event, State.ACTIVE, State.END);\n}\n\nfunction handleActivate(props, event) {\n  handleHandlerStateChange(props, event, State.BEGAN, State.ACTIVE);\n}\n\nfunction handleBegan(props, event) {\n  handleHandlerStateChange(props, event, State.UNDETERMINED, State.BEGAN);\n}\n\nclass UnimplementedGestureHandler extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.setNativeProps = () => {};\n  }\n\n  render() {\n    return this.props.children;\n  }\n\n}\n\nvar handlers = {\n  NativeViewGestureHandler: class NativeViewGestureHandler extends React.Component {\n    render() {\n      var {\n        children\n      } = this.props;\n      return children;\n    }\n\n  },\n  TapGestureHandler: (_temp = _class = class TapGestureHandler extends React.Component {\n    constructor() {\n      super(...arguments);\n      this.hasBegun = false;\n      this.touchBank = [];\n      this.timeout = null;\n\n      this.clearState = () => {\n        this.hasBegun = false;\n        this.touchBank = [];\n        window.clearTimeout(this.timeout);\n      };\n\n      this.handlePressIn = event => {\n        var {\n          maxDelayMs\n        } = this.props;\n\n        if (!this.hasBegun) {\n          event.persist();\n          this.hasBegun = true;\n          handleBegan(this.props, event);\n          this.timeout = window.setTimeout(() => {\n            if (this.hasBegun) {\n              this.clearState();\n              handleFailed(this.props, event);\n            }\n          }, maxDelayMs);\n        }\n      };\n\n      this.handlePressOut = event => {\n        var {\n          touchHistory: {\n            touchBank = []\n          }\n        } = event;\n        var {\n          maxDeltaX,\n          maxDeltaY,\n          maxDurationMs,\n          numberOfTaps\n        } = this.props;\n        this.touchBank = this.touchBank.concat(touchBank);\n        var areTouchesValid = this.touchBank.every(touch => {\n          var {\n            currentPageX,\n            currentPageY,\n            currentTimeStamp,\n            startPageX,\n            startPageY,\n            startTimeStamp\n          } = touch;\n\n          if (startTimeStamp + maxDurationMs < currentTimeStamp) {\n            return false;\n          }\n\n          if (startPageX + maxDeltaX < currentPageX || startPageX - maxDeltaX > currentPageX) {\n            return false;\n          }\n\n          if (startPageY + maxDeltaY < currentPageY || startPageY - maxDeltaY > currentPageY) {\n            return false;\n          }\n\n          return true;\n        });\n\n        if (!areTouchesValid) {\n          this.clearState();\n          handleFailed(this.props, event);\n        } else if (this.touchBank.length >= numberOfTaps) {\n          handleActivate(this.props, event);\n          this.clearState();\n          handleEnd(this.props, event);\n        }\n      };\n    }\n\n    setNativeProps() {}\n\n    render() {\n      var {\n        children,\n        style\n      } = this.props;\n      return React.createElement(TouchableWithoutFeedback, {\n        style: style,\n        onPressIn: this.handlePressIn,\n        onPressOut: this.handlePressOut,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 9\n        }\n      }, children);\n    }\n\n  }, _class.defaultProps = {\n    numberOfTaps: 1,\n    maxDurationMs: 500,\n    maxDelayMs: 500,\n    minPointers: 1,\n    maxDeltaX: Number.MAX_SAFE_INTEGER,\n    maxDeltaY: Number.MAX_SAFE_INTEGER,\n    maxDist: Number.MAX_SAFE_INTEGER\n  }, _temp)\n};\nexport default function createHandler(handlerName) {\n  var propTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  class Handler extends React.Component {\n    constructor() {\n      var _this;\n\n      super(...arguments);\n      _this = this;\n\n      this._refHandler = node => {\n        this._viewNode = node;\n      };\n\n      this.setNativeProps = function () {\n        _this._viewNode.setNativeProps(...arguments);\n      };\n    }\n\n    componentDidMount() {\n      if (!handlers[handlerName]) {\n        console.warn(\"\".concat(handlerName, \" is not yet supported on web.\"));\n      }\n    }\n\n    render() {\n      var Handler = handlers[handlerName] || UnimplementedGestureHandler;\n      return React.createElement(Handler, _extends({\n        ref: this._refHandler\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 14\n        }\n      }));\n    }\n\n  }\n\n  Handler.displayName = handlerName;\n  Handler.propTypes = propTypes;\n  return Handler;\n}","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/react-native-gesture-handler/createHandler.web.js"],"names":["React","State","handleHandlerStateChange","props","event","oldState","state","enabled","onHandlerStateChange","nativeEvent","locationX","x","locationY","y","pageX","absoluteX","pageY","absoluteY","pointerInside","handleFailed","ACTIVE","FAILED","handleEnd","END","handleActivate","BEGAN","handleBegan","UNDETERMINED","UnimplementedGestureHandler","Component","setNativeProps","render","children","handlers","NativeViewGestureHandler","TapGestureHandler","hasBegun","touchBank","timeout","clearState","window","clearTimeout","handlePressIn","maxDelayMs","persist","setTimeout","handlePressOut","touchHistory","maxDeltaX","maxDeltaY","maxDurationMs","numberOfTaps","concat","areTouchesValid","every","touch","currentPageX","currentPageY","currentTimeStamp","startPageX","startPageY","startTimeStamp","length","style","defaultProps","minPointers","Number","MAX_SAFE_INTEGER","maxDist","createHandler","handlerName","propTypes","Handler","_refHandler","node","_viewNode","componentDidMount","console","warn","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { TouchableWithoutFeedback } from 'react-native';\n\nimport State from './State';\n\nfunction handleHandlerStateChange(props, event, oldState, state) {\n  const { enabled, onHandlerStateChange } = props;\n\n  if (enabled !== false && onHandlerStateChange) {\n    const {\n      nativeEvent: {\n        locationX: x,\n        locationY: y,\n        pageX: absoluteX,\n        pageY: absoluteY,\n      },\n    } = event;\n\n    onHandlerStateChange({\n      nativeEvent: {\n        oldState,\n        state,\n        x,\n        y,\n        absoluteX,\n        absoluteY,\n        pointerInside: true,\n      },\n    });\n  }\n}\n\nfunction handleFailed(props, event) {\n  handleHandlerStateChange(props, event, State.ACTIVE, State.FAILED);\n}\n\nfunction handleEnd(props, event) {\n  handleHandlerStateChange(props, event, State.ACTIVE, State.END);\n}\n\nfunction handleActivate(props, event) {\n  handleHandlerStateChange(props, event, State.BEGAN, State.ACTIVE);\n}\n\nfunction handleBegan(props, event) {\n  handleHandlerStateChange(props, event, State.UNDETERMINED, State.BEGAN);\n}\n\nclass UnimplementedGestureHandler extends React.Component {\n  setNativeProps = () => {\n    // Do nothing\n  };\n\n  render() {\n    return this.props.children;\n  }\n}\n\nconst handlers = {\n  NativeViewGestureHandler: class NativeViewGestureHandler extends React.Component {\n    render() {\n      const { children } = this.props;\n\n      return children;\n    }\n  },\n\n  TapGestureHandler: class TapGestureHandler extends React.Component {\n    static defaultProps = {\n      numberOfTaps: 1,\n      maxDurationMs: 500,\n      maxDelayMs: 500,\n      minPointers: 1,\n      maxDeltaX: Number.MAX_SAFE_INTEGER,\n      maxDeltaY: Number.MAX_SAFE_INTEGER,\n      maxDist: Number.MAX_SAFE_INTEGER,\n    };\n\n    hasBegun = false;\n    touchBank = [];\n    timeout = null;\n\n    setNativeProps() {}\n\n    clearState = () => {\n      this.hasBegun = false;\n      this.touchBank = [];\n      window.clearTimeout(this.timeout);\n    };\n\n    handlePressIn = event => {\n      const { maxDelayMs } = this.props;\n\n      if (!this.hasBegun) {\n        event.persist();\n        this.hasBegun = true;\n        handleBegan(this.props, event);\n\n        // Cancel if not finished in time\n        this.timeout = window.setTimeout(() => {\n          if (this.hasBegun) {\n            this.clearState();\n            handleFailed(this.props, event);\n          }\n        }, maxDelayMs);\n      }\n    };\n\n    handlePressOut = event => {\n      const {\n        touchHistory: { touchBank = [] },\n      } = event;\n      const { maxDeltaX, maxDeltaY, maxDurationMs, numberOfTaps } = this.props;\n\n      this.touchBank = this.touchBank.concat(touchBank);\n\n      // Check if all touches are valid\n      const areTouchesValid = this.touchBank.every(touch => {\n        const {\n          currentPageX,\n          currentPageY,\n          currentTimeStamp,\n          startPageX,\n          startPageY,\n          startTimeStamp,\n        } = touch;\n\n        // Check if touch took longer than it may\n        if (startTimeStamp + maxDurationMs < currentTimeStamp) {\n          return false;\n        }\n\n        // Check if touch moved too far away\n        if (\n          startPageX + maxDeltaX < currentPageX ||\n          startPageX - maxDeltaX > currentPageX\n        ) {\n          return false;\n        }\n\n        // Check if touch moved too far away\n        if (\n          startPageY + maxDeltaY < currentPageY ||\n          startPageY - maxDeltaY > currentPageY\n        ) {\n          return false;\n        }\n\n        return true;\n      });\n\n      // Check if all touches were valid and the necessary number of touches was achieved\n      if (!areTouchesValid) {\n        this.clearState();\n        handleFailed(this.props, event);\n      } else if (this.touchBank.length >= numberOfTaps) {\n        handleActivate(this.props, event);\n        this.clearState();\n        handleEnd(this.props, event);\n      }\n    };\n\n    render() {\n      const { children, style } = this.props;\n\n      return (\n        <TouchableWithoutFeedback\n          style={style}\n          onPressIn={this.handlePressIn}\n          onPressOut={this.handlePressOut}>\n          {children}\n        </TouchableWithoutFeedback>\n      );\n    }\n  },\n};\n\nexport default function createHandler(handlerName, propTypes = {}) {\n  class Handler extends React.Component {\n    static displayName = handlerName;\n\n    static propTypes = propTypes;\n\n    componentDidMount() {\n      if (!handlers[handlerName]) {\n        console.warn(`${handlerName} is not yet supported on web.`);\n      }\n    }\n\n    _refHandler = node => {\n      this._viewNode = node;\n    };\n\n    setNativeProps = (...args) => {\n      this._viewNode.setNativeProps(...args);\n    };\n\n    render() {\n      const Handler = handlers[handlerName] || UnimplementedGestureHandler;\n\n      return <Handler ref={this._refHandler} {...this.props} />;\n    }\n  }\n  return Handler;\n}\n"]},"metadata":{},"sourceType":"module"}