{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { EventEmitter } from '@unimodules/core';\nimport { UnavailabilityError } from '@unimodules/core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport MediaLibrary from \"./ExponentMediaLibrary\";\nvar eventEmitter = new EventEmitter(MediaLibrary);\n\nfunction arrayize(item) {\n  if (Array.isArray(item)) {\n    return item;\n  }\n\n  return item ? [item] : [];\n}\n\nfunction getId(ref) {\n  if (typeof ref === 'string') {\n    return ref;\n  }\n\n  return ref ? ref.id : undefined;\n}\n\nfunction checkAssetIds(assetIds) {\n  if (assetIds.some(id => !id || typeof id !== 'string')) {\n    throw new Error('Asset ID must be a string!');\n  }\n}\n\nfunction checkAlbumIds(albumIds) {\n  if (albumIds.some(id => !id || typeof id !== 'string')) {\n    throw new Error('Album ID must be a string!');\n  }\n}\n\nfunction checkMediaType(mediaType) {\n  if (Object.values(MediaType).indexOf(mediaType) === -1) {\n    throw new Error(\"Invalid mediaType: \".concat(mediaType));\n  }\n}\n\nfunction checkSortBy(sortBy) {\n  if (Array.isArray(sortBy)) {\n    checkSortByKey(sortBy[0]);\n\n    if (typeof sortBy[1] !== 'boolean') {\n      throw new Error('Invalid sortBy array argument. Second item must be a boolean!');\n    }\n  } else {\n    checkSortByKey(sortBy);\n  }\n}\n\nfunction checkSortByKey(sortBy) {\n  if (Object.values(SortBy).indexOf(sortBy) === -1) {\n    throw new Error(\"Invalid sortBy key: \".concat(sortBy));\n  }\n}\n\nexport var MediaType = MediaLibrary.MediaType;\nexport var SortBy = MediaLibrary.SortBy;\nexport function createAssetAsync(_x) {\n  return _createAssetAsync.apply(this, arguments);\n}\n\nfunction _createAssetAsync() {\n  _createAssetAsync = _asyncToGenerator(function* (localUri) {\n    if (!MediaLibrary.createAssetAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'createAssetAsync');\n    }\n\n    if (!localUri || typeof localUri !== 'string') {\n      throw new Error('Invalid argument \"localUri\". It must be a string!');\n    }\n\n    var asset = yield MediaLibrary.createAssetAsync(localUri);\n\n    if (Array.isArray(asset)) {\n      return asset[0];\n    }\n\n    return asset;\n  });\n  return _createAssetAsync.apply(this, arguments);\n}\n\nexport function addAssetsToAlbumAsync(_x2, _x3) {\n  return _addAssetsToAlbumAsync.apply(this, arguments);\n}\n\nfunction _addAssetsToAlbumAsync() {\n  _addAssetsToAlbumAsync = _asyncToGenerator(function* (assets, album) {\n    var copy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    if (!MediaLibrary.addAssetsToAlbumAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'addAssetsToAlbumAsync');\n    }\n\n    var assetIds = arrayize(assets).map(getId);\n    var albumId = getId(album);\n    checkAssetIds(assetIds);\n\n    if (!albumId || typeof albumId !== 'string') {\n      throw new Error('Invalid album ID. It must be a string!');\n    }\n\n    if (Platform.OS === 'ios') {\n      return yield MediaLibrary.addAssetsToAlbumAsync(assetIds, albumId);\n    }\n\n    return yield MediaLibrary.addAssetsToAlbumAsync(assetIds, albumId, !!copy);\n  });\n  return _addAssetsToAlbumAsync.apply(this, arguments);\n}\n\nexport function removeAssetsFromAlbumAsync(_x4, _x5) {\n  return _removeAssetsFromAlbumAsync.apply(this, arguments);\n}\n\nfunction _removeAssetsFromAlbumAsync() {\n  _removeAssetsFromAlbumAsync = _asyncToGenerator(function* (assets, album) {\n    if (!MediaLibrary.removeAssetsFromAlbumAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'removeAssetsFromAlbumAsync');\n    }\n\n    var assetIds = arrayize(assets).map(getId);\n    var albumId = getId(album);\n    checkAssetIds(assetIds);\n    return yield MediaLibrary.removeAssetsFromAlbumAsync(assetIds, albumId);\n  });\n  return _removeAssetsFromAlbumAsync.apply(this, arguments);\n}\n\nexport function deleteAssetsAsync(_x6) {\n  return _deleteAssetsAsync.apply(this, arguments);\n}\n\nfunction _deleteAssetsAsync() {\n  _deleteAssetsAsync = _asyncToGenerator(function* (assets) {\n    if (!MediaLibrary.deleteAssetsAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'deleteAssetsAsync');\n    }\n\n    var assetIds = arrayize(assets).map(getId);\n    checkAssetIds(assetIds);\n    return yield MediaLibrary.deleteAssetsAsync(assetIds);\n  });\n  return _deleteAssetsAsync.apply(this, arguments);\n}\n\nexport function getAssetInfoAsync(_x7) {\n  return _getAssetInfoAsync.apply(this, arguments);\n}\n\nfunction _getAssetInfoAsync() {\n  _getAssetInfoAsync = _asyncToGenerator(function* (asset) {\n    if (!MediaLibrary.getAssetInfoAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'getAssetInfoAsync');\n    }\n\n    var assetId = getId(asset);\n    checkAssetIds([assetId]);\n    var assetInfo = yield MediaLibrary.getAssetInfoAsync(assetId);\n\n    if (Array.isArray(assetInfo)) {\n      return assetInfo[0];\n    }\n\n    return assetInfo;\n  });\n  return _getAssetInfoAsync.apply(this, arguments);\n}\n\nexport function getAlbumsAsync() {\n  return _getAlbumsAsync.apply(this, arguments);\n}\n\nfunction _getAlbumsAsync() {\n  _getAlbumsAsync = _asyncToGenerator(function* () {\n    var {\n      includeSmartAlbums = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!MediaLibrary.getAlbumsAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'getAlbumsAsync');\n    }\n\n    return yield MediaLibrary.getAlbumsAsync({\n      includeSmartAlbums\n    });\n  });\n  return _getAlbumsAsync.apply(this, arguments);\n}\n\nexport function getAlbumAsync(_x8) {\n  return _getAlbumAsync.apply(this, arguments);\n}\n\nfunction _getAlbumAsync() {\n  _getAlbumAsync = _asyncToGenerator(function* (title) {\n    if (!MediaLibrary.getAlbumAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'getAlbumAsync');\n    }\n\n    if (typeof title !== 'string') {\n      throw new Error('Album title must be a string!');\n    }\n\n    return yield MediaLibrary.getAlbumAsync(title);\n  });\n  return _getAlbumAsync.apply(this, arguments);\n}\n\nexport function createAlbumAsync(_x9, _x10) {\n  return _createAlbumAsync.apply(this, arguments);\n}\n\nfunction _createAlbumAsync() {\n  _createAlbumAsync = _asyncToGenerator(function* (albumName, asset) {\n    var copyAsset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    if (!MediaLibrary.createAlbumAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'createAlbumAsync');\n    }\n\n    var assetId = getId(asset);\n\n    if (Platform.OS === 'android' && (typeof assetId !== 'string' || assetId.length === 0)) {\n      throw new Error('MediaLibrary.createAlbumAsync must be called with an asset on Android.');\n    }\n\n    if (!albumName || typeof albumName !== 'string') {\n      throw new Error('Invalid argument \"albumName\". It must be a string!');\n    }\n\n    if (assetId != null && typeof assetId !== 'string') {\n      throw new Error('Asset ID must be a string!');\n    }\n\n    if (Platform.OS === 'ios') {\n      return yield MediaLibrary.createAlbumAsync(albumName, assetId);\n    }\n\n    return yield MediaLibrary.createAlbumAsync(albumName, assetId, !!copyAsset);\n  });\n  return _createAlbumAsync.apply(this, arguments);\n}\n\nexport function deleteAlbumsAsync(_x11) {\n  return _deleteAlbumsAsync.apply(this, arguments);\n}\n\nfunction _deleteAlbumsAsync() {\n  _deleteAlbumsAsync = _asyncToGenerator(function* (albums) {\n    var assetRemove = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (!MediaLibrary.deleteAlbumsAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'deleteAlbumsAsync');\n    }\n\n    var albumIds = arrayize(albums).map(getId);\n    checkAlbumIds(albumIds);\n\n    if (Platform.OS === 'android') {\n      return yield MediaLibrary.deleteAlbumsAsync(albumIds);\n    }\n\n    return yield MediaLibrary.deleteAlbumsAsync(albumIds, !!assetRemove);\n  });\n  return _deleteAlbumsAsync.apply(this, arguments);\n}\n\nexport function getAssetsAsync() {\n  return _getAssetsAsync.apply(this, arguments);\n}\n\nfunction _getAssetsAsync() {\n  _getAssetsAsync = _asyncToGenerator(function* () {\n    var assetsOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!MediaLibrary.getAssetsAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'getAssetsAsync');\n    }\n\n    var {\n      first,\n      after,\n      album,\n      sortBy,\n      mediaType\n    } = assetsOptions;\n    var options = {\n      first: first == null ? 20 : first,\n      after: getId(after),\n      album: getId(album),\n      sortBy: arrayize(sortBy),\n      mediaType: arrayize(mediaType || [MediaType.photo])\n    };\n\n    if (first != null && typeof options.first !== 'number') {\n      throw new Error('Option \"first\" must be a number!');\n    }\n\n    if (after != null && typeof options.after !== 'string') {\n      throw new Error('Option \"after\" must be a string!');\n    }\n\n    if (album != null && typeof options.album !== 'string') {\n      throw new Error('Option \"album\" must be a string!');\n    }\n\n    options.sortBy.forEach(checkSortBy);\n    options.mediaType.forEach(checkMediaType);\n    return yield MediaLibrary.getAssetsAsync(options);\n  });\n  return _getAssetsAsync.apply(this, arguments);\n}\n\nexport function addListener(listener) {\n  var subscription = eventEmitter.addListener(MediaLibrary.CHANGE_LISTENER_NAME, listener);\n  return subscription;\n}\nexport function removeSubscription(subscription) {\n  subscription.remove();\n}\nexport function removeAllListeners() {\n  eventEmitter.removeAllListeners(MediaLibrary.CHANGE_LISTENER_NAME);\n}\nexport function getMomentsAsync() {\n  return _getMomentsAsync.apply(this, arguments);\n}\n\nfunction _getMomentsAsync() {\n  _getMomentsAsync = _asyncToGenerator(function* () {\n    if (!MediaLibrary.getMomentsAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'getMomentsAsync');\n    }\n\n    return yield MediaLibrary.getMomentsAsync();\n  });\n  return _getMomentsAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/MediaLibrary.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Subscription } from '@unimodules/core';\nimport { UnavailabilityError } from '@unimodules/core';\nimport { Platform } from 'react-native';\n\nimport MediaLibrary from './ExponentMediaLibrary';\n\nconst eventEmitter = new EventEmitter(MediaLibrary);\n\nexport type MediaTypeValue = 'audio' | 'photo' | 'video' | 'unknown';\nexport type SortByKey =\n  | 'default'\n  | 'mediaType'\n  | 'width'\n  | 'height'\n  | 'creationTime'\n  | 'modificationTime'\n  | 'duration';\nexport type SortByValue = [SortByKey, boolean] | SortByKey;\n\nexport type MediaTypeObject = {\n  audio: 'audio';\n  photo: 'photo';\n  video: 'video';\n  unknown: 'unknown';\n};\n\nexport type SortByObject = {\n  default: 'default';\n  mediaType: 'mediaType';\n  width: 'width';\n  height: 'height';\n  creationTime: 'creationTime';\n  modificationTime: 'modificationTime';\n  duration: 'duration';\n};\n\nexport type Asset = {\n  id: string;\n  filename: string;\n  uri: string;\n  mediaType: MediaTypeValue;\n  mediaSubtypes?: Array<string>; // iOS only\n  width: number;\n  height: number;\n  creationTime: number;\n  modificationTime: number;\n  duration: number;\n  albumId?: string; // Android only\n};\n\nexport type AssetInfo = Asset & {\n  localUri?: string;\n  location?: Location;\n  exif?: Object;\n  isFavorite?: boolean; //iOS only\n};\n\nexport type Location = {\n  latitude: number;\n  longitude: number;\n};\n\nexport type Album = {\n  id: string;\n  title: string;\n  assetCount: number;\n  type?: string; // iOS only\n\n  // iOS moments only\n  startTime: number;\n  endTime: number;\n  approximateLocation?: Location;\n  locationNames?: Array<string>;\n};\n\nexport type AlbumsOptions = {\n  // iOS only\n  includeSmartAlbums?: boolean;\n};\n\nexport type AssetsOptions = {\n  first?: number;\n  after?: AssetRef;\n  album?: AlbumRef;\n  sortBy?: Array<SortByValue> | SortByValue;\n  mediaType?: Array<MediaTypeValue> | MediaTypeValue;\n};\n\nexport type PagedInfo<T> = {\n  assets: Array<T>;\n  endCursor: string;\n  hasNextPage: boolean;\n  totalCount: number;\n};\n\nexport type AssetRef = Asset | string;\nexport type AlbumRef = Album | string;\n\nfunction arrayize(item: any): Array<any> {\n  if (Array.isArray(item)) {\n    return item;\n  }\n  return item ? [item] : [];\n}\n\nfunction getId(ref: any): string | undefined {\n  if (typeof ref === 'string') {\n    return ref;\n  }\n  return ref ? ref.id : undefined;\n}\n\nfunction checkAssetIds(assetIds: any): void {\n  if (assetIds.some(id => !id || typeof id !== 'string')) {\n    throw new Error('Asset ID must be a string!');\n  }\n}\n\nfunction checkAlbumIds(albumIds: any): void {\n  if (albumIds.some(id => !id || typeof id !== 'string')) {\n    throw new Error('Album ID must be a string!');\n  }\n}\n\nfunction checkMediaType(mediaType: any): void {\n  if (Object.values(MediaType).indexOf(mediaType) === -1) {\n    throw new Error(`Invalid mediaType: ${mediaType}`);\n  }\n}\n\nfunction checkSortBy(sortBy: any): void {\n  if (Array.isArray(sortBy)) {\n    checkSortByKey(sortBy[0]);\n\n    if (typeof sortBy[1] !== 'boolean') {\n      throw new Error('Invalid sortBy array argument. Second item must be a boolean!');\n    }\n  } else {\n    checkSortByKey(sortBy);\n  }\n}\n\nfunction checkSortByKey(sortBy: any): void {\n  if (Object.values(SortBy).indexOf(sortBy) === -1) {\n    throw new Error(`Invalid sortBy key: ${sortBy}`);\n  }\n}\n\n// export constants\nexport const MediaType: MediaTypeObject = MediaLibrary.MediaType;\nexport const SortBy: SortByObject = MediaLibrary.SortBy;\n\nexport async function createAssetAsync(localUri: string): Promise<Asset> {\n  if (!MediaLibrary.createAssetAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'createAssetAsync');\n  }\n\n  if (!localUri || typeof localUri !== 'string') {\n    throw new Error('Invalid argument \"localUri\". It must be a string!');\n  }\n  const asset = await MediaLibrary.createAssetAsync(localUri);\n\n  if (Array.isArray(asset)) {\n    // Android returns an array with asset, we need to pick the first item\n    return asset[0];\n  }\n  return asset;\n}\n\nexport async function addAssetsToAlbumAsync(\n  assets: Array<AssetRef> | AssetRef,\n  album: AlbumRef,\n  copy: boolean = true\n) {\n  if (!MediaLibrary.addAssetsToAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'addAssetsToAlbumAsync');\n  }\n\n  const assetIds = arrayize(assets).map(getId);\n  const albumId = getId(album);\n\n  checkAssetIds(assetIds);\n\n  if (!albumId || typeof albumId !== 'string') {\n    throw new Error('Invalid album ID. It must be a string!');\n  }\n\n  if (Platform.OS === 'ios') {\n    return await MediaLibrary.addAssetsToAlbumAsync(assetIds, albumId);\n  }\n  return await MediaLibrary.addAssetsToAlbumAsync(assetIds, albumId, !!copy);\n}\n\nexport async function removeAssetsFromAlbumAsync(\n  assets: Array<AssetRef> | AssetRef,\n  album: AlbumRef\n) {\n  if (!MediaLibrary.removeAssetsFromAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'removeAssetsFromAlbumAsync');\n  }\n\n  const assetIds = arrayize(assets).map(getId);\n  const albumId = getId(album);\n\n  checkAssetIds(assetIds);\n  return await MediaLibrary.removeAssetsFromAlbumAsync(assetIds, albumId);\n}\n\nexport async function deleteAssetsAsync(assets: Array<AssetRef> | AssetRef) {\n  if (!MediaLibrary.deleteAssetsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'deleteAssetsAsync');\n  }\n\n  const assetIds = arrayize(assets).map(getId);\n\n  checkAssetIds(assetIds);\n  return await MediaLibrary.deleteAssetsAsync(assetIds);\n}\n\nexport async function getAssetInfoAsync(asset: AssetRef): Promise<AssetInfo> {\n  if (!MediaLibrary.getAssetInfoAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAssetInfoAsync');\n  }\n\n  const assetId = getId(asset);\n\n  checkAssetIds([assetId]);\n\n  const assetInfo = await MediaLibrary.getAssetInfoAsync(assetId);\n\n  if (Array.isArray(assetInfo)) {\n    // Android returns an array with asset info, we need to pick the first item\n    return assetInfo[0];\n  }\n  return assetInfo;\n}\n\nexport async function getAlbumsAsync({ includeSmartAlbums = false }: AlbumsOptions = {}): Promise<\n  Array<Album>\n> {\n  if (!MediaLibrary.getAlbumsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAlbumsAsync');\n  }\n  return await MediaLibrary.getAlbumsAsync({ includeSmartAlbums });\n}\n\nexport async function getAlbumAsync(title: string): Promise<Album> {\n  if (!MediaLibrary.getAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAlbumAsync');\n  }\n  if (typeof title !== 'string') {\n    throw new Error('Album title must be a string!');\n  }\n  return await MediaLibrary.getAlbumAsync(title);\n}\n\nexport async function createAlbumAsync(\n  albumName: string,\n  asset?: AssetRef,\n  copyAsset: boolean = true\n): Promise<Album> {\n  if (!MediaLibrary.createAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'createAlbumAsync');\n  }\n\n  const assetId = getId(asset);\n\n  if (Platform.OS === 'android' && (typeof assetId !== 'string' || assetId.length === 0)) {\n    // it's not possible to create empty album on Android, so initial asset must be provided\n    throw new Error('MediaLibrary.createAlbumAsync must be called with an asset on Android.');\n  }\n  if (!albumName || typeof albumName !== 'string') {\n    throw new Error('Invalid argument \"albumName\". It must be a string!');\n  }\n  if (assetId != null && typeof assetId !== 'string') {\n    throw new Error('Asset ID must be a string!');\n  }\n\n  if (Platform.OS === 'ios') {\n    return await MediaLibrary.createAlbumAsync(albumName, assetId);\n  }\n  return await MediaLibrary.createAlbumAsync(albumName, assetId, !!copyAsset);\n}\n\nexport async function deleteAlbumsAsync(\n  albums: Array<AlbumRef> | AlbumRef,\n  assetRemove: boolean = false\n) {\n  if (!MediaLibrary.deleteAlbumsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'deleteAlbumsAsync');\n  }\n\n  const albumIds = arrayize(albums).map(getId);\n\n  checkAlbumIds(albumIds);\n  if (Platform.OS === 'android') {\n    return await MediaLibrary.deleteAlbumsAsync(albumIds);\n  }\n  return await MediaLibrary.deleteAlbumsAsync(albumIds, !!assetRemove);\n}\n\nexport async function getAssetsAsync(assetsOptions: AssetsOptions = {}): Promise<PagedInfo<Asset>> {\n  if (!MediaLibrary.getAssetsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAssetsAsync');\n  }\n\n  const { first, after, album, sortBy, mediaType } = assetsOptions;\n\n  const options = {\n    first: first == null ? 20 : first,\n    after: getId(after),\n    album: getId(album),\n    sortBy: arrayize(sortBy),\n    mediaType: arrayize(mediaType || [MediaType.photo]),\n  };\n\n  if (first != null && typeof options.first !== 'number') {\n    throw new Error('Option \"first\" must be a number!');\n  }\n  if (after != null && typeof options.after !== 'string') {\n    throw new Error('Option \"after\" must be a string!');\n  }\n  if (album != null && typeof options.album !== 'string') {\n    throw new Error('Option \"album\" must be a string!');\n  }\n\n  options.sortBy.forEach(checkSortBy);\n  options.mediaType.forEach(checkMediaType);\n\n  return await MediaLibrary.getAssetsAsync(options);\n}\n\nexport function addListener(listener: () => void): Subscription {\n  const subscription = eventEmitter.addListener(MediaLibrary.CHANGE_LISTENER_NAME, listener);\n  return subscription;\n}\n\nexport function removeSubscription(subscription: Subscription): void {\n  subscription.remove();\n}\n\nexport function removeAllListeners(): void {\n  eventEmitter.removeAllListeners(MediaLibrary.CHANGE_LISTENER_NAME);\n}\n\n// iOS only\nexport async function getMomentsAsync() {\n  if (!MediaLibrary.getMomentsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getMomentsAsync');\n  }\n\n  return await MediaLibrary.getMomentsAsync();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}