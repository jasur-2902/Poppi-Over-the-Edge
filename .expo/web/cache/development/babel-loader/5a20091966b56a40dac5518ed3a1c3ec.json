{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { EventEmitter, Platform, UnavailabilityError } from '@unimodules/core';\nimport ExpoScreenOrientation from \"./ExpoScreenOrientation\";\nimport { Orientation, OrientationLock, SizeClassIOS, WebOrientationLock } from \"./ScreenOrientation.types\";\nexport { Orientation, OrientationLock, SizeClassIOS, WebOrientationLock };\n\nvar _orientationChangeEmitter = new EventEmitter(ExpoScreenOrientation);\n\nvar _orientationChangeSubscribers = [];\nvar _lastOrientationLock = OrientationLock.UNKNOWN;\nexport function allow(orientationLock) {\n  console.warn(\"'ScreenOrientation.allow' is deprecated in favour of 'ScreenOrientation.lockAsync' and will be removed in SDK 35 or later\");\n  lockAsync(orientationLock);\n}\nexport function allowAsync(_x) {\n  return _allowAsync.apply(this, arguments);\n}\n\nfunction _allowAsync() {\n  _allowAsync = _asyncToGenerator(function* (orientationLock) {\n    console.warn(\"'ScreenOrientation.allowAsync' is deprecated in favour of 'ScreenOrientation.lockAsync'\");\n    yield lockAsync(orientationLock);\n  });\n  return _allowAsync.apply(this, arguments);\n}\n\nexport function lockAsync(_x2) {\n  return _lockAsync.apply(this, arguments);\n}\n\nfunction _lockAsync() {\n  _lockAsync = _asyncToGenerator(function* (orientationLock) {\n    if (!ExpoScreenOrientation.lockAsync) {\n      throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n    }\n\n    var orientationLocks = Object.values(OrientationLock);\n\n    if (!orientationLocks.includes(orientationLock)) {\n      throw new TypeError(\"Invalid Orientation Lock: \".concat(orientationLock));\n    }\n\n    if (orientationLock === OrientationLock.OTHER) {\n      return;\n    }\n\n    yield ExpoScreenOrientation.lockAsync(orientationLock);\n    _lastOrientationLock = orientationLock;\n  });\n  return _lockAsync.apply(this, arguments);\n}\n\nexport function lockPlatformAsync(_x3) {\n  return _lockPlatformAsync.apply(this, arguments);\n}\n\nfunction _lockPlatformAsync() {\n  _lockPlatformAsync = _asyncToGenerator(function* (options) {\n    if (!ExpoScreenOrientation.lockPlatformAsync) {\n      throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n    }\n\n    var {\n      screenOrientationConstantAndroid,\n      screenOrientationArrayIOS,\n      screenOrientationLockWeb\n    } = options;\n    var platformOrientationParam;\n\n    if (Platform.OS === 'android' && screenOrientationConstantAndroid) {\n      if (isNaN(screenOrientationConstantAndroid)) {\n        throw new TypeError(\"lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with \".concat(screenOrientationConstantAndroid));\n      }\n\n      platformOrientationParam = screenOrientationConstantAndroid;\n    } else if (Platform.OS === 'ios' && screenOrientationArrayIOS) {\n      if (!Array.isArray(screenOrientationArrayIOS)) {\n        throw new TypeError(\"lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with \".concat(screenOrientationArrayIOS));\n      }\n\n      var orientations = Object.values(Orientation);\n\n      for (var orientation of screenOrientationArrayIOS) {\n        if (!orientations.includes(orientation)) {\n          throw new TypeError(\"lockPlatformAsync iOS platform: \".concat(orientation, \" is not a valid Orientation\"));\n        }\n      }\n\n      platformOrientationParam = screenOrientationArrayIOS;\n    } else if (Platform.OS === 'web' && screenOrientationLockWeb) {\n      var webOrientationLocks = Object.values(WebOrientationLock);\n\n      if (!webOrientationLocks.includes(screenOrientationLockWeb)) {\n        throw new TypeError(\"Invalid Web Orientation Lock: \".concat(screenOrientationLockWeb));\n      }\n\n      platformOrientationParam = screenOrientationLockWeb;\n    }\n\n    if (!platformOrientationParam) {\n      throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n    }\n\n    yield ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam);\n    _lastOrientationLock = OrientationLock.OTHER;\n  });\n  return _lockPlatformAsync.apply(this, arguments);\n}\n\nexport function unlockAsync() {\n  return _unlockAsync.apply(this, arguments);\n}\n\nfunction _unlockAsync() {\n  _unlockAsync = _asyncToGenerator(function* () {\n    if (!ExpoScreenOrientation.unlockAsync) {\n      throw new UnavailabilityError('ScreenOrientation', 'unlockAsync');\n    }\n\n    yield ExpoScreenOrientation.unlockAsync();\n  });\n  return _unlockAsync.apply(this, arguments);\n}\n\nexport function getOrientationAsync() {\n  return _getOrientationAsync.apply(this, arguments);\n}\n\nfunction _getOrientationAsync() {\n  _getOrientationAsync = _asyncToGenerator(function* () {\n    if (!ExpoScreenOrientation.getOrientationAsync) {\n      throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n    }\n\n    return yield ExpoScreenOrientation.getOrientationAsync();\n  });\n  return _getOrientationAsync.apply(this, arguments);\n}\n\nexport function getOrientationLockAsync() {\n  return _getOrientationLockAsync.apply(this, arguments);\n}\n\nfunction _getOrientationLockAsync() {\n  _getOrientationLockAsync = _asyncToGenerator(function* () {\n    if (!ExpoScreenOrientation.getOrientationLockAsync) {\n      return _lastOrientationLock;\n    }\n\n    return yield ExpoScreenOrientation.getOrientationLockAsync();\n  });\n  return _getOrientationLockAsync.apply(this, arguments);\n}\n\nexport function getPlatformOrientationLockAsync() {\n  return _getPlatformOrientationLockAsync.apply(this, arguments);\n}\n\nfunction _getPlatformOrientationLockAsync() {\n  _getPlatformOrientationLockAsync = _asyncToGenerator(function* () {\n    var platformOrientationLock = yield ExpoScreenOrientation.getPlatformOrientationLockAsync();\n\n    if (Platform.OS === 'android') {\n      return {\n        screenOrientationConstantAndroid: platformOrientationLock\n      };\n    } else if (Platform.OS === 'ios') {\n      return {\n        screenOrientationArrayIOS: platformOrientationLock\n      };\n    } else if (Platform.OS === 'web') {\n      return {\n        screenOrientationLockWeb: platformOrientationLock\n      };\n    } else {\n      return {};\n    }\n  });\n  return _getPlatformOrientationLockAsync.apply(this, arguments);\n}\n\nexport function supportsOrientationLockAsync(_x4) {\n  return _supportsOrientationLockAsync.apply(this, arguments);\n}\n\nfunction _supportsOrientationLockAsync() {\n  _supportsOrientationLockAsync = _asyncToGenerator(function* (orientationLock) {\n    if (!ExpoScreenOrientation.supportsOrientationLockAsync) {\n      throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n    }\n\n    var orientationLocks = Object.values(OrientationLock);\n\n    if (!orientationLocks.includes(orientationLock)) {\n      throw new TypeError(\"Invalid Orientation Lock: \".concat(orientationLock));\n    }\n\n    return yield ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock);\n  });\n  return _supportsOrientationLockAsync.apply(this, arguments);\n}\n\nexport function doesSupportAsync(_x5) {\n  return _doesSupportAsync.apply(this, arguments);\n}\n\nfunction _doesSupportAsync() {\n  _doesSupportAsync = _asyncToGenerator(function* (orientationLock) {\n    console.warn(\"'ScreenOrientation.doesSupportAsync' is deprecated in favour of 'ScreenOrientation.supportsOrientationLockAsync'\");\n    return yield supportsOrientationLockAsync(orientationLock);\n  });\n  return _doesSupportAsync.apply(this, arguments);\n}\n\nfunction getEventName() {\n  return Platform.OS === 'ios' || Platform.OS === 'web' ? 'expoDidUpdateDimensions' : 'didUpdateDimensions';\n}\n\nexport function addOrientationChangeListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError(\"addOrientationChangeListener cannot be called with \".concat(listener));\n  }\n\n  var subscription = _orientationChangeEmitter.addListener(getEventName(), function () {\n    var _ref = _asyncToGenerator(function* (update) {\n      var orientationInfo, orientationLock;\n\n      if (Platform.OS === 'ios' || Platform.OS === 'web') {\n        orientationLock = update.orientationLock;\n        orientationInfo = update.orientationInfo;\n      } else {\n        [orientationLock, orientationInfo] = yield Promise.all([getOrientationLockAsync(), getOrientationAsync()]);\n      }\n\n      listener({\n        orientationInfo,\n        orientationLock\n      });\n    });\n\n    return function (_x6) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n\n  _orientationChangeSubscribers.push(subscription);\n\n  return subscription;\n}\nexport function removeOrientationChangeListeners() {\n  var i = _orientationChangeSubscribers.length;\n\n  while (i--) {\n    var subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove();\n\n    _orientationChangeSubscribers.pop();\n  }\n}\nexport function removeOrientationChangeListener(subscription) {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(\"Must pass in a valid subscription\");\n  }\n\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(sub => sub !== subscription);\n}","map":{"version":3,"sources":["../../src/ScreenOrientation/ScreenOrientation.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Platform, Subscription, UnavailabilityError } from '@unimodules/core';\n\nimport ExpoScreenOrientation from './ExpoScreenOrientation';\nimport {\n  Orientation,\n  OrientationChangeEvent,\n  OrientationChangeListener,\n  OrientationInfo,\n  OrientationLock,\n  PlatformOrientationInfo,\n  SizeClassIOS,\n  WebOrientationLock,\n} from './ScreenOrientation.types';\n\nexport {\n  Orientation,\n  OrientationLock,\n  SizeClassIOS,\n  OrientationInfo,\n  PlatformOrientationInfo,\n  OrientationChangeListener,\n  OrientationChangeEvent,\n  WebOrientationLock,\n};\n\nconst _orientationChangeEmitter = new EventEmitter(ExpoScreenOrientation);\nlet _orientationChangeSubscribers: Subscription[] = [];\n\nlet _lastOrientationLock: OrientationLock = OrientationLock.UNKNOWN;\n\nexport function allow(orientationLock: OrientationLock): void {\n  console.warn(\n    \"'ScreenOrientation.allow' is deprecated in favour of 'ScreenOrientation.lockAsync' and will be removed in SDK 35 or later\"\n  );\n  lockAsync(orientationLock);\n}\n\nexport async function allowAsync(orientationLock: OrientationLock): Promise<void> {\n  console.warn(\n    \"'ScreenOrientation.allowAsync' is deprecated in favour of 'ScreenOrientation.lockAsync'\"\n  );\n  await lockAsync(orientationLock);\n}\n\nexport async function lockAsync(orientationLock: OrientationLock): Promise<void> {\n  if (!ExpoScreenOrientation.lockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  if (orientationLock === OrientationLock.OTHER) {\n    return;\n  }\n\n  await ExpoScreenOrientation.lockAsync(orientationLock);\n  _lastOrientationLock = orientationLock;\n}\n\nexport async function lockPlatformAsync(options: PlatformOrientationInfo): Promise<void> {\n  if (!ExpoScreenOrientation.lockPlatformAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n  }\n\n  const {\n    screenOrientationConstantAndroid,\n    screenOrientationArrayIOS,\n    screenOrientationLockWeb,\n  } = options;\n  let platformOrientationParam: any;\n  if (Platform.OS === 'android' && screenOrientationConstantAndroid) {\n    if (isNaN(screenOrientationConstantAndroid)) {\n      throw new TypeError(\n        `lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with ${screenOrientationConstantAndroid}`\n      );\n    }\n    platformOrientationParam = screenOrientationConstantAndroid;\n  } else if (Platform.OS === 'ios' && screenOrientationArrayIOS) {\n    if (!Array.isArray(screenOrientationArrayIOS)) {\n      throw new TypeError(\n        `lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with ${screenOrientationArrayIOS}`\n      );\n    }\n\n    const orientations = Object.values(Orientation);\n    for (let orientation of screenOrientationArrayIOS) {\n      if (!orientations.includes(orientation)) {\n        throw new TypeError(\n          `lockPlatformAsync iOS platform: ${orientation} is not a valid Orientation`\n        );\n      }\n    }\n    platformOrientationParam = screenOrientationArrayIOS;\n  } else if (Platform.OS === 'web' && screenOrientationLockWeb) {\n    const webOrientationLocks = Object.values(WebOrientationLock);\n    if (!webOrientationLocks.includes(screenOrientationLockWeb)) {\n      throw new TypeError(`Invalid Web Orientation Lock: ${screenOrientationLockWeb}`);\n    }\n    platformOrientationParam = screenOrientationLockWeb;\n  }\n\n  if (!platformOrientationParam) {\n    throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n  }\n  await ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam);\n  _lastOrientationLock = OrientationLock.OTHER;\n}\n\nexport async function unlockAsync(): Promise<void> {\n  if (!ExpoScreenOrientation.unlockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'unlockAsync');\n  }\n  await ExpoScreenOrientation.unlockAsync();\n}\n\nexport async function getOrientationAsync(): Promise<OrientationInfo> {\n  if (!ExpoScreenOrientation.getOrientationAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n  }\n  return await ExpoScreenOrientation.getOrientationAsync();\n}\n\nexport async function getOrientationLockAsync(): Promise<OrientationLock> {\n  if (!ExpoScreenOrientation.getOrientationLockAsync) {\n    return _lastOrientationLock;\n  }\n  return await ExpoScreenOrientation.getOrientationLockAsync();\n}\n\nexport async function getPlatformOrientationLockAsync(): Promise<PlatformOrientationInfo> {\n  const platformOrientationLock = await ExpoScreenOrientation.getPlatformOrientationLockAsync();\n  if (Platform.OS === 'android') {\n    return {\n      screenOrientationConstantAndroid: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'ios') {\n    return {\n      screenOrientationArrayIOS: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'web') {\n    return {\n      screenOrientationLockWeb: platformOrientationLock,\n    };\n  } else {\n    return {};\n  }\n}\n\nexport async function supportsOrientationLockAsync(\n  orientationLock: OrientationLock\n): Promise<boolean> {\n  if (!ExpoScreenOrientation.supportsOrientationLockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  return await ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock);\n}\n\nexport async function doesSupportAsync(orientationLock: OrientationLock): Promise<boolean> {\n  console.warn(\n    \"'ScreenOrientation.doesSupportAsync' is deprecated in favour of 'ScreenOrientation.supportsOrientationLockAsync'\"\n  );\n  return await supportsOrientationLockAsync(orientationLock);\n}\n\n// Determine the event name lazily so Jest can set up mocks in advance\nfunction getEventName(): string {\n  return Platform.OS === 'ios' || Platform.OS === 'web'\n    ? 'expoDidUpdateDimensions'\n    : 'didUpdateDimensions';\n}\n\n// We rely on RN to emit `didUpdateDimensions`\n// If this method no longer works, it's possible that the underlying RN implementation has changed\n// see https://github.com/facebook/react-native/blob/c31f79fe478b882540d7fd31ee37b53ddbd60a17/ReactAndroid/src/main/java/com/facebook/react/modules/deviceinfo/DeviceInfoModule.java#L90\nexport function addOrientationChangeListener(listener: OrientationChangeListener): Subscription {\n  if (typeof listener !== 'function') {\n    throw new TypeError(`addOrientationChangeListener cannot be called with ${listener}`);\n  }\n  const subscription = _orientationChangeEmitter.addListener(\n    getEventName(),\n    async (update: OrientationChangeEvent) => {\n      let orientationInfo, orientationLock;\n      if (Platform.OS === 'ios' || Platform.OS === 'web') {\n        // For iOS, RN relies on statusBarOrientation (deprecated) to emit `didUpdateDimensions` event, so we emit our own `expoDidUpdateDimensions` event instead\n        orientationLock = update.orientationLock;\n        orientationInfo = update.orientationInfo;\n      } else {\n        // We rely on the RN Dimensions to emit the `didUpdateDimensions` event on Android\n        [orientationLock, orientationInfo] = await Promise.all([\n          getOrientationLockAsync(),\n          getOrientationAsync(),\n        ]);\n      }\n      listener({ orientationInfo, orientationLock });\n    }\n  );\n  _orientationChangeSubscribers.push(subscription);\n  return subscription;\n}\n\n// We need to keep track of our own subscribers because EventEmitter uses a shared subscriber\n// from NativeEventEmitter that is registered to the same eventTypes as us. Directly calling\n// removeAllListeners(eventName) will remove other module's subscribers.\nexport function removeOrientationChangeListeners(): void {\n  // Remove listener by subscription instead of eventType to avoid clobbering Dimension module's subscription of didUpdateDimensions\n  let i = _orientationChangeSubscribers.length;\n  while (i--) {\n    const subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove();\n\n    // remove after a successful unsubscribe\n    _orientationChangeSubscribers.pop();\n  }\n}\n\nexport function removeOrientationChangeListener(subscription: Subscription): void {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(`Must pass in a valid subscription`);\n  }\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(sub => sub !== subscription);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}