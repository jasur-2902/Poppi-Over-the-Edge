{"ast":null,"code":"import AnimatedBlock from \"./core/AnimatedBlock\";\nimport AnimatedNode from \"./core/AnimatedNode\";\nimport AnimatedValue from \"./core/AnimatedValue\";\n\nfunction nodify(v) {\n  if (typeof v === 'object' && v.__isProxy) {\n    if (!v.__val) {\n      v.__val = new AnimatedValue(0);\n    }\n\n    return v.__val;\n  }\n\n  return v instanceof AnimatedNode ? v : new AnimatedValue(v);\n}\n\nexport function adapt(v) {\n  return Array.isArray(v) ? new AnimatedBlock(v.map(node => adapt(node))) : nodify(v);\n}\nexport function val(v) {\n  return v && v.__getValue ? v.__getValue() : v || 0;\n}","map":{"version":3,"sources":["C:/Users/jshukurov/Desktop/Poppi Over The Edge/Poppi-Over-the-Edge-master/node_modules/react-native-reanimated/src/utils.js"],"names":["AnimatedBlock","AnimatedNode","AnimatedValue","nodify","v","__isProxy","__val","adapt","Array","isArray","map","node","val","__getValue"],"mappings":"AAAA,OAAOA,aAAP;AACA,OAAOC,YAAP;AACA,OAAOC,aAAP;;AAEA,SAASC,MAAT,CAAgBC,CAAhB,EAAmB;AACjB,MAAI,OAAOA,CAAP,KAAa,QAAb,IAAyBA,CAAC,CAACC,SAA/B,EAA0C;AACxC,QAAI,CAACD,CAAC,CAACE,KAAP,EAAc;AACZF,MAAAA,CAAC,CAACE,KAAF,GAAU,IAAIJ,aAAJ,CAAkB,CAAlB,CAAV;AACD;;AACD,WAAOE,CAAC,CAACE,KAAT;AACD;;AAED,SAAOF,CAAC,YAAYH,YAAb,GAA4BG,CAA5B,GAAgC,IAAIF,aAAJ,CAAkBE,CAAlB,CAAvC;AACD;;AAED,OAAO,SAASG,KAAT,CAAeH,CAAf,EAAkB;AACvB,SAAOI,KAAK,CAACC,OAAN,CAAcL,CAAd,IACH,IAAIJ,aAAJ,CAAkBI,CAAC,CAACM,GAAF,CAAMC,IAAI,IAAIJ,KAAK,CAACI,IAAD,CAAnB,CAAlB,CADG,GAEHR,MAAM,CAACC,CAAD,CAFV;AAGD;AAED,OAAO,SAASQ,GAAT,CAAaR,CAAb,EAAgB;AACrB,SAAOA,CAAC,IAAIA,CAAC,CAACS,UAAP,GAAoBT,CAAC,CAACS,UAAF,EAApB,GAAqCT,CAAC,IAAI,CAAjD;AACD","sourcesContent":["import AnimatedBlock from './core/AnimatedBlock';\nimport AnimatedNode from './core/AnimatedNode';\nimport AnimatedValue from './core/AnimatedValue';\n\nfunction nodify(v) {\n  if (typeof v === 'object' && v.__isProxy) {\n    if (!v.__val) {\n      v.__val = new AnimatedValue(0);\n    }\n    return v.__val;\n  }\n  // TODO: cache some typical static values (e.g. 0, 1, -1)\n  return v instanceof AnimatedNode ? v : new AnimatedValue(v);\n}\n\nexport function adapt(v) {\n  return Array.isArray(v)\n    ? new AnimatedBlock(v.map(node => adapt(node)))\n    : nodify(v);\n}\n\nexport function val(v) {\n  return v && v.__getValue ? v.__getValue() : v || 0;\n}\n"]},"metadata":{},"sourceType":"module"}